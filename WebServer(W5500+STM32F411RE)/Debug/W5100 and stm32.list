
W5100 and stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005650  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000027c  080057f0  080057f0  000157f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005a6c  08005a6c  00015a6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005a74  08005a74  00015a74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08005a78  08005a78  00015a78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000b4  20000000  08005a7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000974  200000b4  08005b30  000200b4  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000a28  08005b30  00020a28  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000a9cc  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001c61  00000000  00000000  0002aab0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000a50  00000000  00000000  0002c718  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000980  00000000  00000000  0002d168  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000048de  00000000  00000000  0002dae8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000034a8  00000000  00000000  000323c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003586e  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003304  00000000  00000000  000358ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000b4 	.word	0x200000b4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080057d8 	.word	0x080057d8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000b8 	.word	0x200000b8
 80001dc:	080057d8 	.word	0x080057d8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b97a 	b.w	800059c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	468c      	mov	ip, r1
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	9e08      	ldr	r6, [sp, #32]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d151      	bne.n	8000374 <__udivmoddi4+0xb4>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d96d      	bls.n	80003b2 <__udivmoddi4+0xf2>
 80002d6:	fab2 fe82 	clz	lr, r2
 80002da:	f1be 0f00 	cmp.w	lr, #0
 80002de:	d00b      	beq.n	80002f8 <__udivmoddi4+0x38>
 80002e0:	f1ce 0c20 	rsb	ip, lr, #32
 80002e4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002ec:	fa02 f70e 	lsl.w	r7, r2, lr
 80002f0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002f4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002f8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002fc:	0c25      	lsrs	r5, r4, #16
 80002fe:	fbbc f8fa 	udiv	r8, ip, sl
 8000302:	fa1f f987 	uxth.w	r9, r7
 8000306:	fb0a cc18 	mls	ip, sl, r8, ip
 800030a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800030e:	fb08 f309 	mul.w	r3, r8, r9
 8000312:	42ab      	cmp	r3, r5
 8000314:	d90a      	bls.n	800032c <__udivmoddi4+0x6c>
 8000316:	19ed      	adds	r5, r5, r7
 8000318:	f108 32ff 	add.w	r2, r8, #4294967295
 800031c:	f080 8123 	bcs.w	8000566 <__udivmoddi4+0x2a6>
 8000320:	42ab      	cmp	r3, r5
 8000322:	f240 8120 	bls.w	8000566 <__udivmoddi4+0x2a6>
 8000326:	f1a8 0802 	sub.w	r8, r8, #2
 800032a:	443d      	add	r5, r7
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb5 f0fa 	udiv	r0, r5, sl
 8000334:	fb0a 5510 	mls	r5, sl, r0, r5
 8000338:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800033c:	fb00 f909 	mul.w	r9, r0, r9
 8000340:	45a1      	cmp	r9, r4
 8000342:	d909      	bls.n	8000358 <__udivmoddi4+0x98>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	f080 810a 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800034e:	45a1      	cmp	r9, r4
 8000350:	f240 8107 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000354:	3802      	subs	r0, #2
 8000356:	443c      	add	r4, r7
 8000358:	eba4 0409 	sub.w	r4, r4, r9
 800035c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000360:	2100      	movs	r1, #0
 8000362:	2e00      	cmp	r6, #0
 8000364:	d061      	beq.n	800042a <__udivmoddi4+0x16a>
 8000366:	fa24 f40e 	lsr.w	r4, r4, lr
 800036a:	2300      	movs	r3, #0
 800036c:	6034      	str	r4, [r6, #0]
 800036e:	6073      	str	r3, [r6, #4]
 8000370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000374:	428b      	cmp	r3, r1
 8000376:	d907      	bls.n	8000388 <__udivmoddi4+0xc8>
 8000378:	2e00      	cmp	r6, #0
 800037a:	d054      	beq.n	8000426 <__udivmoddi4+0x166>
 800037c:	2100      	movs	r1, #0
 800037e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000382:	4608      	mov	r0, r1
 8000384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000388:	fab3 f183 	clz	r1, r3
 800038c:	2900      	cmp	r1, #0
 800038e:	f040 808e 	bne.w	80004ae <__udivmoddi4+0x1ee>
 8000392:	42ab      	cmp	r3, r5
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xdc>
 8000396:	4282      	cmp	r2, r0
 8000398:	f200 80fa 	bhi.w	8000590 <__udivmoddi4+0x2d0>
 800039c:	1a84      	subs	r4, r0, r2
 800039e:	eb65 0503 	sbc.w	r5, r5, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	46ac      	mov	ip, r5
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d03f      	beq.n	800042a <__udivmoddi4+0x16a>
 80003aa:	e886 1010 	stmia.w	r6, {r4, ip}
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	b912      	cbnz	r2, 80003ba <__udivmoddi4+0xfa>
 80003b4:	2701      	movs	r7, #1
 80003b6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003ba:	fab7 fe87 	clz	lr, r7
 80003be:	f1be 0f00 	cmp.w	lr, #0
 80003c2:	d134      	bne.n	800042e <__udivmoddi4+0x16e>
 80003c4:	1beb      	subs	r3, r5, r7
 80003c6:	0c3a      	lsrs	r2, r7, #16
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	2101      	movs	r1, #1
 80003ce:	fbb3 f8f2 	udiv	r8, r3, r2
 80003d2:	0c25      	lsrs	r5, r4, #16
 80003d4:	fb02 3318 	mls	r3, r2, r8, r3
 80003d8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003dc:	fb0c f308 	mul.w	r3, ip, r8
 80003e0:	42ab      	cmp	r3, r5
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x134>
 80003e4:	19ed      	adds	r5, r5, r7
 80003e6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x132>
 80003ec:	42ab      	cmp	r3, r5
 80003ee:	f200 80d1 	bhi.w	8000594 <__udivmoddi4+0x2d4>
 80003f2:	4680      	mov	r8, r0
 80003f4:	1aed      	subs	r5, r5, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003fc:	fb02 5510 	mls	r5, r2, r0, r5
 8000400:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000404:	fb0c fc00 	mul.w	ip, ip, r0
 8000408:	45a4      	cmp	ip, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x15c>
 800040c:	19e4      	adds	r4, r4, r7
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x15a>
 8000414:	45a4      	cmp	ip, r4
 8000416:	f200 80b8 	bhi.w	800058a <__udivmoddi4+0x2ca>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 040c 	sub.w	r4, r4, ip
 8000420:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000424:	e79d      	b.n	8000362 <__udivmoddi4+0xa2>
 8000426:	4631      	mov	r1, r6
 8000428:	4630      	mov	r0, r6
 800042a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042e:	f1ce 0420 	rsb	r4, lr, #32
 8000432:	fa05 f30e 	lsl.w	r3, r5, lr
 8000436:	fa07 f70e 	lsl.w	r7, r7, lr
 800043a:	fa20 f804 	lsr.w	r8, r0, r4
 800043e:	0c3a      	lsrs	r2, r7, #16
 8000440:	fa25 f404 	lsr.w	r4, r5, r4
 8000444:	ea48 0803 	orr.w	r8, r8, r3
 8000448:	fbb4 f1f2 	udiv	r1, r4, r2
 800044c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000450:	fb02 4411 	mls	r4, r2, r1, r4
 8000454:	fa1f fc87 	uxth.w	ip, r7
 8000458:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800045c:	fb01 f30c 	mul.w	r3, r1, ip
 8000460:	42ab      	cmp	r3, r5
 8000462:	fa00 f40e 	lsl.w	r4, r0, lr
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x1bc>
 8000468:	19ed      	adds	r5, r5, r7
 800046a:	f101 30ff 	add.w	r0, r1, #4294967295
 800046e:	f080 808a 	bcs.w	8000586 <__udivmoddi4+0x2c6>
 8000472:	42ab      	cmp	r3, r5
 8000474:	f240 8087 	bls.w	8000586 <__udivmoddi4+0x2c6>
 8000478:	3902      	subs	r1, #2
 800047a:	443d      	add	r5, r7
 800047c:	1aeb      	subs	r3, r5, r3
 800047e:	fa1f f588 	uxth.w	r5, r8
 8000482:	fbb3 f0f2 	udiv	r0, r3, r2
 8000486:	fb02 3310 	mls	r3, r2, r0, r3
 800048a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800048e:	fb00 f30c 	mul.w	r3, r0, ip
 8000492:	42ab      	cmp	r3, r5
 8000494:	d907      	bls.n	80004a6 <__udivmoddi4+0x1e6>
 8000496:	19ed      	adds	r5, r5, r7
 8000498:	f100 38ff 	add.w	r8, r0, #4294967295
 800049c:	d26f      	bcs.n	800057e <__udivmoddi4+0x2be>
 800049e:	42ab      	cmp	r3, r5
 80004a0:	d96d      	bls.n	800057e <__udivmoddi4+0x2be>
 80004a2:	3802      	subs	r0, #2
 80004a4:	443d      	add	r5, r7
 80004a6:	1aeb      	subs	r3, r5, r3
 80004a8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004ac:	e78f      	b.n	80003ce <__udivmoddi4+0x10e>
 80004ae:	f1c1 0720 	rsb	r7, r1, #32
 80004b2:	fa22 f807 	lsr.w	r8, r2, r7
 80004b6:	408b      	lsls	r3, r1
 80004b8:	fa05 f401 	lsl.w	r4, r5, r1
 80004bc:	ea48 0303 	orr.w	r3, r8, r3
 80004c0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004c4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004c8:	40fd      	lsrs	r5, r7
 80004ca:	ea4e 0e04 	orr.w	lr, lr, r4
 80004ce:	fbb5 f9fc 	udiv	r9, r5, ip
 80004d2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004d6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004da:	fa1f f883 	uxth.w	r8, r3
 80004de:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004e2:	fb09 f408 	mul.w	r4, r9, r8
 80004e6:	42ac      	cmp	r4, r5
 80004e8:	fa02 f201 	lsl.w	r2, r2, r1
 80004ec:	fa00 fa01 	lsl.w	sl, r0, r1
 80004f0:	d908      	bls.n	8000504 <__udivmoddi4+0x244>
 80004f2:	18ed      	adds	r5, r5, r3
 80004f4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f8:	d243      	bcs.n	8000582 <__udivmoddi4+0x2c2>
 80004fa:	42ac      	cmp	r4, r5
 80004fc:	d941      	bls.n	8000582 <__udivmoddi4+0x2c2>
 80004fe:	f1a9 0902 	sub.w	r9, r9, #2
 8000502:	441d      	add	r5, r3
 8000504:	1b2d      	subs	r5, r5, r4
 8000506:	fa1f fe8e 	uxth.w	lr, lr
 800050a:	fbb5 f0fc 	udiv	r0, r5, ip
 800050e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000512:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000516:	fb00 f808 	mul.w	r8, r0, r8
 800051a:	45a0      	cmp	r8, r4
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x26e>
 800051e:	18e4      	adds	r4, r4, r3
 8000520:	f100 35ff 	add.w	r5, r0, #4294967295
 8000524:	d229      	bcs.n	800057a <__udivmoddi4+0x2ba>
 8000526:	45a0      	cmp	r8, r4
 8000528:	d927      	bls.n	800057a <__udivmoddi4+0x2ba>
 800052a:	3802      	subs	r0, #2
 800052c:	441c      	add	r4, r3
 800052e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000532:	eba4 0408 	sub.w	r4, r4, r8
 8000536:	fba0 8902 	umull	r8, r9, r0, r2
 800053a:	454c      	cmp	r4, r9
 800053c:	46c6      	mov	lr, r8
 800053e:	464d      	mov	r5, r9
 8000540:	d315      	bcc.n	800056e <__udivmoddi4+0x2ae>
 8000542:	d012      	beq.n	800056a <__udivmoddi4+0x2aa>
 8000544:	b156      	cbz	r6, 800055c <__udivmoddi4+0x29c>
 8000546:	ebba 030e 	subs.w	r3, sl, lr
 800054a:	eb64 0405 	sbc.w	r4, r4, r5
 800054e:	fa04 f707 	lsl.w	r7, r4, r7
 8000552:	40cb      	lsrs	r3, r1
 8000554:	431f      	orrs	r7, r3
 8000556:	40cc      	lsrs	r4, r1
 8000558:	6037      	str	r7, [r6, #0]
 800055a:	6074      	str	r4, [r6, #4]
 800055c:	2100      	movs	r1, #0
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	4618      	mov	r0, r3
 8000564:	e6f8      	b.n	8000358 <__udivmoddi4+0x98>
 8000566:	4690      	mov	r8, r2
 8000568:	e6e0      	b.n	800032c <__udivmoddi4+0x6c>
 800056a:	45c2      	cmp	sl, r8
 800056c:	d2ea      	bcs.n	8000544 <__udivmoddi4+0x284>
 800056e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000572:	eb69 0503 	sbc.w	r5, r9, r3
 8000576:	3801      	subs	r0, #1
 8000578:	e7e4      	b.n	8000544 <__udivmoddi4+0x284>
 800057a:	4628      	mov	r0, r5
 800057c:	e7d7      	b.n	800052e <__udivmoddi4+0x26e>
 800057e:	4640      	mov	r0, r8
 8000580:	e791      	b.n	80004a6 <__udivmoddi4+0x1e6>
 8000582:	4681      	mov	r9, r0
 8000584:	e7be      	b.n	8000504 <__udivmoddi4+0x244>
 8000586:	4601      	mov	r1, r0
 8000588:	e778      	b.n	800047c <__udivmoddi4+0x1bc>
 800058a:	3802      	subs	r0, #2
 800058c:	443c      	add	r4, r7
 800058e:	e745      	b.n	800041c <__udivmoddi4+0x15c>
 8000590:	4608      	mov	r0, r1
 8000592:	e708      	b.n	80003a6 <__udivmoddi4+0xe6>
 8000594:	f1a8 0802 	sub.w	r8, r8, #2
 8000598:	443d      	add	r5, r7
 800059a:	e72b      	b.n	80003f4 <__udivmoddi4+0x134>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <csEnable>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void csEnable(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80005a4:	2200      	movs	r2, #0
 80005a6:	2140      	movs	r1, #64	; 0x40
 80005a8:	4802      	ldr	r0, [pc, #8]	; (80005b4 <csEnable+0x14>)
 80005aa:	f000 ff6b 	bl	8001484 <HAL_GPIO_WritePin>
}
 80005ae:	bf00      	nop
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	40020400 	.word	0x40020400

080005b8 <csDisable>:

void csDisable(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80005bc:	2201      	movs	r2, #1
 80005be:	2140      	movs	r1, #64	; 0x40
 80005c0:	4802      	ldr	r0, [pc, #8]	; (80005cc <csDisable+0x14>)
 80005c2:	f000 ff5f 	bl	8001484 <HAL_GPIO_WritePin>
}
 80005c6:	bf00      	nop
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	40020400 	.word	0x40020400

080005d0 <spiWriteByte>:

void spiWriteByte(uint8_t tx)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b086      	sub	sp, #24
 80005d4:	af02      	add	r7, sp, #8
 80005d6:	4603      	mov	r3, r0
 80005d8:	71fb      	strb	r3, [r7, #7]

 uint8_t rx=0;
 80005da:	2300      	movs	r3, #0
 80005dc:	73fb      	strb	r3, [r7, #15]
HAL_SPI_TransmitReceive(&hspi1, &tx, &rx,1, 10);
 80005de:	f107 020f 	add.w	r2, r7, #15
 80005e2:	1df9      	adds	r1, r7, #7
 80005e4:	230a      	movs	r3, #10
 80005e6:	9300      	str	r3, [sp, #0]
 80005e8:	2301      	movs	r3, #1
 80005ea:	4803      	ldr	r0, [pc, #12]	; (80005f8 <spiWriteByte+0x28>)
 80005ec:	f001 fc07 	bl	8001dfe <HAL_SPI_TransmitReceive>
}
 80005f0:	bf00      	nop
 80005f2:	3710      	adds	r7, #16
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	20000984 	.word	0x20000984

080005fc <spiReadByte>:

uint8_t spiReadByte(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af02      	add	r7, sp, #8

uint8_t rx = 0, tx = 0xFF;
 8000602:	2300      	movs	r3, #0
 8000604:	71fb      	strb	r3, [r7, #7]
 8000606:	23ff      	movs	r3, #255	; 0xff
 8000608:	71bb      	strb	r3, [r7, #6]
HAL_SPI_TransmitReceive(&hspi1, &tx, &rx, 1, 10);
 800060a:	1dfa      	adds	r2, r7, #7
 800060c:	1db9      	adds	r1, r7, #6
 800060e:	230a      	movs	r3, #10
 8000610:	9300      	str	r3, [sp, #0]
 8000612:	2301      	movs	r3, #1
 8000614:	4803      	ldr	r0, [pc, #12]	; (8000624 <spiReadByte+0x28>)
 8000616:	f001 fbf2 	bl	8001dfe <HAL_SPI_TransmitReceive>
return rx;
 800061a:	79fb      	ldrb	r3, [r7, #7]

}
 800061c:	4618      	mov	r0, r3
 800061e:	3708      	adds	r7, #8
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	20000984 	.word	0x20000984

08000628 <W5500_Init>:
void W5500_Init(void)
{
 8000628:	b590      	push	{r4, r7, lr}
 800062a:	b085      	sub	sp, #20
 800062c:	af00      	add	r7, sp, #0

	//unsigned char W5100S_AdrSet[2][4] = {{2,2,2,2},{2,2,2,2}};  //for 5100
	unsigned char W5500_AdrSet[2][8] = { { 2, 2, 2, 2, 2, 2, 2, 2 }, { 2, 2, 2, 2, 2, 2, 2, 2 } };//for 5500
 800062e:	4b0f      	ldr	r3, [pc, #60]	; (800066c <W5500_Init+0x44>)
 8000630:	463c      	mov	r4, r7
 8000632:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000634:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* SPI method callback registration */
	reg_wizchip_spi_cbfunc(spiReadByte, spiWriteByte);
 8000638:	490d      	ldr	r1, [pc, #52]	; (8000670 <W5500_Init+0x48>)
 800063a:	480e      	ldr	r0, [pc, #56]	; (8000674 <W5500_Init+0x4c>)
 800063c:	f003 fa60 	bl	8003b00 <reg_wizchip_spi_cbfunc>
	/* CS function register */
	reg_wizchip_cs_cbfunc(csEnable,csDisable);
 8000640:	490d      	ldr	r1, [pc, #52]	; (8000678 <W5500_Init+0x50>)
 8000642:	480e      	ldr	r0, [pc, #56]	; (800067c <W5500_Init+0x54>)
 8000644:	f003 fa38 	bl	8003ab8 <reg_wizchip_cs_cbfunc>

	/* W5500 Chip Initialization */
	if(ctlwizchip(CW_INIT_WIZCHIP,(void*)W5500_AdrSet) == -1)
 8000648:	463b      	mov	r3, r7
 800064a:	4619      	mov	r1, r3
 800064c:	2001      	movs	r0, #1
 800064e:	f003 fa83 	bl	8003b58 <ctlwizchip>
 8000652:	4603      	mov	r3, r0
 8000654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000658:	d103      	bne.n	8000662 <W5500_Init+0x3a>
	{
		printf("W5500 initialized fail.\r\n");
 800065a:	4809      	ldr	r0, [pc, #36]	; (8000680 <W5500_Init+0x58>)
 800065c:	f004 f806 	bl	800466c <puts>
		while(1);
 8000660:	e7fe      	b.n	8000660 <W5500_Init+0x38>
	}

}
 8000662:	bf00      	nop
 8000664:	3714      	adds	r7, #20
 8000666:	46bd      	mov	sp, r7
 8000668:	bd90      	pop	{r4, r7, pc}
 800066a:	bf00      	nop
 800066c:	0800580c 	.word	0x0800580c
 8000670:	080005d1 	.word	0x080005d1
 8000674:	080005fd 	.word	0x080005fd
 8000678:	080005b9 	.word	0x080005b9
 800067c:	080005a1 	.word	0x080005a1
 8000680:	080057f0 	.word	0x080057f0

08000684 <main>:
/**
* @brief The application entry point.
* @retval int
*/
int main(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b084      	sub	sp, #16
 8000688:	af02      	add	r7, sp, #8

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */


	/* USER CODE BEGIN Init */
	HAL_Init();
 800068a:	f000 fc01 	bl	8000e90 <HAL_Init>
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800068e:	f000 f8b7 	bl	8000800 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000692:	f000 f973 	bl	800097c <MX_GPIO_Init>
	MX_SPI1_Init();
 8000696:	f000 f911 	bl	80008bc <MX_SPI1_Init>
	MX_USART2_UART_Init();
 800069a:	f000 f945 	bl	8000928 <MX_USART2_UART_Init>
	W5500_Init();
 800069e:	f7ff ffc3 	bl	8000628 <W5500_Init>
	/* USER CODE BEGIN 2 */
	RetargetInit(&huart2);
 80006a2:	4847      	ldr	r0, [pc, #284]	; (80007c0 <main+0x13c>)
 80006a4:	f000 fa36 	bl	8000b14 <RetargetInit>

	printf("System start.\r\n");
 80006a8:	4846      	ldr	r0, [pc, #280]	; (80007c4 <main+0x140>)
 80006aa:	f003 ffdf 	bl	800466c <puts>

	wizchip_setnetinfo(&gWIZNETINFO);
 80006ae:	4846      	ldr	r0, [pc, #280]	; (80007c8 <main+0x144>)
 80006b0:	f003 fdcc 	bl	800424c <wizchip_setnetinfo>
	HAL_Delay(1000);
 80006b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006b8:	f000 fc5c 	bl	8000f74 <HAL_Delay>

	print_network_information();
 80006bc:	f000 f9a0 	bl	8000a00 <print_network_information>
	/* Infinite loop */

	while (1)
	{
		/* USER CODE BEGIN WHILE */
		printf("Creating socket...\r\n");
 80006c0:	4842      	ldr	r0, [pc, #264]	; (80007cc <main+0x148>)
 80006c2:	f003 ffd3 	bl	800466c <puts>
		stat1 = socket(HTTP_SOCKET, Sn_MR_TCP, 80, 0);
 80006c6:	2300      	movs	r3, #0
 80006c8:	2250      	movs	r2, #80	; 0x50
 80006ca:	2101      	movs	r1, #1
 80006cc:	2000      	movs	r0, #0
 80006ce:	f002 fd43 	bl	8003158 <socket>
 80006d2:	4603      	mov	r3, r0
 80006d4:	b2da      	uxtb	r2, r3
 80006d6:	4b3e      	ldr	r3, [pc, #248]	; (80007d0 <main+0x14c>)
 80006d8:	701a      	strb	r2, [r3, #0]
		if(stat1 != HTTP_SOCKET) printf("socket() failed, code = %d\r\n", stat1);
 80006da:	4b3d      	ldr	r3, [pc, #244]	; (80007d0 <main+0x14c>)
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d006      	beq.n	80006f0 <main+0x6c>
 80006e2:	4b3b      	ldr	r3, [pc, #236]	; (80007d0 <main+0x14c>)
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	4619      	mov	r1, r3
 80006e8:	483a      	ldr	r0, [pc, #232]	; (80007d4 <main+0x150>)
 80006ea:	f003 ff4b 	bl	8004584 <iprintf>
 80006ee:	e002      	b.n	80006f6 <main+0x72>
		else printf("Socket created, connecting...\r\n");
 80006f0:	4839      	ldr	r0, [pc, #228]	; (80007d8 <main+0x154>)
 80006f2:	f003 ffbb 	bl	800466c <puts>

		stat1 = listen(HTTP_SOCKET);
 80006f6:	2000      	movs	r0, #0
 80006f8:	f002 feb0 	bl	800345c <listen>
 80006fc:	4603      	mov	r3, r0
 80006fe:	b2da      	uxtb	r2, r3
 8000700:	4b33      	ldr	r3, [pc, #204]	; (80007d0 <main+0x14c>)
 8000702:	701a      	strb	r2, [r3, #0]
		if(stat1 != SOCK_OK) printf("listen() failed, code = %d\r\n", stat1);
 8000704:	4b32      	ldr	r3, [pc, #200]	; (80007d0 <main+0x14c>)
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	2b01      	cmp	r3, #1
 800070a:	d006      	beq.n	800071a <main+0x96>
 800070c:	4b30      	ldr	r3, [pc, #192]	; (80007d0 <main+0x14c>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	4619      	mov	r1, r3
 8000712:	4832      	ldr	r0, [pc, #200]	; (80007dc <main+0x158>)
 8000714:	f003 ff36 	bl	8004584 <iprintf>
 8000718:	e006      	b.n	8000728 <main+0xa4>
		else printf("listen() OK\r\n");
 800071a:	4831      	ldr	r0, [pc, #196]	; (80007e0 <main+0x15c>)
 800071c:	f003 ffa6 	bl	800466c <puts>

		while(getSn_SR(HTTP_SOCKET) == SOCK_LISTEN)
 8000720:	e002      	b.n	8000728 <main+0xa4>
		{
			HAL_Delay(2);
 8000722:	2002      	movs	r0, #2
 8000724:	f000 fc26 	bl	8000f74 <HAL_Delay>
		while(getSn_SR(HTTP_SOCKET) == SOCK_LISTEN)
 8000728:	f44f 7042 	mov.w	r0, #776	; 0x308
 800072c:	f002 fac8 	bl	8002cc0 <WIZCHIP_READ>
 8000730:	4603      	mov	r3, r0
 8000732:	2b14      	cmp	r3, #20
 8000734:	d0f5      	beq.n	8000722 <main+0x9e>
		}

		printf("Input connection\r\n");
 8000736:	482b      	ldr	r0, [pc, #172]	; (80007e4 <main+0x160>)
 8000738:	f003 ff98 	bl	800466c <puts>
		if(getSn_SR(HTTP_SOCKET) != SOCK_ESTABLISHED) printf("Error socket status\r\n");
 800073c:	f44f 7042 	mov.w	r0, #776	; 0x308
 8000740:	f002 fabe 	bl	8002cc0 <WIZCHIP_READ>
 8000744:	4603      	mov	r3, r0
 8000746:	2b17      	cmp	r3, #23
 8000748:	d002      	beq.n	8000750 <main+0xcc>
 800074a:	4827      	ldr	r0, [pc, #156]	; (80007e8 <main+0x164>)
 800074c:	f003 ff8e 	bl	800466c <puts>

		uint8_t rIP[4];
		getsockopt(HTTP_SOCKET, SO_DESTIP, rIP);
 8000750:	1d3b      	adds	r3, r7, #4
 8000752:	461a      	mov	r2, r3
 8000754:	2104      	movs	r1, #4
 8000756:	2000      	movs	r0, #0
 8000758:	f003 f84a 	bl	80037f0 <getsockopt>
		printf("IP:  %d.%d.%d.%d\r\n", rIP[0], rIP[1], rIP[2], rIP[3]);
 800075c:	793b      	ldrb	r3, [r7, #4]
 800075e:	4619      	mov	r1, r3
 8000760:	797b      	ldrb	r3, [r7, #5]
 8000762:	461a      	mov	r2, r3
 8000764:	79bb      	ldrb	r3, [r7, #6]
 8000766:	4618      	mov	r0, r3
 8000768:	79fb      	ldrb	r3, [r7, #7]
 800076a:	9300      	str	r3, [sp, #0]
 800076c:	4603      	mov	r3, r0
 800076e:	481f      	ldr	r0, [pc, #124]	; (80007ec <main+0x168>)
 8000770:	f003 ff08 	bl	8004584 <iprintf>

		sprintf(Message, "input connection nr - %d", reqnr);
 8000774:	4b1e      	ldr	r3, [pc, #120]	; (80007f0 <main+0x16c>)
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	461a      	mov	r2, r3
 800077a:	491e      	ldr	r1, [pc, #120]	; (80007f4 <main+0x170>)
 800077c:	481e      	ldr	r0, [pc, #120]	; (80007f8 <main+0x174>)
 800077e:	f004 f83b 	bl	80047f8 <siprintf>

		send(0, (uint8_t*)Message, strlen(Message));
 8000782:	481d      	ldr	r0, [pc, #116]	; (80007f8 <main+0x174>)
 8000784:	f7ff fd2c 	bl	80001e0 <strlen>
 8000788:	4603      	mov	r3, r0
 800078a:	b29b      	uxth	r3, r3
 800078c:	461a      	mov	r2, r3
 800078e:	491a      	ldr	r1, [pc, #104]	; (80007f8 <main+0x174>)
 8000790:	2000      	movs	r0, #0
 8000792:	f002 ff33 	bl	80035fc <send>

		disconnect(HTTP_SOCKET);
 8000796:	2000      	movs	r0, #0
 8000798:	f002 feba 	bl	8003510 <disconnect>

		printf("Closing socket.\r\n");
 800079c:	4817      	ldr	r0, [pc, #92]	; (80007fc <main+0x178>)
 800079e:	f003 ff65 	bl	800466c <puts>
		close(HTTP_SOCKET);
 80007a2:	2000      	movs	r0, #0
 80007a4:	f002 fdec 	bl	8003380 <close>

		HAL_Delay(1000);
 80007a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007ac:	f000 fbe2 	bl	8000f74 <HAL_Delay>
		reqnr++;
 80007b0:	4b0f      	ldr	r3, [pc, #60]	; (80007f0 <main+0x16c>)
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	3301      	adds	r3, #1
 80007b6:	b2da      	uxtb	r2, r3
 80007b8:	4b0d      	ldr	r3, [pc, #52]	; (80007f0 <main+0x16c>)
 80007ba:	701a      	strb	r2, [r3, #0]
	{
 80007bc:	e780      	b.n	80006c0 <main+0x3c>
 80007be:	bf00      	nop
 80007c0:	200009dc 	.word	0x200009dc
 80007c4:	0800581c 	.word	0x0800581c
 80007c8:	20000000 	.word	0x20000000
 80007cc:	0800582c 	.word	0x0800582c
 80007d0:	20000981 	.word	0x20000981
 80007d4:	08005840 	.word	0x08005840
 80007d8:	08005860 	.word	0x08005860
 80007dc:	08005880 	.word	0x08005880
 80007e0:	080058a0 	.word	0x080058a0
 80007e4:	080058b0 	.word	0x080058b0
 80007e8:	080058c4 	.word	0x080058c4
 80007ec:	080058dc 	.word	0x080058dc
 80007f0:	20000980 	.word	0x20000980
 80007f4:	080058f0 	.word	0x080058f0
 80007f8:	20000100 	.word	0x20000100
 80007fc:	0800590c 	.word	0x0800590c

08000800 <SystemClock_Config>:
/**
* @brief System Clock Configuration
* @retval None
*/
void SystemClock_Config(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b094      	sub	sp, #80	; 0x50
 8000804:	af00      	add	r7, sp, #0
RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000806:	f107 0320 	add.w	r3, r7, #32
 800080a:	2230      	movs	r2, #48	; 0x30
 800080c:	2100      	movs	r1, #0
 800080e:	4618      	mov	r0, r3
 8000810:	f003 fe03 	bl	800441a <memset>
RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000814:	f107 030c 	add.w	r3, r7, #12
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	605a      	str	r2, [r3, #4]
 800081e:	609a      	str	r2, [r3, #8]
 8000820:	60da      	str	r2, [r3, #12]
 8000822:	611a      	str	r2, [r3, #16]

 /** Configure the main internal regulator output voltage
*/
__HAL_RCC_PWR_CLK_ENABLE();
 8000824:	2300      	movs	r3, #0
 8000826:	60bb      	str	r3, [r7, #8]
 8000828:	4a22      	ldr	r2, [pc, #136]	; (80008b4 <SystemClock_Config+0xb4>)
 800082a:	4b22      	ldr	r3, [pc, #136]	; (80008b4 <SystemClock_Config+0xb4>)
 800082c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000832:	6413      	str	r3, [r2, #64]	; 0x40
 8000834:	4b1f      	ldr	r3, [pc, #124]	; (80008b4 <SystemClock_Config+0xb4>)
 8000836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000838:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800083c:	60bb      	str	r3, [r7, #8]
 800083e:	68bb      	ldr	r3, [r7, #8]
__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000840:	2300      	movs	r3, #0
 8000842:	607b      	str	r3, [r7, #4]
 8000844:	4a1c      	ldr	r2, [pc, #112]	; (80008b8 <SystemClock_Config+0xb8>)
 8000846:	4b1c      	ldr	r3, [pc, #112]	; (80008b8 <SystemClock_Config+0xb8>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800084e:	6013      	str	r3, [r2, #0]
 8000850:	4b19      	ldr	r3, [pc, #100]	; (80008b8 <SystemClock_Config+0xb8>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000858:	607b      	str	r3, [r7, #4]
 800085a:	687b      	ldr	r3, [r7, #4]
/** Initializes the CPU, AHB and APB busses clocks
*/
RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800085c:	2302      	movs	r3, #2
 800085e:	623b      	str	r3, [r7, #32]
RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000860:	2301      	movs	r3, #1
 8000862:	62fb      	str	r3, [r7, #44]	; 0x2c
RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000864:	2310      	movs	r3, #16
 8000866:	633b      	str	r3, [r7, #48]	; 0x30
RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000868:	2300      	movs	r3, #0
 800086a:	63bb      	str	r3, [r7, #56]	; 0x38
if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800086c:	f107 0320 	add.w	r3, r7, #32
 8000870:	4618      	mov	r0, r3
 8000872:	f000 fe21 	bl	80014b8 <HAL_RCC_OscConfig>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <SystemClock_Config+0x80>
{
Error_Handler();
 800087c:	f000 f942 	bl	8000b04 <Error_Handler>
}
/** Initializes the CPU, AHB and APB busses clocks
*/
RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000880:	230f      	movs	r3, #15
 8000882:	60fb      	str	r3, [r7, #12]
|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000884:	2300      	movs	r3, #0
 8000886:	613b      	str	r3, [r7, #16]
RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000888:	2300      	movs	r3, #0
 800088a:	617b      	str	r3, [r7, #20]
RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800088c:	2300      	movs	r3, #0
 800088e:	61bb      	str	r3, [r7, #24]
RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000890:	2300      	movs	r3, #0
 8000892:	61fb      	str	r3, [r7, #28]

 if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000894:	f107 030c 	add.w	r3, r7, #12
 8000898:	2100      	movs	r1, #0
 800089a:	4618      	mov	r0, r3
 800089c:	f001 f87c 	bl	8001998 <HAL_RCC_ClockConfig>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <SystemClock_Config+0xaa>
{
Error_Handler();
 80008a6:	f000 f92d 	bl	8000b04 <Error_Handler>
}
}
 80008aa:	bf00      	nop
 80008ac:	3750      	adds	r7, #80	; 0x50
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	40023800 	.word	0x40023800
 80008b8:	40007000 	.word	0x40007000

080008bc <MX_SPI1_Init>:
* @brief SPI1 Initialization Function
* @param None
* @retval None
*/
static void MX_SPI1_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0

 /* USER CODE BEGIN SPI1_Init 1 */

 /* USER CODE END SPI1_Init 1 */
/* SPI1 parameter configuration*/
hspi1.Instance = SPI1;
 80008c0:	4b17      	ldr	r3, [pc, #92]	; (8000920 <MX_SPI1_Init+0x64>)
 80008c2:	4a18      	ldr	r2, [pc, #96]	; (8000924 <MX_SPI1_Init+0x68>)
 80008c4:	601a      	str	r2, [r3, #0]
hspi1.Init.Mode = SPI_MODE_MASTER;
 80008c6:	4b16      	ldr	r3, [pc, #88]	; (8000920 <MX_SPI1_Init+0x64>)
 80008c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008cc:	605a      	str	r2, [r3, #4]
hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008ce:	4b14      	ldr	r3, [pc, #80]	; (8000920 <MX_SPI1_Init+0x64>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	609a      	str	r2, [r3, #8]
hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008d4:	4b12      	ldr	r3, [pc, #72]	; (8000920 <MX_SPI1_Init+0x64>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	60da      	str	r2, [r3, #12]
hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008da:	4b11      	ldr	r3, [pc, #68]	; (8000920 <MX_SPI1_Init+0x64>)
 80008dc:	2200      	movs	r2, #0
 80008de:	611a      	str	r2, [r3, #16]
hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008e0:	4b0f      	ldr	r3, [pc, #60]	; (8000920 <MX_SPI1_Init+0x64>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	615a      	str	r2, [r3, #20]
hspi1.Init.NSS = SPI_NSS_SOFT;
 80008e6:	4b0e      	ldr	r3, [pc, #56]	; (8000920 <MX_SPI1_Init+0x64>)
 80008e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008ec:	619a      	str	r2, [r3, #24]
hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008ee:	4b0c      	ldr	r3, [pc, #48]	; (8000920 <MX_SPI1_Init+0x64>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	61da      	str	r2, [r3, #28]
hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008f4:	4b0a      	ldr	r3, [pc, #40]	; (8000920 <MX_SPI1_Init+0x64>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	621a      	str	r2, [r3, #32]
hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008fa:	4b09      	ldr	r3, [pc, #36]	; (8000920 <MX_SPI1_Init+0x64>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	625a      	str	r2, [r3, #36]	; 0x24
hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000900:	4b07      	ldr	r3, [pc, #28]	; (8000920 <MX_SPI1_Init+0x64>)
 8000902:	2200      	movs	r2, #0
 8000904:	629a      	str	r2, [r3, #40]	; 0x28
hspi1.Init.CRCPolynomial = 10;
 8000906:	4b06      	ldr	r3, [pc, #24]	; (8000920 <MX_SPI1_Init+0x64>)
 8000908:	220a      	movs	r2, #10
 800090a:	62da      	str	r2, [r3, #44]	; 0x2c
if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800090c:	4804      	ldr	r0, [pc, #16]	; (8000920 <MX_SPI1_Init+0x64>)
 800090e:	f001 fa13 	bl	8001d38 <HAL_SPI_Init>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_SPI1_Init+0x60>
{
Error_Handler();
 8000918:	f000 f8f4 	bl	8000b04 <Error_Handler>
}
/* USER CODE BEGIN SPI1_Init 2 */

 /* USER CODE END SPI1_Init 2 */

}
 800091c:	bf00      	nop
 800091e:	bd80      	pop	{r7, pc}
 8000920:	20000984 	.word	0x20000984
 8000924:	40013000 	.word	0x40013000

08000928 <MX_USART2_UART_Init>:
* @brief USART2 Initialization Function
* @param None
* @retval None
*/
static void MX_USART2_UART_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
 /* USER CODE END USART2_Init 0 */

 /* USER CODE BEGIN USART2_Init 1 */

 /* USER CODE END USART2_Init 1 */
huart2.Instance = USART2;
 800092c:	4b11      	ldr	r3, [pc, #68]	; (8000974 <MX_USART2_UART_Init+0x4c>)
 800092e:	4a12      	ldr	r2, [pc, #72]	; (8000978 <MX_USART2_UART_Init+0x50>)
 8000930:	601a      	str	r2, [r3, #0]
huart2.Init.BaudRate = 115200;
 8000932:	4b10      	ldr	r3, [pc, #64]	; (8000974 <MX_USART2_UART_Init+0x4c>)
 8000934:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000938:	605a      	str	r2, [r3, #4]
huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800093a:	4b0e      	ldr	r3, [pc, #56]	; (8000974 <MX_USART2_UART_Init+0x4c>)
 800093c:	2200      	movs	r2, #0
 800093e:	609a      	str	r2, [r3, #8]
huart2.Init.StopBits = UART_STOPBITS_1;
 8000940:	4b0c      	ldr	r3, [pc, #48]	; (8000974 <MX_USART2_UART_Init+0x4c>)
 8000942:	2200      	movs	r2, #0
 8000944:	60da      	str	r2, [r3, #12]
huart2.Init.Parity = UART_PARITY_NONE;
 8000946:	4b0b      	ldr	r3, [pc, #44]	; (8000974 <MX_USART2_UART_Init+0x4c>)
 8000948:	2200      	movs	r2, #0
 800094a:	611a      	str	r2, [r3, #16]
huart2.Init.Mode = UART_MODE_TX_RX;
 800094c:	4b09      	ldr	r3, [pc, #36]	; (8000974 <MX_USART2_UART_Init+0x4c>)
 800094e:	220c      	movs	r2, #12
 8000950:	615a      	str	r2, [r3, #20]
huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000952:	4b08      	ldr	r3, [pc, #32]	; (8000974 <MX_USART2_UART_Init+0x4c>)
 8000954:	2200      	movs	r2, #0
 8000956:	619a      	str	r2, [r3, #24]
huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000958:	4b06      	ldr	r3, [pc, #24]	; (8000974 <MX_USART2_UART_Init+0x4c>)
 800095a:	2200      	movs	r2, #0
 800095c:	61da      	str	r2, [r3, #28]
if (HAL_UART_Init(&huart2) != HAL_OK)
 800095e:	4805      	ldr	r0, [pc, #20]	; (8000974 <MX_USART2_UART_Init+0x4c>)
 8000960:	f001 fc9a 	bl	8002298 <HAL_UART_Init>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_USART2_UART_Init+0x46>
{
Error_Handler();
 800096a:	f000 f8cb 	bl	8000b04 <Error_Handler>
}
/* USER CODE BEGIN USART2_Init 2 */

 /* USER CODE END USART2_Init 2 */

}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	200009dc 	.word	0x200009dc
 8000978:	40004400 	.word	0x40004400

0800097c <MX_GPIO_Init>:
* @brief GPIO Initialization Function
* @param None
* @retval None
*/
static void MX_GPIO_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b088      	sub	sp, #32
 8000980:	af00      	add	r7, sp, #0
GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000982:	f107 030c 	add.w	r3, r7, #12
 8000986:	2200      	movs	r2, #0
 8000988:	601a      	str	r2, [r3, #0]
 800098a:	605a      	str	r2, [r3, #4]
 800098c:	609a      	str	r2, [r3, #8]
 800098e:	60da      	str	r2, [r3, #12]
 8000990:	611a      	str	r2, [r3, #16]

 /* GPIO Ports Clock Enable */
__HAL_RCC_GPIOA_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	60bb      	str	r3, [r7, #8]
 8000996:	4a18      	ldr	r2, [pc, #96]	; (80009f8 <MX_GPIO_Init+0x7c>)
 8000998:	4b17      	ldr	r3, [pc, #92]	; (80009f8 <MX_GPIO_Init+0x7c>)
 800099a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099c:	f043 0301 	orr.w	r3, r3, #1
 80009a0:	6313      	str	r3, [r2, #48]	; 0x30
 80009a2:	4b15      	ldr	r3, [pc, #84]	; (80009f8 <MX_GPIO_Init+0x7c>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	f003 0301 	and.w	r3, r3, #1
 80009aa:	60bb      	str	r3, [r7, #8]
 80009ac:	68bb      	ldr	r3, [r7, #8]
__HAL_RCC_GPIOB_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	607b      	str	r3, [r7, #4]
 80009b2:	4a11      	ldr	r2, [pc, #68]	; (80009f8 <MX_GPIO_Init+0x7c>)
 80009b4:	4b10      	ldr	r3, [pc, #64]	; (80009f8 <MX_GPIO_Init+0x7c>)
 80009b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b8:	f043 0302 	orr.w	r3, r3, #2
 80009bc:	6313      	str	r3, [r2, #48]	; 0x30
 80009be:	4b0e      	ldr	r3, [pc, #56]	; (80009f8 <MX_GPIO_Init+0x7c>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	f003 0302 	and.w	r3, r3, #2
 80009c6:	607b      	str	r3, [r7, #4]
 80009c8:	687b      	ldr	r3, [r7, #4]

 /*Configure GPIO pin Output Level */
HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80009ca:	2200      	movs	r2, #0
 80009cc:	2140      	movs	r1, #64	; 0x40
 80009ce:	480b      	ldr	r0, [pc, #44]	; (80009fc <MX_GPIO_Init+0x80>)
 80009d0:	f000 fd58 	bl	8001484 <HAL_GPIO_WritePin>

 /*Configure GPIO pin : PB6 */
GPIO_InitStruct.Pin = GPIO_PIN_6;
 80009d4:	2340      	movs	r3, #64	; 0x40
 80009d6:	60fb      	str	r3, [r7, #12]
GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d8:	2301      	movs	r3, #1
 80009da:	613b      	str	r3, [r7, #16]
GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	2300      	movs	r3, #0
 80009de:	617b      	str	r3, [r7, #20]
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e0:	2300      	movs	r3, #0
 80009e2:	61bb      	str	r3, [r7, #24]
HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009e4:	f107 030c 	add.w	r3, r7, #12
 80009e8:	4619      	mov	r1, r3
 80009ea:	4804      	ldr	r0, [pc, #16]	; (80009fc <MX_GPIO_Init+0x80>)
 80009ec:	f000 fbc8 	bl	8001180 <HAL_GPIO_Init>

}
 80009f0:	bf00      	nop
 80009f2:	3720      	adds	r7, #32
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	40023800 	.word	0x40023800
 80009fc:	40020400 	.word	0x40020400

08000a00 <print_network_information>:

/* USER CODE BEGIN 4 */

void print_network_information(void)
{
 8000a00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a02:	b093      	sub	sp, #76	; 0x4c
 8000a04:	af04      	add	r7, sp, #16
uint8_t buff[50];
wizchip_getnetinfo(&gWIZNETINFO);
 8000a06:	4838      	ldr	r0, [pc, #224]	; (8000ae8 <print_network_information+0xe8>)
 8000a08:	f003 fc60 	bl	80042cc <wizchip_getnetinfo>
sprintf(buff,"Mac address: %02x:%02x:%02x:%02x:%02x:%02x\n\r",gWIZNETINFO.mac[0],gWIZNETINFO.mac[1],gWIZNETINFO.mac[2],gWIZNETINFO.mac[3],gWIZNETINFO.mac[4],gWIZNETINFO.mac[5]);
 8000a0c:	4b36      	ldr	r3, [pc, #216]	; (8000ae8 <print_network_information+0xe8>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	461d      	mov	r5, r3
 8000a12:	4b35      	ldr	r3, [pc, #212]	; (8000ae8 <print_network_information+0xe8>)
 8000a14:	785b      	ldrb	r3, [r3, #1]
 8000a16:	461e      	mov	r6, r3
 8000a18:	4b33      	ldr	r3, [pc, #204]	; (8000ae8 <print_network_information+0xe8>)
 8000a1a:	789b      	ldrb	r3, [r3, #2]
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	4b32      	ldr	r3, [pc, #200]	; (8000ae8 <print_network_information+0xe8>)
 8000a20:	78db      	ldrb	r3, [r3, #3]
 8000a22:	4619      	mov	r1, r3
 8000a24:	4b30      	ldr	r3, [pc, #192]	; (8000ae8 <print_network_information+0xe8>)
 8000a26:	791b      	ldrb	r3, [r3, #4]
 8000a28:	461c      	mov	r4, r3
 8000a2a:	4b2f      	ldr	r3, [pc, #188]	; (8000ae8 <print_network_information+0xe8>)
 8000a2c:	795b      	ldrb	r3, [r3, #5]
 8000a2e:	1d38      	adds	r0, r7, #4
 8000a30:	9303      	str	r3, [sp, #12]
 8000a32:	9402      	str	r4, [sp, #8]
 8000a34:	9101      	str	r1, [sp, #4]
 8000a36:	9200      	str	r2, [sp, #0]
 8000a38:	4633      	mov	r3, r6
 8000a3a:	462a      	mov	r2, r5
 8000a3c:	492b      	ldr	r1, [pc, #172]	; (8000aec <print_network_information+0xec>)
 8000a3e:	f003 fedb 	bl	80047f8 <siprintf>
HAL_UART_Transmit(&huart2, (uint8_t*)buff, 30, 10);
 8000a42:	1d39      	adds	r1, r7, #4
 8000a44:	230a      	movs	r3, #10
 8000a46:	221e      	movs	r2, #30
 8000a48:	4829      	ldr	r0, [pc, #164]	; (8000af0 <print_network_information+0xf0>)
 8000a4a:	f001 fc72 	bl	8002332 <HAL_UART_Transmit>
sprintf(buff,"IP address : %d.%d.%d.%d\n\r",gWIZNETINFO.ip[0],gWIZNETINFO.ip[1],gWIZNETINFO.ip[2],gWIZNETINFO.ip[3]);
 8000a4e:	4b26      	ldr	r3, [pc, #152]	; (8000ae8 <print_network_information+0xe8>)
 8000a50:	799b      	ldrb	r3, [r3, #6]
 8000a52:	4619      	mov	r1, r3
 8000a54:	4b24      	ldr	r3, [pc, #144]	; (8000ae8 <print_network_information+0xe8>)
 8000a56:	79db      	ldrb	r3, [r3, #7]
 8000a58:	461c      	mov	r4, r3
 8000a5a:	4b23      	ldr	r3, [pc, #140]	; (8000ae8 <print_network_information+0xe8>)
 8000a5c:	7a1b      	ldrb	r3, [r3, #8]
 8000a5e:	461a      	mov	r2, r3
 8000a60:	4b21      	ldr	r3, [pc, #132]	; (8000ae8 <print_network_information+0xe8>)
 8000a62:	7a5b      	ldrb	r3, [r3, #9]
 8000a64:	1d38      	adds	r0, r7, #4
 8000a66:	9301      	str	r3, [sp, #4]
 8000a68:	9200      	str	r2, [sp, #0]
 8000a6a:	4623      	mov	r3, r4
 8000a6c:	460a      	mov	r2, r1
 8000a6e:	4921      	ldr	r1, [pc, #132]	; (8000af4 <print_network_information+0xf4>)
 8000a70:	f003 fec2 	bl	80047f8 <siprintf>
HAL_UART_Transmit(&huart2, (uint8_t*)buff, 30, 10);
 8000a74:	1d39      	adds	r1, r7, #4
 8000a76:	230a      	movs	r3, #10
 8000a78:	221e      	movs	r2, #30
 8000a7a:	481d      	ldr	r0, [pc, #116]	; (8000af0 <print_network_information+0xf0>)
 8000a7c:	f001 fc59 	bl	8002332 <HAL_UART_Transmit>
printf("SN Mask : %d.%d.%d.%d\n\r",gWIZNETINFO.sn[0],gWIZNETINFO.sn[1],gWIZNETINFO.sn[2],gWIZNETINFO.sn[3]);
 8000a80:	4b19      	ldr	r3, [pc, #100]	; (8000ae8 <print_network_information+0xe8>)
 8000a82:	7a9b      	ldrb	r3, [r3, #10]
 8000a84:	4619      	mov	r1, r3
 8000a86:	4b18      	ldr	r3, [pc, #96]	; (8000ae8 <print_network_information+0xe8>)
 8000a88:	7adb      	ldrb	r3, [r3, #11]
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	4b16      	ldr	r3, [pc, #88]	; (8000ae8 <print_network_information+0xe8>)
 8000a8e:	7b1b      	ldrb	r3, [r3, #12]
 8000a90:	4618      	mov	r0, r3
 8000a92:	4b15      	ldr	r3, [pc, #84]	; (8000ae8 <print_network_information+0xe8>)
 8000a94:	7b5b      	ldrb	r3, [r3, #13]
 8000a96:	9300      	str	r3, [sp, #0]
 8000a98:	4603      	mov	r3, r0
 8000a9a:	4817      	ldr	r0, [pc, #92]	; (8000af8 <print_network_information+0xf8>)
 8000a9c:	f003 fd72 	bl	8004584 <iprintf>
printf("Gate way : %d.%d.%d.%d\n\r",gWIZNETINFO.gw[0],gWIZNETINFO.gw[1],gWIZNETINFO.gw[2],gWIZNETINFO.gw[3]);
 8000aa0:	4b11      	ldr	r3, [pc, #68]	; (8000ae8 <print_network_information+0xe8>)
 8000aa2:	7b9b      	ldrb	r3, [r3, #14]
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4b10      	ldr	r3, [pc, #64]	; (8000ae8 <print_network_information+0xe8>)
 8000aa8:	7bdb      	ldrb	r3, [r3, #15]
 8000aaa:	461a      	mov	r2, r3
 8000aac:	4b0e      	ldr	r3, [pc, #56]	; (8000ae8 <print_network_information+0xe8>)
 8000aae:	7c1b      	ldrb	r3, [r3, #16]
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	4b0d      	ldr	r3, [pc, #52]	; (8000ae8 <print_network_information+0xe8>)
 8000ab4:	7c5b      	ldrb	r3, [r3, #17]
 8000ab6:	9300      	str	r3, [sp, #0]
 8000ab8:	4603      	mov	r3, r0
 8000aba:	4810      	ldr	r0, [pc, #64]	; (8000afc <print_network_information+0xfc>)
 8000abc:	f003 fd62 	bl	8004584 <iprintf>
printf("DNS Server : %d.%d.%d.%d\n\r",gWIZNETINFO.dns[0],gWIZNETINFO.dns[1],gWIZNETINFO.dns[2],gWIZNETINFO.dns[3]);
 8000ac0:	4b09      	ldr	r3, [pc, #36]	; (8000ae8 <print_network_information+0xe8>)
 8000ac2:	7c9b      	ldrb	r3, [r3, #18]
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4b08      	ldr	r3, [pc, #32]	; (8000ae8 <print_network_information+0xe8>)
 8000ac8:	7cdb      	ldrb	r3, [r3, #19]
 8000aca:	461a      	mov	r2, r3
 8000acc:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <print_network_information+0xe8>)
 8000ace:	7d1b      	ldrb	r3, [r3, #20]
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	4b05      	ldr	r3, [pc, #20]	; (8000ae8 <print_network_information+0xe8>)
 8000ad4:	7d5b      	ldrb	r3, [r3, #21]
 8000ad6:	9300      	str	r3, [sp, #0]
 8000ad8:	4603      	mov	r3, r0
 8000ada:	4809      	ldr	r0, [pc, #36]	; (8000b00 <print_network_information+0x100>)
 8000adc:	f003 fd52 	bl	8004584 <iprintf>

}
 8000ae0:	bf00      	nop
 8000ae2:	373c      	adds	r7, #60	; 0x3c
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ae8:	20000000 	.word	0x20000000
 8000aec:	08005920 	.word	0x08005920
 8000af0:	200009dc 	.word	0x200009dc
 8000af4:	08005950 	.word	0x08005950
 8000af8:	0800596c 	.word	0x0800596c
 8000afc:	08005984 	.word	0x08005984
 8000b00:	080059a0 	.word	0x080059a0

08000b04 <Error_Handler>:
/**
* @brief This function is executed in case of error occurrence.
* @retval None
*/
void Error_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Error_Handler_Debug */
/* User can add his own implementation to report the HAL error return state */

 /* USER CODE END Error_Handler_Debug */
}
 8000b08:	bf00      	nop
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
	...

08000b14 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8000b1c:	4a07      	ldr	r2, [pc, #28]	; (8000b3c <RetargetInit+0x28>)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8000b22:	4b07      	ldr	r3, [pc, #28]	; (8000b40 <RetargetInit+0x2c>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	6898      	ldr	r0, [r3, #8]
 8000b28:	2300      	movs	r3, #0
 8000b2a:	2202      	movs	r2, #2
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	f003 fdb5 	bl	800469c <setvbuf>
}
 8000b32:	bf00      	nop
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	20000a1c 	.word	0x20000a1c
 8000b40:	20000050 	.word	0x20000050

08000b44 <_isatty>:

int _isatty(int fd) {
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	db04      	blt.n	8000b5c <_isatty+0x18>
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	2b02      	cmp	r3, #2
 8000b56:	dc01      	bgt.n	8000b5c <_isatty+0x18>
    return 1;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	e005      	b.n	8000b68 <_isatty+0x24>

  errno = EBADF;
 8000b5c:	f003 fc20 	bl	80043a0 <__errno>
 8000b60:	4602      	mov	r2, r0
 8000b62:	2309      	movs	r3, #9
 8000b64:	6013      	str	r3, [r2, #0]
  return 0;
 8000b66:	2300      	movs	r3, #0
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	3708      	adds	r7, #8
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}

08000b70 <_write>:

int _write(int fd, char* ptr, int len) {
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b086      	sub	sp, #24
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	60f8      	str	r0, [r7, #12]
 8000b78:	60b9      	str	r1, [r7, #8]
 8000b7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	2b01      	cmp	r3, #1
 8000b80:	d002      	beq.n	8000b88 <_write+0x18>
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	2b02      	cmp	r3, #2
 8000b86:	d111      	bne.n	8000bac <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000b88:	4b0e      	ldr	r3, [pc, #56]	; (8000bc4 <_write+0x54>)
 8000b8a:	6818      	ldr	r0, [r3, #0]
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	b29a      	uxth	r2, r3
 8000b90:	f04f 33ff 	mov.w	r3, #4294967295
 8000b94:	68b9      	ldr	r1, [r7, #8]
 8000b96:	f001 fbcc 	bl	8002332 <HAL_UART_Transmit>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000b9e:	7dfb      	ldrb	r3, [r7, #23]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d101      	bne.n	8000ba8 <_write+0x38>
      return len;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	e008      	b.n	8000bba <_write+0x4a>
    else
      return EIO;
 8000ba8:	2305      	movs	r3, #5
 8000baa:	e006      	b.n	8000bba <_write+0x4a>
  }
  errno = EBADF;
 8000bac:	f003 fbf8 	bl	80043a0 <__errno>
 8000bb0:	4602      	mov	r2, r0
 8000bb2:	2309      	movs	r3, #9
 8000bb4:	6013      	str	r3, [r2, #0]
  return -1;
 8000bb6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3718      	adds	r7, #24
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	20000a1c 	.word	0x20000a1c

08000bc8 <_close>:

int _close(int fd) {
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	db04      	blt.n	8000be0 <_close+0x18>
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	2b02      	cmp	r3, #2
 8000bda:	dc01      	bgt.n	8000be0 <_close+0x18>
    return 0;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	e006      	b.n	8000bee <_close+0x26>

  errno = EBADF;
 8000be0:	f003 fbde 	bl	80043a0 <__errno>
 8000be4:	4602      	mov	r2, r0
 8000be6:	2309      	movs	r3, #9
 8000be8:	6013      	str	r3, [r2, #0]
  return -1;
 8000bea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}

08000bf6 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	b084      	sub	sp, #16
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	60f8      	str	r0, [r7, #12]
 8000bfe:	60b9      	str	r1, [r7, #8]
 8000c00:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8000c02:	f003 fbcd 	bl	80043a0 <__errno>
 8000c06:	4602      	mov	r2, r0
 8000c08:	2309      	movs	r3, #9
 8000c0a:	6013      	str	r3, [r2, #0]
  return -1;
 8000c0c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	3710      	adds	r7, #16
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}

08000c18 <_read>:

int _read(int fd, char* ptr, int len) {
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b086      	sub	sp, #24
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	60f8      	str	r0, [r7, #12]
 8000c20:	60b9      	str	r1, [r7, #8]
 8000c22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d110      	bne.n	8000c4c <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8000c2a:	4b0e      	ldr	r3, [pc, #56]	; (8000c64 <_read+0x4c>)
 8000c2c:	6818      	ldr	r0, [r3, #0]
 8000c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c32:	2201      	movs	r2, #1
 8000c34:	68b9      	ldr	r1, [r7, #8]
 8000c36:	f001 fc14 	bl	8002462 <HAL_UART_Receive>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000c3e:	7dfb      	ldrb	r3, [r7, #23]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d101      	bne.n	8000c48 <_read+0x30>
      return 1;
 8000c44:	2301      	movs	r3, #1
 8000c46:	e008      	b.n	8000c5a <_read+0x42>
    else
      return EIO;
 8000c48:	2305      	movs	r3, #5
 8000c4a:	e006      	b.n	8000c5a <_read+0x42>
  }
  errno = EBADF;
 8000c4c:	f003 fba8 	bl	80043a0 <__errno>
 8000c50:	4602      	mov	r2, r0
 8000c52:	2309      	movs	r3, #9
 8000c54:	6013      	str	r3, [r2, #0]
  return -1;
 8000c56:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3718      	adds	r7, #24
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	20000a1c 	.word	0x20000a1c

08000c68 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	db08      	blt.n	8000c8a <_fstat+0x22>
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2b02      	cmp	r3, #2
 8000c7c:	dc05      	bgt.n	8000c8a <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c84:	605a      	str	r2, [r3, #4]
    return 0;
 8000c86:	2300      	movs	r3, #0
 8000c88:	e005      	b.n	8000c96 <_fstat+0x2e>
  }

  errno = EBADF;
 8000c8a:	f003 fb89 	bl	80043a0 <__errno>
 8000c8e:	4602      	mov	r2, r0
 8000c90:	2309      	movs	r3, #9
 8000c92:	6013      	str	r3, [r2, #0]
  return 0;
 8000c94:	2300      	movs	r3, #0
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
	...

08000ca0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	607b      	str	r3, [r7, #4]
 8000caa:	4a10      	ldr	r2, [pc, #64]	; (8000cec <HAL_MspInit+0x4c>)
 8000cac:	4b0f      	ldr	r3, [pc, #60]	; (8000cec <HAL_MspInit+0x4c>)
 8000cae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cb4:	6453      	str	r3, [r2, #68]	; 0x44
 8000cb6:	4b0d      	ldr	r3, [pc, #52]	; (8000cec <HAL_MspInit+0x4c>)
 8000cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cbe:	607b      	str	r3, [r7, #4]
 8000cc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	603b      	str	r3, [r7, #0]
 8000cc6:	4a09      	ldr	r2, [pc, #36]	; (8000cec <HAL_MspInit+0x4c>)
 8000cc8:	4b08      	ldr	r3, [pc, #32]	; (8000cec <HAL_MspInit+0x4c>)
 8000cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ccc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cd0:	6413      	str	r3, [r2, #64]	; 0x40
 8000cd2:	4b06      	ldr	r3, [pc, #24]	; (8000cec <HAL_MspInit+0x4c>)
 8000cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cda:	603b      	str	r3, [r7, #0]
 8000cdc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	370c      	adds	r7, #12
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	40023800 	.word	0x40023800

08000cf0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b08a      	sub	sp, #40	; 0x28
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf8:	f107 0314 	add.w	r3, r7, #20
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	605a      	str	r2, [r3, #4]
 8000d02:	609a      	str	r2, [r3, #8]
 8000d04:	60da      	str	r2, [r3, #12]
 8000d06:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a19      	ldr	r2, [pc, #100]	; (8000d74 <HAL_SPI_MspInit+0x84>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d12b      	bne.n	8000d6a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d12:	2300      	movs	r3, #0
 8000d14:	613b      	str	r3, [r7, #16]
 8000d16:	4a18      	ldr	r2, [pc, #96]	; (8000d78 <HAL_SPI_MspInit+0x88>)
 8000d18:	4b17      	ldr	r3, [pc, #92]	; (8000d78 <HAL_SPI_MspInit+0x88>)
 8000d1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d1c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d20:	6453      	str	r3, [r2, #68]	; 0x44
 8000d22:	4b15      	ldr	r3, [pc, #84]	; (8000d78 <HAL_SPI_MspInit+0x88>)
 8000d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d2a:	613b      	str	r3, [r7, #16]
 8000d2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d2e:	2300      	movs	r3, #0
 8000d30:	60fb      	str	r3, [r7, #12]
 8000d32:	4a11      	ldr	r2, [pc, #68]	; (8000d78 <HAL_SPI_MspInit+0x88>)
 8000d34:	4b10      	ldr	r3, [pc, #64]	; (8000d78 <HAL_SPI_MspInit+0x88>)
 8000d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d38:	f043 0301 	orr.w	r3, r3, #1
 8000d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3e:	4b0e      	ldr	r3, [pc, #56]	; (8000d78 <HAL_SPI_MspInit+0x88>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	f003 0301 	and.w	r3, r3, #1
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000d4a:	23e0      	movs	r3, #224	; 0xe0
 8000d4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4e:	2302      	movs	r3, #2
 8000d50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d52:	2300      	movs	r3, #0
 8000d54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d56:	2303      	movs	r3, #3
 8000d58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d5a:	2305      	movs	r3, #5
 8000d5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d5e:	f107 0314 	add.w	r3, r7, #20
 8000d62:	4619      	mov	r1, r3
 8000d64:	4805      	ldr	r0, [pc, #20]	; (8000d7c <HAL_SPI_MspInit+0x8c>)
 8000d66:	f000 fa0b 	bl	8001180 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d6a:	bf00      	nop
 8000d6c:	3728      	adds	r7, #40	; 0x28
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	40013000 	.word	0x40013000
 8000d78:	40023800 	.word	0x40023800
 8000d7c:	40020000 	.word	0x40020000

08000d80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b08a      	sub	sp, #40	; 0x28
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d88:	f107 0314 	add.w	r3, r7, #20
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	605a      	str	r2, [r3, #4]
 8000d92:	609a      	str	r2, [r3, #8]
 8000d94:	60da      	str	r2, [r3, #12]
 8000d96:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a19      	ldr	r2, [pc, #100]	; (8000e04 <HAL_UART_MspInit+0x84>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d12b      	bne.n	8000dfa <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000da2:	2300      	movs	r3, #0
 8000da4:	613b      	str	r3, [r7, #16]
 8000da6:	4a18      	ldr	r2, [pc, #96]	; (8000e08 <HAL_UART_MspInit+0x88>)
 8000da8:	4b17      	ldr	r3, [pc, #92]	; (8000e08 <HAL_UART_MspInit+0x88>)
 8000daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000db0:	6413      	str	r3, [r2, #64]	; 0x40
 8000db2:	4b15      	ldr	r3, [pc, #84]	; (8000e08 <HAL_UART_MspInit+0x88>)
 8000db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dba:	613b      	str	r3, [r7, #16]
 8000dbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	60fb      	str	r3, [r7, #12]
 8000dc2:	4a11      	ldr	r2, [pc, #68]	; (8000e08 <HAL_UART_MspInit+0x88>)
 8000dc4:	4b10      	ldr	r3, [pc, #64]	; (8000e08 <HAL_UART_MspInit+0x88>)
 8000dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc8:	f043 0301 	orr.w	r3, r3, #1
 8000dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dce:	4b0e      	ldr	r3, [pc, #56]	; (8000e08 <HAL_UART_MspInit+0x88>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	f003 0301 	and.w	r3, r3, #1
 8000dd6:	60fb      	str	r3, [r7, #12]
 8000dd8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000dda:	230c      	movs	r3, #12
 8000ddc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dde:	2302      	movs	r3, #2
 8000de0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de2:	2300      	movs	r3, #0
 8000de4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de6:	2303      	movs	r3, #3
 8000de8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dea:	2307      	movs	r3, #7
 8000dec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dee:	f107 0314 	add.w	r3, r7, #20
 8000df2:	4619      	mov	r1, r3
 8000df4:	4805      	ldr	r0, [pc, #20]	; (8000e0c <HAL_UART_MspInit+0x8c>)
 8000df6:	f000 f9c3 	bl	8001180 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000dfa:	bf00      	nop
 8000dfc:	3728      	adds	r7, #40	; 0x28
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	40004400 	.word	0x40004400
 8000e08:	40023800 	.word	0x40023800
 8000e0c:	40020000 	.word	0x40020000

08000e10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e14:	e7fe      	b.n	8000e14 <NMI_Handler+0x4>

08000e16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e16:	b480      	push	{r7}
 8000e18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e1a:	e7fe      	b.n	8000e1a <HardFault_Handler+0x4>

08000e1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e20:	e7fe      	b.n	8000e20 <MemManage_Handler+0x4>

08000e22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e22:	b480      	push	{r7}
 8000e24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e26:	e7fe      	b.n	8000e26 <BusFault_Handler+0x4>

08000e28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e2c:	e7fe      	b.n	8000e2c <UsageFault_Handler+0x4>

08000e2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e32:	bf00      	nop
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr

08000e3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e40:	bf00      	nop
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr

08000e4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr

08000e58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e5c:	f000 f86a 	bl	8000f34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e60:	bf00      	nop
 8000e62:	bd80      	pop	{r7, pc}

08000e64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e68:	4a08      	ldr	r2, [pc, #32]	; (8000e8c <SystemInit+0x28>)
 8000e6a:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <SystemInit+0x28>)
 8000e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e78:	4b04      	ldr	r3, [pc, #16]	; (8000e8c <SystemInit+0x28>)
 8000e7a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e7e:	609a      	str	r2, [r3, #8]
#endif
}
 8000e80:	bf00      	nop
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	e000ed00 	.word	0xe000ed00

08000e90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e94:	4a0e      	ldr	r2, [pc, #56]	; (8000ed0 <HAL_Init+0x40>)
 8000e96:	4b0e      	ldr	r3, [pc, #56]	; (8000ed0 <HAL_Init+0x40>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ea0:	4a0b      	ldr	r2, [pc, #44]	; (8000ed0 <HAL_Init+0x40>)
 8000ea2:	4b0b      	ldr	r3, [pc, #44]	; (8000ed0 <HAL_Init+0x40>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000eaa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eac:	4a08      	ldr	r2, [pc, #32]	; (8000ed0 <HAL_Init+0x40>)
 8000eae:	4b08      	ldr	r3, [pc, #32]	; (8000ed0 <HAL_Init+0x40>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eb8:	2003      	movs	r0, #3
 8000eba:	f000 f92d 	bl	8001118 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ebe:	2000      	movs	r0, #0
 8000ec0:	f000 f808 	bl	8000ed4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ec4:	f7ff feec 	bl	8000ca0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ec8:	2300      	movs	r3, #0
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	40023c00 	.word	0x40023c00

08000ed4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000edc:	4b12      	ldr	r3, [pc, #72]	; (8000f28 <HAL_InitTick+0x54>)
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	4b12      	ldr	r3, [pc, #72]	; (8000f2c <HAL_InitTick+0x58>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f000 f937 	bl	8001166 <HAL_SYSTICK_Config>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000efe:	2301      	movs	r3, #1
 8000f00:	e00e      	b.n	8000f20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2b0f      	cmp	r3, #15
 8000f06:	d80a      	bhi.n	8000f1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f08:	2200      	movs	r2, #0
 8000f0a:	6879      	ldr	r1, [r7, #4]
 8000f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f10:	f000 f90d 	bl	800112e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f14:	4a06      	ldr	r2, [pc, #24]	; (8000f30 <HAL_InitTick+0x5c>)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	e000      	b.n	8000f20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f1e:	2301      	movs	r3, #1
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3708      	adds	r7, #8
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	20000018 	.word	0x20000018
 8000f2c:	20000020 	.word	0x20000020
 8000f30:	2000001c 	.word	0x2000001c

08000f34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f38:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <HAL_IncTick+0x20>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <HAL_IncTick+0x24>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4413      	add	r3, r2
 8000f44:	4a04      	ldr	r2, [pc, #16]	; (8000f58 <HAL_IncTick+0x24>)
 8000f46:	6013      	str	r3, [r2, #0]
}
 8000f48:	bf00      	nop
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	20000020 	.word	0x20000020
 8000f58:	20000a20 	.word	0x20000a20

08000f5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f60:	4b03      	ldr	r3, [pc, #12]	; (8000f70 <HAL_GetTick+0x14>)
 8000f62:	681b      	ldr	r3, [r3, #0]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	20000a20 	.word	0x20000a20

08000f74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f7c:	f7ff ffee 	bl	8000f5c <HAL_GetTick>
 8000f80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f8c:	d005      	beq.n	8000f9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f8e:	4b09      	ldr	r3, [pc, #36]	; (8000fb4 <HAL_Delay+0x40>)
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	461a      	mov	r2, r3
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	4413      	add	r3, r2
 8000f98:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f9a:	bf00      	nop
 8000f9c:	f7ff ffde 	bl	8000f5c <HAL_GetTick>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	68bb      	ldr	r3, [r7, #8]
 8000fa4:	1ad2      	subs	r2, r2, r3
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	d3f7      	bcc.n	8000f9c <HAL_Delay+0x28>
  {
  }
}
 8000fac:	bf00      	nop
 8000fae:	3710      	adds	r7, #16
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	20000020 	.word	0x20000020

08000fb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b085      	sub	sp, #20
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	f003 0307 	and.w	r3, r3, #7
 8000fc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fc8:	4b0c      	ldr	r3, [pc, #48]	; (8000ffc <__NVIC_SetPriorityGrouping+0x44>)
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fce:	68ba      	ldr	r2, [r7, #8]
 8000fd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fe0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fe4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fe8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fea:	4a04      	ldr	r2, [pc, #16]	; (8000ffc <__NVIC_SetPriorityGrouping+0x44>)
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	60d3      	str	r3, [r2, #12]
}
 8000ff0:	bf00      	nop
 8000ff2:	3714      	adds	r7, #20
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr
 8000ffc:	e000ed00 	.word	0xe000ed00

08001000 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001004:	4b04      	ldr	r3, [pc, #16]	; (8001018 <__NVIC_GetPriorityGrouping+0x18>)
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	0a1b      	lsrs	r3, r3, #8
 800100a:	f003 0307 	and.w	r3, r3, #7
}
 800100e:	4618      	mov	r0, r3
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr
 8001018:	e000ed00 	.word	0xe000ed00

0800101c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	6039      	str	r1, [r7, #0]
 8001026:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001028:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102c:	2b00      	cmp	r3, #0
 800102e:	db0a      	blt.n	8001046 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001030:	490d      	ldr	r1, [pc, #52]	; (8001068 <__NVIC_SetPriority+0x4c>)
 8001032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001036:	683a      	ldr	r2, [r7, #0]
 8001038:	b2d2      	uxtb	r2, r2
 800103a:	0112      	lsls	r2, r2, #4
 800103c:	b2d2      	uxtb	r2, r2
 800103e:	440b      	add	r3, r1
 8001040:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001044:	e00a      	b.n	800105c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001046:	4909      	ldr	r1, [pc, #36]	; (800106c <__NVIC_SetPriority+0x50>)
 8001048:	79fb      	ldrb	r3, [r7, #7]
 800104a:	f003 030f 	and.w	r3, r3, #15
 800104e:	3b04      	subs	r3, #4
 8001050:	683a      	ldr	r2, [r7, #0]
 8001052:	b2d2      	uxtb	r2, r2
 8001054:	0112      	lsls	r2, r2, #4
 8001056:	b2d2      	uxtb	r2, r2
 8001058:	440b      	add	r3, r1
 800105a:	761a      	strb	r2, [r3, #24]
}
 800105c:	bf00      	nop
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr
 8001068:	e000e100 	.word	0xe000e100
 800106c:	e000ed00 	.word	0xe000ed00

08001070 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001070:	b480      	push	{r7}
 8001072:	b089      	sub	sp, #36	; 0x24
 8001074:	af00      	add	r7, sp, #0
 8001076:	60f8      	str	r0, [r7, #12]
 8001078:	60b9      	str	r1, [r7, #8]
 800107a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	f003 0307 	and.w	r3, r3, #7
 8001082:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	f1c3 0307 	rsb	r3, r3, #7
 800108a:	2b04      	cmp	r3, #4
 800108c:	bf28      	it	cs
 800108e:	2304      	movcs	r3, #4
 8001090:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	3304      	adds	r3, #4
 8001096:	2b06      	cmp	r3, #6
 8001098:	d902      	bls.n	80010a0 <NVIC_EncodePriority+0x30>
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	3b03      	subs	r3, #3
 800109e:	e000      	b.n	80010a2 <NVIC_EncodePriority+0x32>
 80010a0:	2300      	movs	r3, #0
 80010a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a4:	2201      	movs	r2, #1
 80010a6:	69bb      	ldr	r3, [r7, #24]
 80010a8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ac:	1e5a      	subs	r2, r3, #1
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	401a      	ands	r2, r3
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010b6:	2101      	movs	r1, #1
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	fa01 f303 	lsl.w	r3, r1, r3
 80010be:	1e59      	subs	r1, r3, #1
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c4:	4313      	orrs	r3, r2
         );
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3724      	adds	r7, #36	; 0x24
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
	...

080010d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	3b01      	subs	r3, #1
 80010e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010e4:	d301      	bcc.n	80010ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010e6:	2301      	movs	r3, #1
 80010e8:	e00f      	b.n	800110a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ea:	4a0a      	ldr	r2, [pc, #40]	; (8001114 <SysTick_Config+0x40>)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	3b01      	subs	r3, #1
 80010f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010f2:	210f      	movs	r1, #15
 80010f4:	f04f 30ff 	mov.w	r0, #4294967295
 80010f8:	f7ff ff90 	bl	800101c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010fc:	4b05      	ldr	r3, [pc, #20]	; (8001114 <SysTick_Config+0x40>)
 80010fe:	2200      	movs	r2, #0
 8001100:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001102:	4b04      	ldr	r3, [pc, #16]	; (8001114 <SysTick_Config+0x40>)
 8001104:	2207      	movs	r2, #7
 8001106:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001108:	2300      	movs	r3, #0
}
 800110a:	4618      	mov	r0, r3
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	e000e010 	.word	0xe000e010

08001118 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f7ff ff49 	bl	8000fb8 <__NVIC_SetPriorityGrouping>
}
 8001126:	bf00      	nop
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}

0800112e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800112e:	b580      	push	{r7, lr}
 8001130:	b086      	sub	sp, #24
 8001132:	af00      	add	r7, sp, #0
 8001134:	4603      	mov	r3, r0
 8001136:	60b9      	str	r1, [r7, #8]
 8001138:	607a      	str	r2, [r7, #4]
 800113a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800113c:	2300      	movs	r3, #0
 800113e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001140:	f7ff ff5e 	bl	8001000 <__NVIC_GetPriorityGrouping>
 8001144:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001146:	687a      	ldr	r2, [r7, #4]
 8001148:	68b9      	ldr	r1, [r7, #8]
 800114a:	6978      	ldr	r0, [r7, #20]
 800114c:	f7ff ff90 	bl	8001070 <NVIC_EncodePriority>
 8001150:	4602      	mov	r2, r0
 8001152:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001156:	4611      	mov	r1, r2
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff ff5f 	bl	800101c <__NVIC_SetPriority>
}
 800115e:	bf00      	nop
 8001160:	3718      	adds	r7, #24
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}

08001166 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001166:	b580      	push	{r7, lr}
 8001168:	b082      	sub	sp, #8
 800116a:	af00      	add	r7, sp, #0
 800116c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f7ff ffb0 	bl	80010d4 <SysTick_Config>
 8001174:	4603      	mov	r3, r0
}
 8001176:	4618      	mov	r0, r3
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
	...

08001180 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001180:	b480      	push	{r7}
 8001182:	b089      	sub	sp, #36	; 0x24
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800118a:	2300      	movs	r3, #0
 800118c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800118e:	2300      	movs	r3, #0
 8001190:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001192:	2300      	movs	r3, #0
 8001194:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001196:	2300      	movs	r3, #0
 8001198:	61fb      	str	r3, [r7, #28]
 800119a:	e159      	b.n	8001450 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800119c:	2201      	movs	r2, #1
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	fa02 f303 	lsl.w	r3, r2, r3
 80011a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	4013      	ands	r3, r2
 80011ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011b0:	693a      	ldr	r2, [r7, #16]
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	f040 8148 	bne.w	800144a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d00b      	beq.n	80011da <HAL_GPIO_Init+0x5a>
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	2b02      	cmp	r3, #2
 80011c8:	d007      	beq.n	80011da <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011ce:	2b11      	cmp	r3, #17
 80011d0:	d003      	beq.n	80011da <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	2b12      	cmp	r3, #18
 80011d8:	d130      	bne.n	800123c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	689b      	ldr	r3, [r3, #8]
 80011de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	005b      	lsls	r3, r3, #1
 80011e4:	2203      	movs	r2, #3
 80011e6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ea:	43db      	mvns	r3, r3
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	4013      	ands	r3, r2
 80011f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	68da      	ldr	r2, [r3, #12]
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	4313      	orrs	r3, r2
 8001202:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	69ba      	ldr	r2, [r7, #24]
 8001208:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001210:	2201      	movs	r2, #1
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	43db      	mvns	r3, r3
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	4013      	ands	r3, r2
 800121e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	091b      	lsrs	r3, r3, #4
 8001226:	f003 0201 	and.w	r2, r3, #1
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	4313      	orrs	r3, r2
 8001234:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	2203      	movs	r2, #3
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	43db      	mvns	r3, r3
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	4013      	ands	r3, r2
 8001252:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	689a      	ldr	r2, [r3, #8]
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	005b      	lsls	r3, r3, #1
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	69ba      	ldr	r2, [r7, #24]
 8001262:	4313      	orrs	r3, r2
 8001264:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	2b02      	cmp	r3, #2
 8001272:	d003      	beq.n	800127c <HAL_GPIO_Init+0xfc>
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	2b12      	cmp	r3, #18
 800127a:	d123      	bne.n	80012c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	08da      	lsrs	r2, r3, #3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	3208      	adds	r2, #8
 8001284:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001288:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	f003 0307 	and.w	r3, r3, #7
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	220f      	movs	r2, #15
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	43db      	mvns	r3, r3
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	4013      	ands	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	691a      	ldr	r2, [r3, #16]
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	f003 0307 	and.w	r3, r3, #7
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	4313      	orrs	r3, r2
 80012b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	08da      	lsrs	r2, r3, #3
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	3208      	adds	r2, #8
 80012be:	69b9      	ldr	r1, [r7, #24]
 80012c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	2203      	movs	r2, #3
 80012d0:	fa02 f303 	lsl.w	r3, r2, r3
 80012d4:	43db      	mvns	r3, r3
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	4013      	ands	r3, r2
 80012da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f003 0203 	and.w	r2, r3, #3
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	005b      	lsls	r3, r3, #1
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001300:	2b00      	cmp	r3, #0
 8001302:	f000 80a2 	beq.w	800144a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001306:	2300      	movs	r3, #0
 8001308:	60fb      	str	r3, [r7, #12]
 800130a:	4a56      	ldr	r2, [pc, #344]	; (8001464 <HAL_GPIO_Init+0x2e4>)
 800130c:	4b55      	ldr	r3, [pc, #340]	; (8001464 <HAL_GPIO_Init+0x2e4>)
 800130e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001310:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001314:	6453      	str	r3, [r2, #68]	; 0x44
 8001316:	4b53      	ldr	r3, [pc, #332]	; (8001464 <HAL_GPIO_Init+0x2e4>)
 8001318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800131e:	60fb      	str	r3, [r7, #12]
 8001320:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001322:	4a51      	ldr	r2, [pc, #324]	; (8001468 <HAL_GPIO_Init+0x2e8>)
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	089b      	lsrs	r3, r3, #2
 8001328:	3302      	adds	r3, #2
 800132a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800132e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	f003 0303 	and.w	r3, r3, #3
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	220f      	movs	r2, #15
 800133a:	fa02 f303 	lsl.w	r3, r2, r3
 800133e:	43db      	mvns	r3, r3
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	4013      	ands	r3, r2
 8001344:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4a48      	ldr	r2, [pc, #288]	; (800146c <HAL_GPIO_Init+0x2ec>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d019      	beq.n	8001382 <HAL_GPIO_Init+0x202>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4a47      	ldr	r2, [pc, #284]	; (8001470 <HAL_GPIO_Init+0x2f0>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d013      	beq.n	800137e <HAL_GPIO_Init+0x1fe>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4a46      	ldr	r2, [pc, #280]	; (8001474 <HAL_GPIO_Init+0x2f4>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d00d      	beq.n	800137a <HAL_GPIO_Init+0x1fa>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a45      	ldr	r2, [pc, #276]	; (8001478 <HAL_GPIO_Init+0x2f8>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d007      	beq.n	8001376 <HAL_GPIO_Init+0x1f6>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a44      	ldr	r2, [pc, #272]	; (800147c <HAL_GPIO_Init+0x2fc>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d101      	bne.n	8001372 <HAL_GPIO_Init+0x1f2>
 800136e:	2304      	movs	r3, #4
 8001370:	e008      	b.n	8001384 <HAL_GPIO_Init+0x204>
 8001372:	2307      	movs	r3, #7
 8001374:	e006      	b.n	8001384 <HAL_GPIO_Init+0x204>
 8001376:	2303      	movs	r3, #3
 8001378:	e004      	b.n	8001384 <HAL_GPIO_Init+0x204>
 800137a:	2302      	movs	r3, #2
 800137c:	e002      	b.n	8001384 <HAL_GPIO_Init+0x204>
 800137e:	2301      	movs	r3, #1
 8001380:	e000      	b.n	8001384 <HAL_GPIO_Init+0x204>
 8001382:	2300      	movs	r3, #0
 8001384:	69fa      	ldr	r2, [r7, #28]
 8001386:	f002 0203 	and.w	r2, r2, #3
 800138a:	0092      	lsls	r2, r2, #2
 800138c:	4093      	lsls	r3, r2
 800138e:	69ba      	ldr	r2, [r7, #24]
 8001390:	4313      	orrs	r3, r2
 8001392:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001394:	4934      	ldr	r1, [pc, #208]	; (8001468 <HAL_GPIO_Init+0x2e8>)
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	089b      	lsrs	r3, r3, #2
 800139a:	3302      	adds	r3, #2
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013a2:	4b37      	ldr	r3, [pc, #220]	; (8001480 <HAL_GPIO_Init+0x300>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	43db      	mvns	r3, r3
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	4013      	ands	r3, r2
 80013b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d003      	beq.n	80013c6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80013be:	69ba      	ldr	r2, [r7, #24]
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	4313      	orrs	r3, r2
 80013c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013c6:	4a2e      	ldr	r2, [pc, #184]	; (8001480 <HAL_GPIO_Init+0x300>)
 80013c8:	69bb      	ldr	r3, [r7, #24]
 80013ca:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80013cc:	4b2c      	ldr	r3, [pc, #176]	; (8001480 <HAL_GPIO_Init+0x300>)
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	43db      	mvns	r3, r3
 80013d6:	69ba      	ldr	r2, [r7, #24]
 80013d8:	4013      	ands	r3, r2
 80013da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d003      	beq.n	80013f0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	4313      	orrs	r3, r2
 80013ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013f0:	4a23      	ldr	r2, [pc, #140]	; (8001480 <HAL_GPIO_Init+0x300>)
 80013f2:	69bb      	ldr	r3, [r7, #24]
 80013f4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013f6:	4b22      	ldr	r3, [pc, #136]	; (8001480 <HAL_GPIO_Init+0x300>)
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	43db      	mvns	r3, r3
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	4013      	ands	r3, r2
 8001404:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800140e:	2b00      	cmp	r3, #0
 8001410:	d003      	beq.n	800141a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001412:	69ba      	ldr	r2, [r7, #24]
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	4313      	orrs	r3, r2
 8001418:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800141a:	4a19      	ldr	r2, [pc, #100]	; (8001480 <HAL_GPIO_Init+0x300>)
 800141c:	69bb      	ldr	r3, [r7, #24]
 800141e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001420:	4b17      	ldr	r3, [pc, #92]	; (8001480 <HAL_GPIO_Init+0x300>)
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	43db      	mvns	r3, r3
 800142a:	69ba      	ldr	r2, [r7, #24]
 800142c:	4013      	ands	r3, r2
 800142e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001438:	2b00      	cmp	r3, #0
 800143a:	d003      	beq.n	8001444 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	4313      	orrs	r3, r2
 8001442:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001444:	4a0e      	ldr	r2, [pc, #56]	; (8001480 <HAL_GPIO_Init+0x300>)
 8001446:	69bb      	ldr	r3, [r7, #24]
 8001448:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	3301      	adds	r3, #1
 800144e:	61fb      	str	r3, [r7, #28]
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	2b0f      	cmp	r3, #15
 8001454:	f67f aea2 	bls.w	800119c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001458:	bf00      	nop
 800145a:	3724      	adds	r7, #36	; 0x24
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr
 8001464:	40023800 	.word	0x40023800
 8001468:	40013800 	.word	0x40013800
 800146c:	40020000 	.word	0x40020000
 8001470:	40020400 	.word	0x40020400
 8001474:	40020800 	.word	0x40020800
 8001478:	40020c00 	.word	0x40020c00
 800147c:	40021000 	.word	0x40021000
 8001480:	40013c00 	.word	0x40013c00

08001484 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	460b      	mov	r3, r1
 800148e:	807b      	strh	r3, [r7, #2]
 8001490:	4613      	mov	r3, r2
 8001492:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001494:	787b      	ldrb	r3, [r7, #1]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d003      	beq.n	80014a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800149a:	887a      	ldrh	r2, [r7, #2]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014a0:	e003      	b.n	80014aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014a2:	887b      	ldrh	r3, [r7, #2]
 80014a4:	041a      	lsls	r2, r3, #16
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	619a      	str	r2, [r3, #24]
}
 80014aa:	bf00      	nop
 80014ac:	370c      	adds	r7, #12
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
	...

080014b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b086      	sub	sp, #24
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d101      	bne.n	80014ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e25b      	b.n	8001982 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 0301 	and.w	r3, r3, #1
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d075      	beq.n	80015c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014d6:	4ba3      	ldr	r3, [pc, #652]	; (8001764 <HAL_RCC_OscConfig+0x2ac>)
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	f003 030c 	and.w	r3, r3, #12
 80014de:	2b04      	cmp	r3, #4
 80014e0:	d00c      	beq.n	80014fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014e2:	4ba0      	ldr	r3, [pc, #640]	; (8001764 <HAL_RCC_OscConfig+0x2ac>)
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014ea:	2b08      	cmp	r3, #8
 80014ec:	d112      	bne.n	8001514 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014ee:	4b9d      	ldr	r3, [pc, #628]	; (8001764 <HAL_RCC_OscConfig+0x2ac>)
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80014fa:	d10b      	bne.n	8001514 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014fc:	4b99      	ldr	r3, [pc, #612]	; (8001764 <HAL_RCC_OscConfig+0x2ac>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001504:	2b00      	cmp	r3, #0
 8001506:	d05b      	beq.n	80015c0 <HAL_RCC_OscConfig+0x108>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d157      	bne.n	80015c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	e236      	b.n	8001982 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800151c:	d106      	bne.n	800152c <HAL_RCC_OscConfig+0x74>
 800151e:	4a91      	ldr	r2, [pc, #580]	; (8001764 <HAL_RCC_OscConfig+0x2ac>)
 8001520:	4b90      	ldr	r3, [pc, #576]	; (8001764 <HAL_RCC_OscConfig+0x2ac>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001528:	6013      	str	r3, [r2, #0]
 800152a:	e01d      	b.n	8001568 <HAL_RCC_OscConfig+0xb0>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001534:	d10c      	bne.n	8001550 <HAL_RCC_OscConfig+0x98>
 8001536:	4a8b      	ldr	r2, [pc, #556]	; (8001764 <HAL_RCC_OscConfig+0x2ac>)
 8001538:	4b8a      	ldr	r3, [pc, #552]	; (8001764 <HAL_RCC_OscConfig+0x2ac>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001540:	6013      	str	r3, [r2, #0]
 8001542:	4a88      	ldr	r2, [pc, #544]	; (8001764 <HAL_RCC_OscConfig+0x2ac>)
 8001544:	4b87      	ldr	r3, [pc, #540]	; (8001764 <HAL_RCC_OscConfig+0x2ac>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800154c:	6013      	str	r3, [r2, #0]
 800154e:	e00b      	b.n	8001568 <HAL_RCC_OscConfig+0xb0>
 8001550:	4a84      	ldr	r2, [pc, #528]	; (8001764 <HAL_RCC_OscConfig+0x2ac>)
 8001552:	4b84      	ldr	r3, [pc, #528]	; (8001764 <HAL_RCC_OscConfig+0x2ac>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800155a:	6013      	str	r3, [r2, #0]
 800155c:	4a81      	ldr	r2, [pc, #516]	; (8001764 <HAL_RCC_OscConfig+0x2ac>)
 800155e:	4b81      	ldr	r3, [pc, #516]	; (8001764 <HAL_RCC_OscConfig+0x2ac>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001566:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d013      	beq.n	8001598 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001570:	f7ff fcf4 	bl	8000f5c <HAL_GetTick>
 8001574:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001576:	e008      	b.n	800158a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001578:	f7ff fcf0 	bl	8000f5c <HAL_GetTick>
 800157c:	4602      	mov	r2, r0
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	2b64      	cmp	r3, #100	; 0x64
 8001584:	d901      	bls.n	800158a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001586:	2303      	movs	r3, #3
 8001588:	e1fb      	b.n	8001982 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800158a:	4b76      	ldr	r3, [pc, #472]	; (8001764 <HAL_RCC_OscConfig+0x2ac>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001592:	2b00      	cmp	r3, #0
 8001594:	d0f0      	beq.n	8001578 <HAL_RCC_OscConfig+0xc0>
 8001596:	e014      	b.n	80015c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001598:	f7ff fce0 	bl	8000f5c <HAL_GetTick>
 800159c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800159e:	e008      	b.n	80015b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015a0:	f7ff fcdc 	bl	8000f5c <HAL_GetTick>
 80015a4:	4602      	mov	r2, r0
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	2b64      	cmp	r3, #100	; 0x64
 80015ac:	d901      	bls.n	80015b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015ae:	2303      	movs	r3, #3
 80015b0:	e1e7      	b.n	8001982 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015b2:	4b6c      	ldr	r3, [pc, #432]	; (8001764 <HAL_RCC_OscConfig+0x2ac>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d1f0      	bne.n	80015a0 <HAL_RCC_OscConfig+0xe8>
 80015be:	e000      	b.n	80015c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 0302 	and.w	r3, r3, #2
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d063      	beq.n	8001696 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015ce:	4b65      	ldr	r3, [pc, #404]	; (8001764 <HAL_RCC_OscConfig+0x2ac>)
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	f003 030c 	and.w	r3, r3, #12
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d00b      	beq.n	80015f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015da:	4b62      	ldr	r3, [pc, #392]	; (8001764 <HAL_RCC_OscConfig+0x2ac>)
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015e2:	2b08      	cmp	r3, #8
 80015e4:	d11c      	bne.n	8001620 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015e6:	4b5f      	ldr	r3, [pc, #380]	; (8001764 <HAL_RCC_OscConfig+0x2ac>)
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d116      	bne.n	8001620 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015f2:	4b5c      	ldr	r3, [pc, #368]	; (8001764 <HAL_RCC_OscConfig+0x2ac>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 0302 	and.w	r3, r3, #2
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d005      	beq.n	800160a <HAL_RCC_OscConfig+0x152>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	68db      	ldr	r3, [r3, #12]
 8001602:	2b01      	cmp	r3, #1
 8001604:	d001      	beq.n	800160a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e1bb      	b.n	8001982 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800160a:	4956      	ldr	r1, [pc, #344]	; (8001764 <HAL_RCC_OscConfig+0x2ac>)
 800160c:	4b55      	ldr	r3, [pc, #340]	; (8001764 <HAL_RCC_OscConfig+0x2ac>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	691b      	ldr	r3, [r3, #16]
 8001618:	00db      	lsls	r3, r3, #3
 800161a:	4313      	orrs	r3, r2
 800161c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800161e:	e03a      	b.n	8001696 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d020      	beq.n	800166a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001628:	4b4f      	ldr	r3, [pc, #316]	; (8001768 <HAL_RCC_OscConfig+0x2b0>)
 800162a:	2201      	movs	r2, #1
 800162c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800162e:	f7ff fc95 	bl	8000f5c <HAL_GetTick>
 8001632:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001634:	e008      	b.n	8001648 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001636:	f7ff fc91 	bl	8000f5c <HAL_GetTick>
 800163a:	4602      	mov	r2, r0
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	1ad3      	subs	r3, r2, r3
 8001640:	2b02      	cmp	r3, #2
 8001642:	d901      	bls.n	8001648 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001644:	2303      	movs	r3, #3
 8001646:	e19c      	b.n	8001982 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001648:	4b46      	ldr	r3, [pc, #280]	; (8001764 <HAL_RCC_OscConfig+0x2ac>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f003 0302 	and.w	r3, r3, #2
 8001650:	2b00      	cmp	r3, #0
 8001652:	d0f0      	beq.n	8001636 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001654:	4943      	ldr	r1, [pc, #268]	; (8001764 <HAL_RCC_OscConfig+0x2ac>)
 8001656:	4b43      	ldr	r3, [pc, #268]	; (8001764 <HAL_RCC_OscConfig+0x2ac>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	691b      	ldr	r3, [r3, #16]
 8001662:	00db      	lsls	r3, r3, #3
 8001664:	4313      	orrs	r3, r2
 8001666:	600b      	str	r3, [r1, #0]
 8001668:	e015      	b.n	8001696 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800166a:	4b3f      	ldr	r3, [pc, #252]	; (8001768 <HAL_RCC_OscConfig+0x2b0>)
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001670:	f7ff fc74 	bl	8000f5c <HAL_GetTick>
 8001674:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001676:	e008      	b.n	800168a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001678:	f7ff fc70 	bl	8000f5c <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	2b02      	cmp	r3, #2
 8001684:	d901      	bls.n	800168a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e17b      	b.n	8001982 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800168a:	4b36      	ldr	r3, [pc, #216]	; (8001764 <HAL_RCC_OscConfig+0x2ac>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 0302 	and.w	r3, r3, #2
 8001692:	2b00      	cmp	r3, #0
 8001694:	d1f0      	bne.n	8001678 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0308 	and.w	r3, r3, #8
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d030      	beq.n	8001704 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	695b      	ldr	r3, [r3, #20]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d016      	beq.n	80016d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016aa:	4b30      	ldr	r3, [pc, #192]	; (800176c <HAL_RCC_OscConfig+0x2b4>)
 80016ac:	2201      	movs	r2, #1
 80016ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016b0:	f7ff fc54 	bl	8000f5c <HAL_GetTick>
 80016b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016b6:	e008      	b.n	80016ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016b8:	f7ff fc50 	bl	8000f5c <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d901      	bls.n	80016ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80016c6:	2303      	movs	r3, #3
 80016c8:	e15b      	b.n	8001982 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016ca:	4b26      	ldr	r3, [pc, #152]	; (8001764 <HAL_RCC_OscConfig+0x2ac>)
 80016cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016ce:	f003 0302 	and.w	r3, r3, #2
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d0f0      	beq.n	80016b8 <HAL_RCC_OscConfig+0x200>
 80016d6:	e015      	b.n	8001704 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016d8:	4b24      	ldr	r3, [pc, #144]	; (800176c <HAL_RCC_OscConfig+0x2b4>)
 80016da:	2200      	movs	r2, #0
 80016dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016de:	f7ff fc3d 	bl	8000f5c <HAL_GetTick>
 80016e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016e4:	e008      	b.n	80016f8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016e6:	f7ff fc39 	bl	8000f5c <HAL_GetTick>
 80016ea:	4602      	mov	r2, r0
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	d901      	bls.n	80016f8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80016f4:	2303      	movs	r3, #3
 80016f6:	e144      	b.n	8001982 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016f8:	4b1a      	ldr	r3, [pc, #104]	; (8001764 <HAL_RCC_OscConfig+0x2ac>)
 80016fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016fc:	f003 0302 	and.w	r3, r3, #2
 8001700:	2b00      	cmp	r3, #0
 8001702:	d1f0      	bne.n	80016e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 0304 	and.w	r3, r3, #4
 800170c:	2b00      	cmp	r3, #0
 800170e:	f000 80a0 	beq.w	8001852 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001712:	2300      	movs	r3, #0
 8001714:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001716:	4b13      	ldr	r3, [pc, #76]	; (8001764 <HAL_RCC_OscConfig+0x2ac>)
 8001718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d10f      	bne.n	8001742 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001722:	2300      	movs	r3, #0
 8001724:	60bb      	str	r3, [r7, #8]
 8001726:	4a0f      	ldr	r2, [pc, #60]	; (8001764 <HAL_RCC_OscConfig+0x2ac>)
 8001728:	4b0e      	ldr	r3, [pc, #56]	; (8001764 <HAL_RCC_OscConfig+0x2ac>)
 800172a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001730:	6413      	str	r3, [r2, #64]	; 0x40
 8001732:	4b0c      	ldr	r3, [pc, #48]	; (8001764 <HAL_RCC_OscConfig+0x2ac>)
 8001734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800173a:	60bb      	str	r3, [r7, #8]
 800173c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800173e:	2301      	movs	r3, #1
 8001740:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001742:	4b0b      	ldr	r3, [pc, #44]	; (8001770 <HAL_RCC_OscConfig+0x2b8>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800174a:	2b00      	cmp	r3, #0
 800174c:	d121      	bne.n	8001792 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800174e:	4a08      	ldr	r2, [pc, #32]	; (8001770 <HAL_RCC_OscConfig+0x2b8>)
 8001750:	4b07      	ldr	r3, [pc, #28]	; (8001770 <HAL_RCC_OscConfig+0x2b8>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001758:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800175a:	f7ff fbff 	bl	8000f5c <HAL_GetTick>
 800175e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001760:	e011      	b.n	8001786 <HAL_RCC_OscConfig+0x2ce>
 8001762:	bf00      	nop
 8001764:	40023800 	.word	0x40023800
 8001768:	42470000 	.word	0x42470000
 800176c:	42470e80 	.word	0x42470e80
 8001770:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001774:	f7ff fbf2 	bl	8000f5c <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	2b02      	cmp	r3, #2
 8001780:	d901      	bls.n	8001786 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e0fd      	b.n	8001982 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001786:	4b81      	ldr	r3, [pc, #516]	; (800198c <HAL_RCC_OscConfig+0x4d4>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800178e:	2b00      	cmp	r3, #0
 8001790:	d0f0      	beq.n	8001774 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	2b01      	cmp	r3, #1
 8001798:	d106      	bne.n	80017a8 <HAL_RCC_OscConfig+0x2f0>
 800179a:	4a7d      	ldr	r2, [pc, #500]	; (8001990 <HAL_RCC_OscConfig+0x4d8>)
 800179c:	4b7c      	ldr	r3, [pc, #496]	; (8001990 <HAL_RCC_OscConfig+0x4d8>)
 800179e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017a0:	f043 0301 	orr.w	r3, r3, #1
 80017a4:	6713      	str	r3, [r2, #112]	; 0x70
 80017a6:	e01c      	b.n	80017e2 <HAL_RCC_OscConfig+0x32a>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	2b05      	cmp	r3, #5
 80017ae:	d10c      	bne.n	80017ca <HAL_RCC_OscConfig+0x312>
 80017b0:	4a77      	ldr	r2, [pc, #476]	; (8001990 <HAL_RCC_OscConfig+0x4d8>)
 80017b2:	4b77      	ldr	r3, [pc, #476]	; (8001990 <HAL_RCC_OscConfig+0x4d8>)
 80017b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017b6:	f043 0304 	orr.w	r3, r3, #4
 80017ba:	6713      	str	r3, [r2, #112]	; 0x70
 80017bc:	4a74      	ldr	r2, [pc, #464]	; (8001990 <HAL_RCC_OscConfig+0x4d8>)
 80017be:	4b74      	ldr	r3, [pc, #464]	; (8001990 <HAL_RCC_OscConfig+0x4d8>)
 80017c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017c2:	f043 0301 	orr.w	r3, r3, #1
 80017c6:	6713      	str	r3, [r2, #112]	; 0x70
 80017c8:	e00b      	b.n	80017e2 <HAL_RCC_OscConfig+0x32a>
 80017ca:	4a71      	ldr	r2, [pc, #452]	; (8001990 <HAL_RCC_OscConfig+0x4d8>)
 80017cc:	4b70      	ldr	r3, [pc, #448]	; (8001990 <HAL_RCC_OscConfig+0x4d8>)
 80017ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017d0:	f023 0301 	bic.w	r3, r3, #1
 80017d4:	6713      	str	r3, [r2, #112]	; 0x70
 80017d6:	4a6e      	ldr	r2, [pc, #440]	; (8001990 <HAL_RCC_OscConfig+0x4d8>)
 80017d8:	4b6d      	ldr	r3, [pc, #436]	; (8001990 <HAL_RCC_OscConfig+0x4d8>)
 80017da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017dc:	f023 0304 	bic.w	r3, r3, #4
 80017e0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d015      	beq.n	8001816 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ea:	f7ff fbb7 	bl	8000f5c <HAL_GetTick>
 80017ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017f0:	e00a      	b.n	8001808 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017f2:	f7ff fbb3 	bl	8000f5c <HAL_GetTick>
 80017f6:	4602      	mov	r2, r0
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001800:	4293      	cmp	r3, r2
 8001802:	d901      	bls.n	8001808 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001804:	2303      	movs	r3, #3
 8001806:	e0bc      	b.n	8001982 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001808:	4b61      	ldr	r3, [pc, #388]	; (8001990 <HAL_RCC_OscConfig+0x4d8>)
 800180a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800180c:	f003 0302 	and.w	r3, r3, #2
 8001810:	2b00      	cmp	r3, #0
 8001812:	d0ee      	beq.n	80017f2 <HAL_RCC_OscConfig+0x33a>
 8001814:	e014      	b.n	8001840 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001816:	f7ff fba1 	bl	8000f5c <HAL_GetTick>
 800181a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800181c:	e00a      	b.n	8001834 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800181e:	f7ff fb9d 	bl	8000f5c <HAL_GetTick>
 8001822:	4602      	mov	r2, r0
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	1ad3      	subs	r3, r2, r3
 8001828:	f241 3288 	movw	r2, #5000	; 0x1388
 800182c:	4293      	cmp	r3, r2
 800182e:	d901      	bls.n	8001834 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001830:	2303      	movs	r3, #3
 8001832:	e0a6      	b.n	8001982 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001834:	4b56      	ldr	r3, [pc, #344]	; (8001990 <HAL_RCC_OscConfig+0x4d8>)
 8001836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001838:	f003 0302 	and.w	r3, r3, #2
 800183c:	2b00      	cmp	r3, #0
 800183e:	d1ee      	bne.n	800181e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001840:	7dfb      	ldrb	r3, [r7, #23]
 8001842:	2b01      	cmp	r3, #1
 8001844:	d105      	bne.n	8001852 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001846:	4a52      	ldr	r2, [pc, #328]	; (8001990 <HAL_RCC_OscConfig+0x4d8>)
 8001848:	4b51      	ldr	r3, [pc, #324]	; (8001990 <HAL_RCC_OscConfig+0x4d8>)
 800184a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001850:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	699b      	ldr	r3, [r3, #24]
 8001856:	2b00      	cmp	r3, #0
 8001858:	f000 8092 	beq.w	8001980 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800185c:	4b4c      	ldr	r3, [pc, #304]	; (8001990 <HAL_RCC_OscConfig+0x4d8>)
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	f003 030c 	and.w	r3, r3, #12
 8001864:	2b08      	cmp	r3, #8
 8001866:	d05c      	beq.n	8001922 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	699b      	ldr	r3, [r3, #24]
 800186c:	2b02      	cmp	r3, #2
 800186e:	d141      	bne.n	80018f4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001870:	4b48      	ldr	r3, [pc, #288]	; (8001994 <HAL_RCC_OscConfig+0x4dc>)
 8001872:	2200      	movs	r2, #0
 8001874:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001876:	f7ff fb71 	bl	8000f5c <HAL_GetTick>
 800187a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800187c:	e008      	b.n	8001890 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800187e:	f7ff fb6d 	bl	8000f5c <HAL_GetTick>
 8001882:	4602      	mov	r2, r0
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	2b02      	cmp	r3, #2
 800188a:	d901      	bls.n	8001890 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800188c:	2303      	movs	r3, #3
 800188e:	e078      	b.n	8001982 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001890:	4b3f      	ldr	r3, [pc, #252]	; (8001990 <HAL_RCC_OscConfig+0x4d8>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001898:	2b00      	cmp	r3, #0
 800189a:	d1f0      	bne.n	800187e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800189c:	493c      	ldr	r1, [pc, #240]	; (8001990 <HAL_RCC_OscConfig+0x4d8>)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	69da      	ldr	r2, [r3, #28]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6a1b      	ldr	r3, [r3, #32]
 80018a6:	431a      	orrs	r2, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ac:	019b      	lsls	r3, r3, #6
 80018ae:	431a      	orrs	r2, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018b4:	085b      	lsrs	r3, r3, #1
 80018b6:	3b01      	subs	r3, #1
 80018b8:	041b      	lsls	r3, r3, #16
 80018ba:	431a      	orrs	r2, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c0:	061b      	lsls	r3, r3, #24
 80018c2:	4313      	orrs	r3, r2
 80018c4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018c6:	4b33      	ldr	r3, [pc, #204]	; (8001994 <HAL_RCC_OscConfig+0x4dc>)
 80018c8:	2201      	movs	r2, #1
 80018ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018cc:	f7ff fb46 	bl	8000f5c <HAL_GetTick>
 80018d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018d2:	e008      	b.n	80018e6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018d4:	f7ff fb42 	bl	8000f5c <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e04d      	b.n	8001982 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018e6:	4b2a      	ldr	r3, [pc, #168]	; (8001990 <HAL_RCC_OscConfig+0x4d8>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d0f0      	beq.n	80018d4 <HAL_RCC_OscConfig+0x41c>
 80018f2:	e045      	b.n	8001980 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018f4:	4b27      	ldr	r3, [pc, #156]	; (8001994 <HAL_RCC_OscConfig+0x4dc>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018fa:	f7ff fb2f 	bl	8000f5c <HAL_GetTick>
 80018fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001900:	e008      	b.n	8001914 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001902:	f7ff fb2b 	bl	8000f5c <HAL_GetTick>
 8001906:	4602      	mov	r2, r0
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	2b02      	cmp	r3, #2
 800190e:	d901      	bls.n	8001914 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001910:	2303      	movs	r3, #3
 8001912:	e036      	b.n	8001982 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001914:	4b1e      	ldr	r3, [pc, #120]	; (8001990 <HAL_RCC_OscConfig+0x4d8>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800191c:	2b00      	cmp	r3, #0
 800191e:	d1f0      	bne.n	8001902 <HAL_RCC_OscConfig+0x44a>
 8001920:	e02e      	b.n	8001980 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	699b      	ldr	r3, [r3, #24]
 8001926:	2b01      	cmp	r3, #1
 8001928:	d101      	bne.n	800192e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e029      	b.n	8001982 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800192e:	4b18      	ldr	r3, [pc, #96]	; (8001990 <HAL_RCC_OscConfig+0x4d8>)
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	69db      	ldr	r3, [r3, #28]
 800193e:	429a      	cmp	r2, r3
 8001940:	d11c      	bne.n	800197c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800194c:	429a      	cmp	r2, r3
 800194e:	d115      	bne.n	800197c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001950:	68fa      	ldr	r2, [r7, #12]
 8001952:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001956:	4013      	ands	r3, r2
 8001958:	687a      	ldr	r2, [r7, #4]
 800195a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800195c:	4293      	cmp	r3, r2
 800195e:	d10d      	bne.n	800197c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800196a:	429a      	cmp	r2, r3
 800196c:	d106      	bne.n	800197c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001978:	429a      	cmp	r2, r3
 800197a:	d001      	beq.n	8001980 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e000      	b.n	8001982 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001980:	2300      	movs	r3, #0
}
 8001982:	4618      	mov	r0, r3
 8001984:	3718      	adds	r7, #24
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	40007000 	.word	0x40007000
 8001990:	40023800 	.word	0x40023800
 8001994:	42470060 	.word	0x42470060

08001998 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d101      	bne.n	80019ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e0cc      	b.n	8001b46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019ac:	4b68      	ldr	r3, [pc, #416]	; (8001b50 <HAL_RCC_ClockConfig+0x1b8>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 020f 	and.w	r2, r3, #15
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d20c      	bcs.n	80019d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ba:	4b65      	ldr	r3, [pc, #404]	; (8001b50 <HAL_RCC_ClockConfig+0x1b8>)
 80019bc:	683a      	ldr	r2, [r7, #0]
 80019be:	b2d2      	uxtb	r2, r2
 80019c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019c2:	4b63      	ldr	r3, [pc, #396]	; (8001b50 <HAL_RCC_ClockConfig+0x1b8>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 020f 	and.w	r2, r3, #15
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d001      	beq.n	80019d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e0b8      	b.n	8001b46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0302 	and.w	r3, r3, #2
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d020      	beq.n	8001a22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0304 	and.w	r3, r3, #4
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d005      	beq.n	80019f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019ec:	4a59      	ldr	r2, [pc, #356]	; (8001b54 <HAL_RCC_ClockConfig+0x1bc>)
 80019ee:	4b59      	ldr	r3, [pc, #356]	; (8001b54 <HAL_RCC_ClockConfig+0x1bc>)
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80019f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 0308 	and.w	r3, r3, #8
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d005      	beq.n	8001a10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a04:	4a53      	ldr	r2, [pc, #332]	; (8001b54 <HAL_RCC_ClockConfig+0x1bc>)
 8001a06:	4b53      	ldr	r3, [pc, #332]	; (8001b54 <HAL_RCC_ClockConfig+0x1bc>)
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a10:	4950      	ldr	r1, [pc, #320]	; (8001b54 <HAL_RCC_ClockConfig+0x1bc>)
 8001a12:	4b50      	ldr	r3, [pc, #320]	; (8001b54 <HAL_RCC_ClockConfig+0x1bc>)
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0301 	and.w	r3, r3, #1
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d044      	beq.n	8001ab8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d107      	bne.n	8001a46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a36:	4b47      	ldr	r3, [pc, #284]	; (8001b54 <HAL_RCC_ClockConfig+0x1bc>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d119      	bne.n	8001a76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e07f      	b.n	8001b46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d003      	beq.n	8001a56 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a52:	2b03      	cmp	r3, #3
 8001a54:	d107      	bne.n	8001a66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a56:	4b3f      	ldr	r3, [pc, #252]	; (8001b54 <HAL_RCC_ClockConfig+0x1bc>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d109      	bne.n	8001a76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e06f      	b.n	8001b46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a66:	4b3b      	ldr	r3, [pc, #236]	; (8001b54 <HAL_RCC_ClockConfig+0x1bc>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0302 	and.w	r3, r3, #2
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d101      	bne.n	8001a76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e067      	b.n	8001b46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a76:	4937      	ldr	r1, [pc, #220]	; (8001b54 <HAL_RCC_ClockConfig+0x1bc>)
 8001a78:	4b36      	ldr	r3, [pc, #216]	; (8001b54 <HAL_RCC_ClockConfig+0x1bc>)
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	f023 0203 	bic.w	r2, r3, #3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	4313      	orrs	r3, r2
 8001a86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a88:	f7ff fa68 	bl	8000f5c <HAL_GetTick>
 8001a8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a8e:	e00a      	b.n	8001aa6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a90:	f7ff fa64 	bl	8000f5c <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d901      	bls.n	8001aa6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e04f      	b.n	8001b46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aa6:	4b2b      	ldr	r3, [pc, #172]	; (8001b54 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	f003 020c 	and.w	r2, r3, #12
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d1eb      	bne.n	8001a90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ab8:	4b25      	ldr	r3, [pc, #148]	; (8001b50 <HAL_RCC_ClockConfig+0x1b8>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 020f 	and.w	r2, r3, #15
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d90c      	bls.n	8001ae0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ac6:	4b22      	ldr	r3, [pc, #136]	; (8001b50 <HAL_RCC_ClockConfig+0x1b8>)
 8001ac8:	683a      	ldr	r2, [r7, #0]
 8001aca:	b2d2      	uxtb	r2, r2
 8001acc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ace:	4b20      	ldr	r3, [pc, #128]	; (8001b50 <HAL_RCC_ClockConfig+0x1b8>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 020f 	and.w	r2, r3, #15
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d001      	beq.n	8001ae0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e032      	b.n	8001b46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0304 	and.w	r3, r3, #4
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d008      	beq.n	8001afe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001aec:	4919      	ldr	r1, [pc, #100]	; (8001b54 <HAL_RCC_ClockConfig+0x1bc>)
 8001aee:	4b19      	ldr	r3, [pc, #100]	; (8001b54 <HAL_RCC_ClockConfig+0x1bc>)
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	68db      	ldr	r3, [r3, #12]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0308 	and.w	r3, r3, #8
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d009      	beq.n	8001b1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b0a:	4912      	ldr	r1, [pc, #72]	; (8001b54 <HAL_RCC_ClockConfig+0x1bc>)
 8001b0c:	4b11      	ldr	r3, [pc, #68]	; (8001b54 <HAL_RCC_ClockConfig+0x1bc>)
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	691b      	ldr	r3, [r3, #16]
 8001b18:	00db      	lsls	r3, r3, #3
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b1e:	f000 f821 	bl	8001b64 <HAL_RCC_GetSysClockFreq>
 8001b22:	4601      	mov	r1, r0
 8001b24:	4b0b      	ldr	r3, [pc, #44]	; (8001b54 <HAL_RCC_ClockConfig+0x1bc>)
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	091b      	lsrs	r3, r3, #4
 8001b2a:	f003 030f 	and.w	r3, r3, #15
 8001b2e:	4a0a      	ldr	r2, [pc, #40]	; (8001b58 <HAL_RCC_ClockConfig+0x1c0>)
 8001b30:	5cd3      	ldrb	r3, [r2, r3]
 8001b32:	fa21 f303 	lsr.w	r3, r1, r3
 8001b36:	4a09      	ldr	r2, [pc, #36]	; (8001b5c <HAL_RCC_ClockConfig+0x1c4>)
 8001b38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b3a:	4b09      	ldr	r3, [pc, #36]	; (8001b60 <HAL_RCC_ClockConfig+0x1c8>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7ff f9c8 	bl	8000ed4 <HAL_InitTick>

  return HAL_OK;
 8001b44:	2300      	movs	r3, #0
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3710      	adds	r7, #16
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	40023c00 	.word	0x40023c00
 8001b54:	40023800 	.word	0x40023800
 8001b58:	080059bc 	.word	0x080059bc
 8001b5c:	20000018 	.word	0x20000018
 8001b60:	2000001c 	.word	0x2000001c

08001b64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b68:	b087      	sub	sp, #28
 8001b6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	60fa      	str	r2, [r7, #12]
 8001b70:	2200      	movs	r2, #0
 8001b72:	617a      	str	r2, [r7, #20]
 8001b74:	2200      	movs	r2, #0
 8001b76:	60ba      	str	r2, [r7, #8]
  uint32_t sysclockfreq = 0U;
 8001b78:	2200      	movs	r2, #0
 8001b7a:	613a      	str	r2, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b7c:	4a51      	ldr	r2, [pc, #324]	; (8001cc4 <HAL_RCC_GetSysClockFreq+0x160>)
 8001b7e:	6892      	ldr	r2, [r2, #8]
 8001b80:	f002 020c 	and.w	r2, r2, #12
 8001b84:	2a04      	cmp	r2, #4
 8001b86:	d007      	beq.n	8001b98 <HAL_RCC_GetSysClockFreq+0x34>
 8001b88:	2a08      	cmp	r2, #8
 8001b8a:	d008      	beq.n	8001b9e <HAL_RCC_GetSysClockFreq+0x3a>
 8001b8c:	2a00      	cmp	r2, #0
 8001b8e:	f040 8090 	bne.w	8001cb2 <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b92:	4b4d      	ldr	r3, [pc, #308]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0x164>)
 8001b94:	613b      	str	r3, [r7, #16]
       break;
 8001b96:	e08f      	b.n	8001cb8 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b98:	4b4c      	ldr	r3, [pc, #304]	; (8001ccc <HAL_RCC_GetSysClockFreq+0x168>)
 8001b9a:	613b      	str	r3, [r7, #16]
      break;
 8001b9c:	e08c      	b.n	8001cb8 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b9e:	4a49      	ldr	r2, [pc, #292]	; (8001cc4 <HAL_RCC_GetSysClockFreq+0x160>)
 8001ba0:	6852      	ldr	r2, [r2, #4]
 8001ba2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001ba6:	60fa      	str	r2, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ba8:	4a46      	ldr	r2, [pc, #280]	; (8001cc4 <HAL_RCC_GetSysClockFreq+0x160>)
 8001baa:	6852      	ldr	r2, [r2, #4]
 8001bac:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8001bb0:	2a00      	cmp	r2, #0
 8001bb2:	d023      	beq.n	8001bfc <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bb4:	4b43      	ldr	r3, [pc, #268]	; (8001cc4 <HAL_RCC_GetSysClockFreq+0x160>)
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	099b      	lsrs	r3, r3, #6
 8001bba:	f04f 0400 	mov.w	r4, #0
 8001bbe:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001bc2:	f04f 0200 	mov.w	r2, #0
 8001bc6:	ea03 0301 	and.w	r3, r3, r1
 8001bca:	ea04 0402 	and.w	r4, r4, r2
 8001bce:	4a3f      	ldr	r2, [pc, #252]	; (8001ccc <HAL_RCC_GetSysClockFreq+0x168>)
 8001bd0:	fb02 f104 	mul.w	r1, r2, r4
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	fb02 f203 	mul.w	r2, r2, r3
 8001bda:	440a      	add	r2, r1
 8001bdc:	493b      	ldr	r1, [pc, #236]	; (8001ccc <HAL_RCC_GetSysClockFreq+0x168>)
 8001bde:	fba3 0101 	umull	r0, r1, r3, r1
 8001be2:	1853      	adds	r3, r2, r1
 8001be4:	4619      	mov	r1, r3
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	f04f 0400 	mov.w	r4, #0
 8001bec:	461a      	mov	r2, r3
 8001bee:	4623      	mov	r3, r4
 8001bf0:	f7fe fb4e 	bl	8000290 <__aeabi_uldivmod>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	460c      	mov	r4, r1
 8001bf8:	617b      	str	r3, [r7, #20]
 8001bfa:	e04c      	b.n	8001c96 <HAL_RCC_GetSysClockFreq+0x132>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bfc:	4a31      	ldr	r2, [pc, #196]	; (8001cc4 <HAL_RCC_GetSysClockFreq+0x160>)
 8001bfe:	6852      	ldr	r2, [r2, #4]
 8001c00:	0992      	lsrs	r2, r2, #6
 8001c02:	4611      	mov	r1, r2
 8001c04:	f04f 0200 	mov.w	r2, #0
 8001c08:	f240 15ff 	movw	r5, #511	; 0x1ff
 8001c0c:	f04f 0600 	mov.w	r6, #0
 8001c10:	ea05 0501 	and.w	r5, r5, r1
 8001c14:	ea06 0602 	and.w	r6, r6, r2
 8001c18:	4629      	mov	r1, r5
 8001c1a:	4632      	mov	r2, r6
 8001c1c:	ea4f 1b42 	mov.w	fp, r2, lsl #5
 8001c20:	ea4b 6bd1 	orr.w	fp, fp, r1, lsr #27
 8001c24:	ea4f 1a41 	mov.w	sl, r1, lsl #5
 8001c28:	4651      	mov	r1, sl
 8001c2a:	465a      	mov	r2, fp
 8001c2c:	46aa      	mov	sl, r5
 8001c2e:	46b3      	mov	fp, r6
 8001c30:	4655      	mov	r5, sl
 8001c32:	465e      	mov	r6, fp
 8001c34:	1b4d      	subs	r5, r1, r5
 8001c36:	eb62 0606 	sbc.w	r6, r2, r6
 8001c3a:	4629      	mov	r1, r5
 8001c3c:	4632      	mov	r2, r6
 8001c3e:	0194      	lsls	r4, r2, #6
 8001c40:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001c44:	018b      	lsls	r3, r1, #6
 8001c46:	1a5b      	subs	r3, r3, r1
 8001c48:	eb64 0402 	sbc.w	r4, r4, r2
 8001c4c:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 8001c50:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 8001c54:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 8001c58:	4643      	mov	r3, r8
 8001c5a:	464c      	mov	r4, r9
 8001c5c:	4655      	mov	r5, sl
 8001c5e:	465e      	mov	r6, fp
 8001c60:	18ed      	adds	r5, r5, r3
 8001c62:	eb46 0604 	adc.w	r6, r6, r4
 8001c66:	462b      	mov	r3, r5
 8001c68:	4634      	mov	r4, r6
 8001c6a:	02a2      	lsls	r2, r4, #10
 8001c6c:	607a      	str	r2, [r7, #4]
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001c74:	607a      	str	r2, [r7, #4]
 8001c76:	029b      	lsls	r3, r3, #10
 8001c78:	603b      	str	r3, [r7, #0]
 8001c7a:	e897 0018 	ldmia.w	r7, {r3, r4}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	4621      	mov	r1, r4
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	f04f 0400 	mov.w	r4, #0
 8001c88:	461a      	mov	r2, r3
 8001c8a:	4623      	mov	r3, r4
 8001c8c:	f7fe fb00 	bl	8000290 <__aeabi_uldivmod>
 8001c90:	4603      	mov	r3, r0
 8001c92:	460c      	mov	r4, r1
 8001c94:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c96:	4b0b      	ldr	r3, [pc, #44]	; (8001cc4 <HAL_RCC_GetSysClockFreq+0x160>)
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	0c1b      	lsrs	r3, r3, #16
 8001c9c:	f003 0303 	and.w	r3, r3, #3
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8001ca6:	697a      	ldr	r2, [r7, #20]
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cae:	613b      	str	r3, [r7, #16]
      break;
 8001cb0:	e002      	b.n	8001cb8 <HAL_RCC_GetSysClockFreq+0x154>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001cb2:	4b05      	ldr	r3, [pc, #20]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0x164>)
 8001cb4:	613b      	str	r3, [r7, #16]
      break;
 8001cb6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cb8:	693b      	ldr	r3, [r7, #16]
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	371c      	adds	r7, #28
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001cc4:	40023800 	.word	0x40023800
 8001cc8:	00f42400 	.word	0x00f42400
 8001ccc:	017d7840 	.word	0x017d7840

08001cd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cd4:	4b03      	ldr	r3, [pc, #12]	; (8001ce4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	20000018 	.word	0x20000018

08001ce8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001cec:	f7ff fff0 	bl	8001cd0 <HAL_RCC_GetHCLKFreq>
 8001cf0:	4601      	mov	r1, r0
 8001cf2:	4b05      	ldr	r3, [pc, #20]	; (8001d08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	0a9b      	lsrs	r3, r3, #10
 8001cf8:	f003 0307 	and.w	r3, r3, #7
 8001cfc:	4a03      	ldr	r2, [pc, #12]	; (8001d0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cfe:	5cd3      	ldrb	r3, [r2, r3]
 8001d00:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	40023800 	.word	0x40023800
 8001d0c:	080059cc 	.word	0x080059cc

08001d10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001d14:	f7ff ffdc 	bl	8001cd0 <HAL_RCC_GetHCLKFreq>
 8001d18:	4601      	mov	r1, r0
 8001d1a:	4b05      	ldr	r3, [pc, #20]	; (8001d30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	0b5b      	lsrs	r3, r3, #13
 8001d20:	f003 0307 	and.w	r3, r3, #7
 8001d24:	4a03      	ldr	r2, [pc, #12]	; (8001d34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d26:	5cd3      	ldrb	r3, [r2, r3]
 8001d28:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	40023800 	.word	0x40023800
 8001d34:	080059cc 	.word	0x080059cc

08001d38 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d101      	bne.n	8001d4a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e055      	b.n	8001df6 <HAL_SPI_Init+0xbe>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d106      	bne.n	8001d6a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f7fe ffc3 	bl	8000cf0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2202      	movs	r2, #2
 8001d6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	6812      	ldr	r2, [r2, #0]
 8001d7a:	6812      	ldr	r2, [r2, #0]
 8001d7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d80:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	6851      	ldr	r1, [r2, #4]
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	6892      	ldr	r2, [r2, #8]
 8001d8e:	4311      	orrs	r1, r2
 8001d90:	687a      	ldr	r2, [r7, #4]
 8001d92:	68d2      	ldr	r2, [r2, #12]
 8001d94:	4311      	orrs	r1, r2
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	6912      	ldr	r2, [r2, #16]
 8001d9a:	4311      	orrs	r1, r2
 8001d9c:	687a      	ldr	r2, [r7, #4]
 8001d9e:	6952      	ldr	r2, [r2, #20]
 8001da0:	4311      	orrs	r1, r2
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	6992      	ldr	r2, [r2, #24]
 8001da6:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8001daa:	4311      	orrs	r1, r2
 8001dac:	687a      	ldr	r2, [r7, #4]
 8001dae:	69d2      	ldr	r2, [r2, #28]
 8001db0:	4311      	orrs	r1, r2
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	6a12      	ldr	r2, [r2, #32]
 8001db6:	4311      	orrs	r1, r2
 8001db8:	687a      	ldr	r2, [r7, #4]
 8001dba:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001dbc:	430a      	orrs	r2, r1
 8001dbe:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	687a      	ldr	r2, [r7, #4]
 8001dc6:	6992      	ldr	r2, [r2, #24]
 8001dc8:	0c12      	lsrs	r2, r2, #16
 8001dca:	f002 0104 	and.w	r1, r2, #4
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001dd2:	430a      	orrs	r2, r1
 8001dd4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	6812      	ldr	r2, [r2, #0]
 8001dde:	69d2      	ldr	r2, [r2, #28]
 8001de0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001de4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2200      	movs	r2, #0
 8001dea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2201      	movs	r2, #1
 8001df0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001df4:	2300      	movs	r3, #0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b08c      	sub	sp, #48	; 0x30
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	60f8      	str	r0, [r7, #12]
 8001e06:	60b9      	str	r1, [r7, #8]
 8001e08:	607a      	str	r2, [r7, #4]
 8001e0a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001e10:	2300      	movs	r3, #0
 8001e12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d101      	bne.n	8001e24 <HAL_SPI_TransmitReceive+0x26>
 8001e20:	2302      	movs	r3, #2
 8001e22:	e188      	b.n	8002136 <HAL_SPI_TransmitReceive+0x338>
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2201      	movs	r2, #1
 8001e28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001e2c:	f7ff f896 	bl	8000f5c <HAL_GetTick>
 8001e30:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001e38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001e42:	887b      	ldrh	r3, [r7, #2]
 8001e44:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001e46:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d00f      	beq.n	8001e6e <HAL_SPI_TransmitReceive+0x70>
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001e54:	d107      	bne.n	8001e66 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d103      	bne.n	8001e66 <HAL_SPI_TransmitReceive+0x68>
 8001e5e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001e62:	2b04      	cmp	r3, #4
 8001e64:	d003      	beq.n	8001e6e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001e66:	2302      	movs	r3, #2
 8001e68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001e6c:	e159      	b.n	8002122 <HAL_SPI_TransmitReceive+0x324>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d005      	beq.n	8001e80 <HAL_SPI_TransmitReceive+0x82>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d002      	beq.n	8001e80 <HAL_SPI_TransmitReceive+0x82>
 8001e7a:	887b      	ldrh	r3, [r7, #2]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d103      	bne.n	8001e88 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001e86:	e14c      	b.n	8002122 <HAL_SPI_TransmitReceive+0x324>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	2b04      	cmp	r3, #4
 8001e92:	d003      	beq.n	8001e9c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2205      	movs	r2, #5
 8001e98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	687a      	ldr	r2, [r7, #4]
 8001ea6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	887a      	ldrh	r2, [r7, #2]
 8001eac:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	887a      	ldrh	r2, [r7, #2]
 8001eb2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	68ba      	ldr	r2, [r7, #8]
 8001eb8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	887a      	ldrh	r2, [r7, #2]
 8001ebe:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	887a      	ldrh	r2, [r7, #2]
 8001ec4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001edc:	2b40      	cmp	r3, #64	; 0x40
 8001ede:	d007      	beq.n	8001ef0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	68fa      	ldr	r2, [r7, #12]
 8001ee6:	6812      	ldr	r2, [r2, #0]
 8001ee8:	6812      	ldr	r2, [r2, #0]
 8001eea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001eee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ef8:	d178      	bne.n	8001fec <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d002      	beq.n	8001f08 <HAL_SPI_TransmitReceive+0x10a>
 8001f02:	8b7b      	ldrh	r3, [r7, #26]
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d166      	bne.n	8001fd6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	68fa      	ldr	r2, [r7, #12]
 8001f0e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001f10:	8812      	ldrh	r2, [r2, #0]
 8001f12:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f18:	1c9a      	adds	r2, r3, #2
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	3b01      	subs	r3, #1
 8001f26:	b29a      	uxth	r2, r3
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001f2c:	e053      	b.n	8001fd6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	f003 0302 	and.w	r3, r3, #2
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d11b      	bne.n	8001f74 <HAL_SPI_TransmitReceive+0x176>
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d016      	beq.n	8001f74 <HAL_SPI_TransmitReceive+0x176>
 8001f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d113      	bne.n	8001f74 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	68fa      	ldr	r2, [r7, #12]
 8001f52:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001f54:	8812      	ldrh	r2, [r2, #0]
 8001f56:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5c:	1c9a      	adds	r2, r3, #2
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f66:	b29b      	uxth	r3, r3
 8001f68:	3b01      	subs	r3, #1
 8001f6a:	b29a      	uxth	r2, r3
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001f70:	2300      	movs	r3, #0
 8001f72:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	f003 0301 	and.w	r3, r3, #1
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d119      	bne.n	8001fb6 <HAL_SPI_TransmitReceive+0x1b8>
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f86:	b29b      	uxth	r3, r3
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d014      	beq.n	8001fb6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f90:	68fa      	ldr	r2, [r7, #12]
 8001f92:	6812      	ldr	r2, [r2, #0]
 8001f94:	68d2      	ldr	r2, [r2, #12]
 8001f96:	b292      	uxth	r2, r2
 8001f98:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f9e:	1c9a      	adds	r2, r3, #2
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001fa8:	b29b      	uxth	r3, r3
 8001faa:	3b01      	subs	r3, #1
 8001fac:	b29a      	uxth	r2, r3
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001fb6:	f7fe ffd1 	bl	8000f5c <HAL_GetTick>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fbe:	1ad2      	subs	r2, r2, r3
 8001fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d307      	bcc.n	8001fd6 <HAL_SPI_TransmitReceive+0x1d8>
 8001fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fcc:	d003      	beq.n	8001fd6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001fd4:	e0a5      	b.n	8002122 <HAL_SPI_TransmitReceive+0x324>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d1a6      	bne.n	8001f2e <HAL_SPI_TransmitReceive+0x130>
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001fe4:	b29b      	uxth	r3, r3
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d1a1      	bne.n	8001f2e <HAL_SPI_TransmitReceive+0x130>
 8001fea:	e07c      	b.n	80020e6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d002      	beq.n	8001ffa <HAL_SPI_TransmitReceive+0x1fc>
 8001ff4:	8b7b      	ldrh	r3, [r7, #26]
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d16b      	bne.n	80020d2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	330c      	adds	r3, #12
 8002000:	68fa      	ldr	r2, [r7, #12]
 8002002:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002004:	7812      	ldrb	r2, [r2, #0]
 8002006:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200c:	1c5a      	adds	r2, r3, #1
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002016:	b29b      	uxth	r3, r3
 8002018:	3b01      	subs	r3, #1
 800201a:	b29a      	uxth	r2, r3
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002020:	e057      	b.n	80020d2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	f003 0302 	and.w	r3, r3, #2
 800202c:	2b02      	cmp	r3, #2
 800202e:	d11c      	bne.n	800206a <HAL_SPI_TransmitReceive+0x26c>
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002034:	b29b      	uxth	r3, r3
 8002036:	2b00      	cmp	r3, #0
 8002038:	d017      	beq.n	800206a <HAL_SPI_TransmitReceive+0x26c>
 800203a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800203c:	2b01      	cmp	r3, #1
 800203e:	d114      	bne.n	800206a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	330c      	adds	r3, #12
 8002046:	68fa      	ldr	r2, [r7, #12]
 8002048:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800204a:	7812      	ldrb	r2, [r2, #0]
 800204c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002052:	1c5a      	adds	r2, r3, #1
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800205c:	b29b      	uxth	r3, r3
 800205e:	3b01      	subs	r3, #1
 8002060:	b29a      	uxth	r2, r3
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002066:	2300      	movs	r3, #0
 8002068:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	f003 0301 	and.w	r3, r3, #1
 8002074:	2b01      	cmp	r3, #1
 8002076:	d119      	bne.n	80020ac <HAL_SPI_TransmitReceive+0x2ae>
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800207c:	b29b      	uxth	r3, r3
 800207e:	2b00      	cmp	r3, #0
 8002080:	d014      	beq.n	80020ac <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002086:	68fa      	ldr	r2, [r7, #12]
 8002088:	6812      	ldr	r2, [r2, #0]
 800208a:	68d2      	ldr	r2, [r2, #12]
 800208c:	b2d2      	uxtb	r2, r2
 800208e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002094:	1c5a      	adds	r2, r3, #1
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800209e:	b29b      	uxth	r3, r3
 80020a0:	3b01      	subs	r3, #1
 80020a2:	b29a      	uxth	r2, r3
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80020a8:	2301      	movs	r3, #1
 80020aa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80020ac:	f7fe ff56 	bl	8000f5c <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b4:	1ad2      	subs	r2, r2, r3
 80020b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d303      	bcc.n	80020c4 <HAL_SPI_TransmitReceive+0x2c6>
 80020bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020c2:	d102      	bne.n	80020ca <HAL_SPI_TransmitReceive+0x2cc>
 80020c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d103      	bne.n	80020d2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80020d0:	e027      	b.n	8002122 <HAL_SPI_TransmitReceive+0x324>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020d6:	b29b      	uxth	r3, r3
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d1a2      	bne.n	8002022 <HAL_SPI_TransmitReceive+0x224>
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020e0:	b29b      	uxth	r3, r3
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d19d      	bne.n	8002022 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80020e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020e8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80020ea:	68f8      	ldr	r0, [r7, #12]
 80020ec:	f000 f892 	bl	8002214 <SPI_EndRxTxTransaction>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d006      	beq.n	8002104 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2220      	movs	r2, #32
 8002100:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002102:	e00e      	b.n	8002122 <HAL_SPI_TransmitReceive+0x324>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d10a      	bne.n	8002122 <HAL_SPI_TransmitReceive+0x324>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800210c:	2300      	movs	r3, #0
 800210e:	617b      	str	r3, [r7, #20]
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	617b      	str	r3, [r7, #20]
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	617b      	str	r3, [r7, #20]
 8002120:	697b      	ldr	r3, [r7, #20]
  }

error :
  hspi->State = HAL_SPI_STATE_READY;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2201      	movs	r2, #1
 8002126:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2200      	movs	r2, #0
 800212e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002132:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002136:	4618      	mov	r0, r3
 8002138:	3730      	adds	r7, #48	; 0x30
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}

0800213e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800213e:	b580      	push	{r7, lr}
 8002140:	b084      	sub	sp, #16
 8002142:	af00      	add	r7, sp, #0
 8002144:	60f8      	str	r0, [r7, #12]
 8002146:	60b9      	str	r1, [r7, #8]
 8002148:	603b      	str	r3, [r7, #0]
 800214a:	4613      	mov	r3, r2
 800214c:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800214e:	e04c      	b.n	80021ea <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002156:	d048      	beq.n	80021ea <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002158:	f7fe ff00 	bl	8000f5c <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	69bb      	ldr	r3, [r7, #24]
 8002160:	1ad2      	subs	r2, r2, r3
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	429a      	cmp	r2, r3
 8002166:	d202      	bcs.n	800216e <SPI_WaitFlagStateUntilTimeout+0x30>
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d13d      	bne.n	80021ea <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	68fa      	ldr	r2, [r7, #12]
 8002174:	6812      	ldr	r2, [r2, #0]
 8002176:	6852      	ldr	r2, [r2, #4]
 8002178:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800217c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002186:	d111      	bne.n	80021ac <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002190:	d004      	beq.n	800219c <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800219a:	d107      	bne.n	80021ac <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	68fa      	ldr	r2, [r7, #12]
 80021a2:	6812      	ldr	r2, [r2, #0]
 80021a4:	6812      	ldr	r2, [r2, #0]
 80021a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021aa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021b4:	d10f      	bne.n	80021d6 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	68fa      	ldr	r2, [r7, #12]
 80021bc:	6812      	ldr	r2, [r2, #0]
 80021be:	6812      	ldr	r2, [r2, #0]
 80021c0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80021c4:	601a      	str	r2, [r3, #0]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	68fa      	ldr	r2, [r7, #12]
 80021cc:	6812      	ldr	r2, [r2, #0]
 80021ce:	6812      	ldr	r2, [r2, #0]
 80021d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021d4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2201      	movs	r2, #1
 80021da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2200      	movs	r2, #0
 80021e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e00f      	b.n	800220a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	689a      	ldr	r2, [r3, #8]
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	401a      	ands	r2, r3
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	429a      	cmp	r2, r3
 80021f8:	bf0c      	ite	eq
 80021fa:	2301      	moveq	r3, #1
 80021fc:	2300      	movne	r3, #0
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	461a      	mov	r2, r3
 8002202:	79fb      	ldrb	r3, [r7, #7]
 8002204:	429a      	cmp	r2, r3
 8002206:	d1a3      	bne.n	8002150 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3710      	adds	r7, #16
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
	...

08002214 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b088      	sub	sp, #32
 8002218:	af02      	add	r7, sp, #8
 800221a:	60f8      	str	r0, [r7, #12]
 800221c:	60b9      	str	r1, [r7, #8]
 800221e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002220:	4b1b      	ldr	r3, [pc, #108]	; (8002290 <SPI_EndRxTxTransaction+0x7c>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a1b      	ldr	r2, [pc, #108]	; (8002294 <SPI_EndRxTxTransaction+0x80>)
 8002226:	fba2 2303 	umull	r2, r3, r2, r3
 800222a:	0d5b      	lsrs	r3, r3, #21
 800222c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002230:	fb02 f303 	mul.w	r3, r2, r3
 8002234:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800223e:	d112      	bne.n	8002266 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	9300      	str	r3, [sp, #0]
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	2200      	movs	r2, #0
 8002248:	2180      	movs	r1, #128	; 0x80
 800224a:	68f8      	ldr	r0, [r7, #12]
 800224c:	f7ff ff77 	bl	800213e <SPI_WaitFlagStateUntilTimeout>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d016      	beq.n	8002284 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800225a:	f043 0220 	orr.w	r2, r3, #32
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e00f      	b.n	8002286 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d00a      	beq.n	8002282 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	3b01      	subs	r3, #1
 8002270:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800227c:	2b80      	cmp	r3, #128	; 0x80
 800227e:	d0f2      	beq.n	8002266 <SPI_EndRxTxTransaction+0x52>
 8002280:	e000      	b.n	8002284 <SPI_EndRxTxTransaction+0x70>
        break;
 8002282:	bf00      	nop
  }

  return HAL_OK;
 8002284:	2300      	movs	r3, #0
}
 8002286:	4618      	mov	r0, r3
 8002288:	3718      	adds	r7, #24
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	20000018 	.word	0x20000018
 8002294:	165e9f81 	.word	0x165e9f81

08002298 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d101      	bne.n	80022aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e03f      	b.n	800232a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d106      	bne.n	80022c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2200      	movs	r2, #0
 80022ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f7fe fd5e 	bl	8000d80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2224      	movs	r2, #36	; 0x24
 80022c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	6812      	ldr	r2, [r2, #0]
 80022d4:	68d2      	ldr	r2, [r2, #12]
 80022d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f000 f9b1 	bl	8002644 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	6812      	ldr	r2, [r2, #0]
 80022ea:	6912      	ldr	r2, [r2, #16]
 80022ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80022f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	6812      	ldr	r2, [r2, #0]
 80022fa:	6952      	ldr	r2, [r2, #20]
 80022fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002300:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	6812      	ldr	r2, [r2, #0]
 800230a:	68d2      	ldr	r2, [r2, #12]
 800230c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002310:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2220      	movs	r2, #32
 800231c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2220      	movs	r2, #32
 8002324:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002328:	2300      	movs	r3, #0
}
 800232a:	4618      	mov	r0, r3
 800232c:	3708      	adds	r7, #8
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}

08002332 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002332:	b580      	push	{r7, lr}
 8002334:	b088      	sub	sp, #32
 8002336:	af02      	add	r7, sp, #8
 8002338:	60f8      	str	r0, [r7, #12]
 800233a:	60b9      	str	r1, [r7, #8]
 800233c:	603b      	str	r3, [r7, #0]
 800233e:	4613      	mov	r3, r2
 8002340:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002342:	2300      	movs	r3, #0
 8002344:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800234c:	b2db      	uxtb	r3, r3
 800234e:	2b20      	cmp	r3, #32
 8002350:	f040 8082 	bne.w	8002458 <HAL_UART_Transmit+0x126>
  {
    if ((pData == NULL) || (Size == 0U))
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d002      	beq.n	8002360 <HAL_UART_Transmit+0x2e>
 800235a:	88fb      	ldrh	r3, [r7, #6]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d101      	bne.n	8002364 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e07a      	b.n	800245a <HAL_UART_Transmit+0x128>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800236a:	2b01      	cmp	r3, #1
 800236c:	d101      	bne.n	8002372 <HAL_UART_Transmit+0x40>
 800236e:	2302      	movs	r3, #2
 8002370:	e073      	b.n	800245a <HAL_UART_Transmit+0x128>
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2201      	movs	r2, #1
 8002376:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2200      	movs	r2, #0
 800237e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2221      	movs	r2, #33	; 0x21
 8002384:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002388:	f7fe fde8 	bl	8000f5c <HAL_GetTick>
 800238c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	88fa      	ldrh	r2, [r7, #6]
 8002392:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	88fa      	ldrh	r2, [r7, #6]
 8002398:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2200      	movs	r2, #0
 800239e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80023a2:	e041      	b.n	8002428 <HAL_UART_Transmit+0xf6>
    {
      huart->TxXferCount--;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	3b01      	subs	r3, #1
 80023ac:	b29a      	uxth	r2, r3
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023ba:	d121      	bne.n	8002400 <HAL_UART_Transmit+0xce>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	9300      	str	r3, [sp, #0]
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	2200      	movs	r2, #0
 80023c4:	2180      	movs	r1, #128	; 0x80
 80023c6:	68f8      	ldr	r0, [r7, #12]
 80023c8:	f000 f8f1 	bl	80025ae <UART_WaitOnFlagUntilTimeout>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80023d2:	2303      	movs	r3, #3
 80023d4:	e041      	b.n	800245a <HAL_UART_Transmit+0x128>
        }
        tmp = (uint16_t *) pData;
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	693a      	ldr	r2, [r7, #16]
 80023e0:	8812      	ldrh	r2, [r2, #0]
 80023e2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80023e6:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	691b      	ldr	r3, [r3, #16]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d103      	bne.n	80023f8 <HAL_UART_Transmit+0xc6>
        {
          pData += 2U;
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	3302      	adds	r3, #2
 80023f4:	60bb      	str	r3, [r7, #8]
 80023f6:	e017      	b.n	8002428 <HAL_UART_Transmit+0xf6>
        }
        else
        {
          pData += 1U;
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	3301      	adds	r3, #1
 80023fc:	60bb      	str	r3, [r7, #8]
 80023fe:	e013      	b.n	8002428 <HAL_UART_Transmit+0xf6>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	9300      	str	r3, [sp, #0]
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	2200      	movs	r2, #0
 8002408:	2180      	movs	r1, #128	; 0x80
 800240a:	68f8      	ldr	r0, [r7, #12]
 800240c:	f000 f8cf 	bl	80025ae <UART_WaitOnFlagUntilTimeout>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d001      	beq.n	800241a <HAL_UART_Transmit+0xe8>
        {
          return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	e01f      	b.n	800245a <HAL_UART_Transmit+0x128>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	1c59      	adds	r1, r3, #1
 8002422:	60b9      	str	r1, [r7, #8]
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	6053      	str	r3, [r2, #4]
    while (huart->TxXferCount > 0U)
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800242c:	b29b      	uxth	r3, r3
 800242e:	2b00      	cmp	r3, #0
 8002430:	d1b8      	bne.n	80023a4 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	9300      	str	r3, [sp, #0]
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	2200      	movs	r2, #0
 800243a:	2140      	movs	r1, #64	; 0x40
 800243c:	68f8      	ldr	r0, [r7, #12]
 800243e:	f000 f8b6 	bl	80025ae <UART_WaitOnFlagUntilTimeout>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d001      	beq.n	800244c <HAL_UART_Transmit+0x11a>
    {
      return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e006      	b.n	800245a <HAL_UART_Transmit+0x128>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2220      	movs	r2, #32
 8002450:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002454:	2300      	movs	r3, #0
 8002456:	e000      	b.n	800245a <HAL_UART_Transmit+0x128>
  }
  else
  {
    return HAL_BUSY;
 8002458:	2302      	movs	r3, #2
  }
}
 800245a:	4618      	mov	r0, r3
 800245c:	3718      	adds	r7, #24
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}

08002462 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002462:	b580      	push	{r7, lr}
 8002464:	b088      	sub	sp, #32
 8002466:	af02      	add	r7, sp, #8
 8002468:	60f8      	str	r0, [r7, #12]
 800246a:	60b9      	str	r1, [r7, #8]
 800246c:	603b      	str	r3, [r7, #0]
 800246e:	4613      	mov	r3, r2
 8002470:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002472:	2300      	movs	r3, #0
 8002474:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800247c:	b2db      	uxtb	r3, r3
 800247e:	2b20      	cmp	r3, #32
 8002480:	f040 8090 	bne.w	80025a4 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d002      	beq.n	8002490 <HAL_UART_Receive+0x2e>
 800248a:	88fb      	ldrh	r3, [r7, #6]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d101      	bne.n	8002494 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e088      	b.n	80025a6 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800249a:	2b01      	cmp	r3, #1
 800249c:	d101      	bne.n	80024a2 <HAL_UART_Receive+0x40>
 800249e:	2302      	movs	r3, #2
 80024a0:	e081      	b.n	80025a6 <HAL_UART_Receive+0x144>
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2201      	movs	r2, #1
 80024a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2200      	movs	r2, #0
 80024ae:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2222      	movs	r2, #34	; 0x22
 80024b4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80024b8:	f7fe fd50 	bl	8000f5c <HAL_GetTick>
 80024bc:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	88fa      	ldrh	r2, [r7, #6]
 80024c2:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	88fa      	ldrh	r2, [r7, #6]
 80024c8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2200      	movs	r2, #0
 80024ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80024d2:	e05c      	b.n	800258e <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80024d8:	b29b      	uxth	r3, r3
 80024da:	3b01      	subs	r3, #1
 80024dc:	b29a      	uxth	r2, r3
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024ea:	d12b      	bne.n	8002544 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	9300      	str	r3, [sp, #0]
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	2200      	movs	r2, #0
 80024f4:	2120      	movs	r1, #32
 80024f6:	68f8      	ldr	r0, [r7, #12]
 80024f8:	f000 f859 	bl	80025ae <UART_WaitOnFlagUntilTimeout>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d001      	beq.n	8002506 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e04f      	b.n	80025a6 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	691b      	ldr	r3, [r3, #16]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d10c      	bne.n	800252c <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	b29b      	uxth	r3, r3
 800251a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800251e:	b29a      	uxth	r2, r3
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	3302      	adds	r3, #2
 8002528:	60bb      	str	r3, [r7, #8]
 800252a:	e030      	b.n	800258e <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	b29b      	uxth	r3, r3
 8002534:	b2db      	uxtb	r3, r3
 8002536:	b29a      	uxth	r2, r3
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	3301      	adds	r3, #1
 8002540:	60bb      	str	r3, [r7, #8]
 8002542:	e024      	b.n	800258e <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	9300      	str	r3, [sp, #0]
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	2200      	movs	r2, #0
 800254c:	2120      	movs	r1, #32
 800254e:	68f8      	ldr	r0, [r7, #12]
 8002550:	f000 f82d 	bl	80025ae <UART_WaitOnFlagUntilTimeout>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d001      	beq.n	800255e <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e023      	b.n	80025a6 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d108      	bne.n	8002578 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	1c5a      	adds	r2, r3, #1
 800256a:	60ba      	str	r2, [r7, #8]
 800256c:	68fa      	ldr	r2, [r7, #12]
 800256e:	6812      	ldr	r2, [r2, #0]
 8002570:	6852      	ldr	r2, [r2, #4]
 8002572:	b2d2      	uxtb	r2, r2
 8002574:	701a      	strb	r2, [r3, #0]
 8002576:	e00a      	b.n	800258e <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	1c5a      	adds	r2, r3, #1
 800257c:	60ba      	str	r2, [r7, #8]
 800257e:	68fa      	ldr	r2, [r7, #12]
 8002580:	6812      	ldr	r2, [r2, #0]
 8002582:	6852      	ldr	r2, [r2, #4]
 8002584:	b2d2      	uxtb	r2, r2
 8002586:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800258a:	b2d2      	uxtb	r2, r2
 800258c:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002592:	b29b      	uxth	r3, r3
 8002594:	2b00      	cmp	r3, #0
 8002596:	d19d      	bne.n	80024d4 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2220      	movs	r2, #32
 800259c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 80025a0:	2300      	movs	r3, #0
 80025a2:	e000      	b.n	80025a6 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 80025a4:	2302      	movs	r3, #2
  }
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3718      	adds	r7, #24
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}

080025ae <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80025ae:	b580      	push	{r7, lr}
 80025b0:	b084      	sub	sp, #16
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	60f8      	str	r0, [r7, #12]
 80025b6:	60b9      	str	r1, [r7, #8]
 80025b8:	603b      	str	r3, [r7, #0]
 80025ba:	4613      	mov	r3, r2
 80025bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025be:	e02c      	b.n	800261a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025c0:	69bb      	ldr	r3, [r7, #24]
 80025c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025c6:	d028      	beq.n	800261a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d007      	beq.n	80025de <UART_WaitOnFlagUntilTimeout+0x30>
 80025ce:	f7fe fcc5 	bl	8000f5c <HAL_GetTick>
 80025d2:	4602      	mov	r2, r0
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	1ad2      	subs	r2, r2, r3
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	429a      	cmp	r2, r3
 80025dc:	d91d      	bls.n	800261a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	68fa      	ldr	r2, [r7, #12]
 80025e4:	6812      	ldr	r2, [r2, #0]
 80025e6:	68d2      	ldr	r2, [r2, #12]
 80025e8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80025ec:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	68fa      	ldr	r2, [r7, #12]
 80025f4:	6812      	ldr	r2, [r2, #0]
 80025f6:	6952      	ldr	r2, [r2, #20]
 80025f8:	f022 0201 	bic.w	r2, r2, #1
 80025fc:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2220      	movs	r2, #32
 8002602:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2220      	movs	r2, #32
 800260a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2200      	movs	r2, #0
 8002612:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e00f      	b.n	800263a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	401a      	ands	r2, r3
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	429a      	cmp	r2, r3
 8002628:	bf0c      	ite	eq
 800262a:	2301      	moveq	r3, #1
 800262c:	2300      	movne	r3, #0
 800262e:	b2db      	uxtb	r3, r3
 8002630:	461a      	mov	r2, r3
 8002632:	79fb      	ldrb	r3, [r7, #7]
 8002634:	429a      	cmp	r2, r3
 8002636:	d0c3      	beq.n	80025c0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002638:	2300      	movs	r3, #0
}
 800263a:	4618      	mov	r0, r3
 800263c:	3710      	adds	r7, #16
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
	...

08002644 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002648:	b0a3      	sub	sp, #140	; 0x8c
 800264a:	af00      	add	r7, sp, #0
 800264c:	67f8      	str	r0, [r7, #124]	; 0x7c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800264e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002650:	6819      	ldr	r1, [r3, #0]
 8002652:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	691b      	ldr	r3, [r3, #16]
 8002658:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800265c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	4313      	orrs	r3, r2
 8002662:	610b      	str	r3, [r1, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002664:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002666:	689a      	ldr	r2, [r3, #8]
 8002668:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800266a:	691b      	ldr	r3, [r3, #16]
 800266c:	431a      	orrs	r2, r3
 800266e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002670:	695b      	ldr	r3, [r3, #20]
 8002672:	431a      	orrs	r2, r3
 8002674:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002676:	69db      	ldr	r3, [r3, #28]
 8002678:	4313      	orrs	r3, r2
 800267a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  MODIFY_REG(huart->Instance->CR1,
 800267e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002680:	6819      	ldr	r1, [r3, #0]
 8002682:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	f423 4216 	bic.w	r2, r3, #38400	; 0x9600
 800268c:	f022 020c 	bic.w	r2, r2, #12
 8002690:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002694:	4313      	orrs	r3, r2
 8002696:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002698:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800269a:	6819      	ldr	r1, [r3, #0]
 800269c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	695b      	ldr	r3, [r3, #20]
 80026a2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80026a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80026a8:	699b      	ldr	r3, [r3, #24]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	614b      	str	r3, [r1, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026ae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80026b0:	69db      	ldr	r3, [r3, #28]
 80026b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026b6:	f040 8171 	bne.w	800299c <UART_SetConfig+0x358>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80026ba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4ab4      	ldr	r2, [pc, #720]	; (8002990 <UART_SetConfig+0x34c>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d005      	beq.n	80026d0 <UART_SetConfig+0x8c>
 80026c4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4ab2      	ldr	r2, [pc, #712]	; (8002994 <UART_SetConfig+0x350>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	f040 80b1 	bne.w	8002832 <UART_SetConfig+0x1ee>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80026d0:	f7ff fb1e 	bl	8001d10 <HAL_RCC_GetPCLK2Freq>
 80026d4:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80026d8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80026da:	681d      	ldr	r5, [r3, #0]
 80026dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80026e0:	4619      	mov	r1, r3
 80026e2:	f04f 0200 	mov.w	r2, #0
 80026e6:	460b      	mov	r3, r1
 80026e8:	4614      	mov	r4, r2
 80026ea:	18db      	adds	r3, r3, r3
 80026ec:	eb44 0404 	adc.w	r4, r4, r4
 80026f0:	185b      	adds	r3, r3, r1
 80026f2:	eb44 0402 	adc.w	r4, r4, r2
 80026f6:	00e0      	lsls	r0, r4, #3
 80026f8:	6478      	str	r0, [r7, #68]	; 0x44
 80026fa:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80026fc:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8002700:	6478      	str	r0, [r7, #68]	; 0x44
 8002702:	00db      	lsls	r3, r3, #3
 8002704:	643b      	str	r3, [r7, #64]	; 0x40
 8002706:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800270a:	eb13 0801 	adds.w	r8, r3, r1
 800270e:	eb44 0902 	adc.w	r9, r4, r2
 8002712:	4640      	mov	r0, r8
 8002714:	4649      	mov	r1, r9
 8002716:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	f04f 0400 	mov.w	r4, #0
 800271e:	18db      	adds	r3, r3, r3
 8002720:	eb44 0404 	adc.w	r4, r4, r4
 8002724:	461a      	mov	r2, r3
 8002726:	4623      	mov	r3, r4
 8002728:	f7fd fdb2 	bl	8000290 <__aeabi_uldivmod>
 800272c:	4603      	mov	r3, r0
 800272e:	460c      	mov	r4, r1
 8002730:	461a      	mov	r2, r3
 8002732:	4b99      	ldr	r3, [pc, #612]	; (8002998 <UART_SetConfig+0x354>)
 8002734:	fba3 2302 	umull	r2, r3, r3, r2
 8002738:	095b      	lsrs	r3, r3, #5
 800273a:	011e      	lsls	r6, r3, #4
 800273c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002740:	4619      	mov	r1, r3
 8002742:	f04f 0200 	mov.w	r2, #0
 8002746:	460b      	mov	r3, r1
 8002748:	4614      	mov	r4, r2
 800274a:	18db      	adds	r3, r3, r3
 800274c:	eb44 0404 	adc.w	r4, r4, r4
 8002750:	185b      	adds	r3, r3, r1
 8002752:	eb44 0402 	adc.w	r4, r4, r2
 8002756:	00e0      	lsls	r0, r4, #3
 8002758:	63f8      	str	r0, [r7, #60]	; 0x3c
 800275a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800275c:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8002760:	63f8      	str	r0, [r7, #60]	; 0x3c
 8002762:	00db      	lsls	r3, r3, #3
 8002764:	63bb      	str	r3, [r7, #56]	; 0x38
 8002766:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800276a:	eb13 0801 	adds.w	r8, r3, r1
 800276e:	eb44 0902 	adc.w	r9, r4, r2
 8002772:	4640      	mov	r0, r8
 8002774:	4649      	mov	r1, r9
 8002776:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f04f 0400 	mov.w	r4, #0
 800277e:	18db      	adds	r3, r3, r3
 8002780:	eb44 0404 	adc.w	r4, r4, r4
 8002784:	461a      	mov	r2, r3
 8002786:	4623      	mov	r3, r4
 8002788:	f7fd fd82 	bl	8000290 <__aeabi_uldivmod>
 800278c:	4603      	mov	r3, r0
 800278e:	460c      	mov	r4, r1
 8002790:	461a      	mov	r2, r3
 8002792:	4b81      	ldr	r3, [pc, #516]	; (8002998 <UART_SetConfig+0x354>)
 8002794:	fba3 1302 	umull	r1, r3, r3, r2
 8002798:	095b      	lsrs	r3, r3, #5
 800279a:	2164      	movs	r1, #100	; 0x64
 800279c:	fb01 f303 	mul.w	r3, r1, r3
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	00db      	lsls	r3, r3, #3
 80027a4:	3332      	adds	r3, #50	; 0x32
 80027a6:	4a7c      	ldr	r2, [pc, #496]	; (8002998 <UART_SetConfig+0x354>)
 80027a8:	fba2 2303 	umull	r2, r3, r2, r3
 80027ac:	095b      	lsrs	r3, r3, #5
 80027ae:	005b      	lsls	r3, r3, #1
 80027b0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80027b4:	441e      	add	r6, r3
 80027b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80027ba:	4619      	mov	r1, r3
 80027bc:	f04f 0200 	mov.w	r2, #0
 80027c0:	460b      	mov	r3, r1
 80027c2:	4614      	mov	r4, r2
 80027c4:	18db      	adds	r3, r3, r3
 80027c6:	eb44 0404 	adc.w	r4, r4, r4
 80027ca:	185b      	adds	r3, r3, r1
 80027cc:	eb44 0402 	adc.w	r4, r4, r2
 80027d0:	00e0      	lsls	r0, r4, #3
 80027d2:	6378      	str	r0, [r7, #52]	; 0x34
 80027d4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80027d6:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 80027da:	6378      	str	r0, [r7, #52]	; 0x34
 80027dc:	00db      	lsls	r3, r3, #3
 80027de:	633b      	str	r3, [r7, #48]	; 0x30
 80027e0:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80027e4:	eb13 0801 	adds.w	r8, r3, r1
 80027e8:	eb44 0902 	adc.w	r9, r4, r2
 80027ec:	4640      	mov	r0, r8
 80027ee:	4649      	mov	r1, r9
 80027f0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f04f 0400 	mov.w	r4, #0
 80027f8:	18db      	adds	r3, r3, r3
 80027fa:	eb44 0404 	adc.w	r4, r4, r4
 80027fe:	461a      	mov	r2, r3
 8002800:	4623      	mov	r3, r4
 8002802:	f7fd fd45 	bl	8000290 <__aeabi_uldivmod>
 8002806:	4603      	mov	r3, r0
 8002808:	460c      	mov	r4, r1
 800280a:	461a      	mov	r2, r3
 800280c:	4b62      	ldr	r3, [pc, #392]	; (8002998 <UART_SetConfig+0x354>)
 800280e:	fba3 1302 	umull	r1, r3, r3, r2
 8002812:	095b      	lsrs	r3, r3, #5
 8002814:	2164      	movs	r1, #100	; 0x64
 8002816:	fb01 f303 	mul.w	r3, r1, r3
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	00db      	lsls	r3, r3, #3
 800281e:	3332      	adds	r3, #50	; 0x32
 8002820:	4a5d      	ldr	r2, [pc, #372]	; (8002998 <UART_SetConfig+0x354>)
 8002822:	fba2 2303 	umull	r2, r3, r2, r3
 8002826:	095b      	lsrs	r3, r3, #5
 8002828:	f003 0307 	and.w	r3, r3, #7
 800282c:	4433      	add	r3, r6
 800282e:	60ab      	str	r3, [r5, #8]
 8002830:	e240      	b.n	8002cb4 <UART_SetConfig+0x670>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002832:	f7ff fa59 	bl	8001ce8 <HAL_RCC_GetPCLK1Freq>
 8002836:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800283a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	673a      	str	r2, [r7, #112]	; 0x70
 8002840:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002844:	4619      	mov	r1, r3
 8002846:	f04f 0200 	mov.w	r2, #0
 800284a:	460b      	mov	r3, r1
 800284c:	4614      	mov	r4, r2
 800284e:	18db      	adds	r3, r3, r3
 8002850:	eb44 0404 	adc.w	r4, r4, r4
 8002854:	185b      	adds	r3, r3, r1
 8002856:	eb44 0402 	adc.w	r4, r4, r2
 800285a:	00e0      	lsls	r0, r4, #3
 800285c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800285e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002860:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8002864:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002866:	00db      	lsls	r3, r3, #3
 8002868:	62bb      	str	r3, [r7, #40]	; 0x28
 800286a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800286e:	185d      	adds	r5, r3, r1
 8002870:	eb44 0602 	adc.w	r6, r4, r2
 8002874:	4628      	mov	r0, r5
 8002876:	4631      	mov	r1, r6
 8002878:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f04f 0400 	mov.w	r4, #0
 8002880:	18db      	adds	r3, r3, r3
 8002882:	eb44 0404 	adc.w	r4, r4, r4
 8002886:	461a      	mov	r2, r3
 8002888:	4623      	mov	r3, r4
 800288a:	f7fd fd01 	bl	8000290 <__aeabi_uldivmod>
 800288e:	4603      	mov	r3, r0
 8002890:	460c      	mov	r4, r1
 8002892:	461a      	mov	r2, r3
 8002894:	4b40      	ldr	r3, [pc, #256]	; (8002998 <UART_SetConfig+0x354>)
 8002896:	fba3 2302 	umull	r2, r3, r3, r2
 800289a:	095b      	lsrs	r3, r3, #5
 800289c:	011e      	lsls	r6, r3, #4
 800289e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80028a2:	4619      	mov	r1, r3
 80028a4:	f04f 0200 	mov.w	r2, #0
 80028a8:	460b      	mov	r3, r1
 80028aa:	4614      	mov	r4, r2
 80028ac:	18db      	adds	r3, r3, r3
 80028ae:	eb44 0404 	adc.w	r4, r4, r4
 80028b2:	185b      	adds	r3, r3, r1
 80028b4:	eb44 0402 	adc.w	r4, r4, r2
 80028b8:	ea4f 0bc4 	mov.w	fp, r4, lsl #3
 80028bc:	ea4b 7b53 	orr.w	fp, fp, r3, lsr #29
 80028c0:	ea4f 0ac3 	mov.w	sl, r3, lsl #3
 80028c4:	4653      	mov	r3, sl
 80028c6:	465c      	mov	r4, fp
 80028c8:	eb13 0a01 	adds.w	sl, r3, r1
 80028cc:	eb44 0b02 	adc.w	fp, r4, r2
 80028d0:	4650      	mov	r0, sl
 80028d2:	4659      	mov	r1, fp
 80028d4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f04f 0400 	mov.w	r4, #0
 80028dc:	18db      	adds	r3, r3, r3
 80028de:	eb44 0404 	adc.w	r4, r4, r4
 80028e2:	461a      	mov	r2, r3
 80028e4:	4623      	mov	r3, r4
 80028e6:	f7fd fcd3 	bl	8000290 <__aeabi_uldivmod>
 80028ea:	4603      	mov	r3, r0
 80028ec:	460c      	mov	r4, r1
 80028ee:	461a      	mov	r2, r3
 80028f0:	4b29      	ldr	r3, [pc, #164]	; (8002998 <UART_SetConfig+0x354>)
 80028f2:	fba3 1302 	umull	r1, r3, r3, r2
 80028f6:	095b      	lsrs	r3, r3, #5
 80028f8:	2164      	movs	r1, #100	; 0x64
 80028fa:	fb01 f303 	mul.w	r3, r1, r3
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	00db      	lsls	r3, r3, #3
 8002902:	3332      	adds	r3, #50	; 0x32
 8002904:	4a24      	ldr	r2, [pc, #144]	; (8002998 <UART_SetConfig+0x354>)
 8002906:	fba2 2303 	umull	r2, r3, r2, r3
 800290a:	095b      	lsrs	r3, r3, #5
 800290c:	005b      	lsls	r3, r3, #1
 800290e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002912:	441e      	add	r6, r3
 8002914:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002918:	4619      	mov	r1, r3
 800291a:	f04f 0200 	mov.w	r2, #0
 800291e:	460b      	mov	r3, r1
 8002920:	4614      	mov	r4, r2
 8002922:	18db      	adds	r3, r3, r3
 8002924:	eb44 0404 	adc.w	r4, r4, r4
 8002928:	185b      	adds	r3, r3, r1
 800292a:	eb44 0402 	adc.w	r4, r4, r2
 800292e:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 8002932:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 8002936:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 800293a:	4643      	mov	r3, r8
 800293c:	464c      	mov	r4, r9
 800293e:	eb13 0801 	adds.w	r8, r3, r1
 8002942:	eb44 0902 	adc.w	r9, r4, r2
 8002946:	4640      	mov	r0, r8
 8002948:	4649      	mov	r1, r9
 800294a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f04f 0400 	mov.w	r4, #0
 8002952:	18db      	adds	r3, r3, r3
 8002954:	eb44 0404 	adc.w	r4, r4, r4
 8002958:	461a      	mov	r2, r3
 800295a:	4623      	mov	r3, r4
 800295c:	f7fd fc98 	bl	8000290 <__aeabi_uldivmod>
 8002960:	4603      	mov	r3, r0
 8002962:	460c      	mov	r4, r1
 8002964:	461a      	mov	r2, r3
 8002966:	4b0c      	ldr	r3, [pc, #48]	; (8002998 <UART_SetConfig+0x354>)
 8002968:	fba3 1302 	umull	r1, r3, r3, r2
 800296c:	095b      	lsrs	r3, r3, #5
 800296e:	2164      	movs	r1, #100	; 0x64
 8002970:	fb01 f303 	mul.w	r3, r1, r3
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	00db      	lsls	r3, r3, #3
 8002978:	3332      	adds	r3, #50	; 0x32
 800297a:	4a07      	ldr	r2, [pc, #28]	; (8002998 <UART_SetConfig+0x354>)
 800297c:	fba2 2303 	umull	r2, r3, r2, r3
 8002980:	095b      	lsrs	r3, r3, #5
 8002982:	f003 0307 	and.w	r3, r3, #7
 8002986:	4433      	add	r3, r6
 8002988:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800298a:	6093      	str	r3, [r2, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800298c:	e192      	b.n	8002cb4 <UART_SetConfig+0x670>
 800298e:	bf00      	nop
 8002990:	40011000 	.word	0x40011000
 8002994:	40011400 	.word	0x40011400
 8002998:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800299c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	4bc1      	ldr	r3, [pc, #772]	; (8002ca8 <UART_SetConfig+0x664>)
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d005      	beq.n	80029b2 <UART_SetConfig+0x36e>
 80029a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	4bc0      	ldr	r3, [pc, #768]	; (8002cac <UART_SetConfig+0x668>)
 80029ac:	429a      	cmp	r2, r3
 80029ae:	f040 80bf 	bne.w	8002b30 <UART_SetConfig+0x4ec>
      pclk = HAL_RCC_GetPCLK2Freq();
 80029b2:	f7ff f9ad 	bl	8001d10 <HAL_RCC_GetPCLK2Freq>
 80029b6:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80029ba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80029bc:	681e      	ldr	r6, [r3, #0]
 80029be:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80029c2:	4619      	mov	r1, r3
 80029c4:	f04f 0200 	mov.w	r2, #0
 80029c8:	460b      	mov	r3, r1
 80029ca:	4614      	mov	r4, r2
 80029cc:	18db      	adds	r3, r3, r3
 80029ce:	eb44 0404 	adc.w	r4, r4, r4
 80029d2:	185b      	adds	r3, r3, r1
 80029d4:	eb44 0402 	adc.w	r4, r4, r2
 80029d8:	00e0      	lsls	r0, r4, #3
 80029da:	6278      	str	r0, [r7, #36]	; 0x24
 80029dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80029de:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 80029e2:	6278      	str	r0, [r7, #36]	; 0x24
 80029e4:	00db      	lsls	r3, r3, #3
 80029e6:	623b      	str	r3, [r7, #32]
 80029e8:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80029ec:	eb13 0801 	adds.w	r8, r3, r1
 80029f0:	eb44 0902 	adc.w	r9, r4, r2
 80029f4:	4640      	mov	r0, r8
 80029f6:	4649      	mov	r1, r9
 80029f8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f04f 0400 	mov.w	r4, #0
 8002a00:	00a2      	lsls	r2, r4, #2
 8002a02:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002a04:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002a06:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8002a0a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	65bb      	str	r3, [r7, #88]	; 0x58
 8002a10:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002a14:	f7fd fc3c 	bl	8000290 <__aeabi_uldivmod>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	460c      	mov	r4, r1
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	4ba4      	ldr	r3, [pc, #656]	; (8002cb0 <UART_SetConfig+0x66c>)
 8002a20:	fba3 2302 	umull	r2, r3, r3, r2
 8002a24:	095b      	lsrs	r3, r3, #5
 8002a26:	011d      	lsls	r5, r3, #4
 8002a28:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	f04f 0200 	mov.w	r2, #0
 8002a32:	460b      	mov	r3, r1
 8002a34:	4614      	mov	r4, r2
 8002a36:	18db      	adds	r3, r3, r3
 8002a38:	eb44 0404 	adc.w	r4, r4, r4
 8002a3c:	185b      	adds	r3, r3, r1
 8002a3e:	eb44 0402 	adc.w	r4, r4, r2
 8002a42:	00e0      	lsls	r0, r4, #3
 8002a44:	61f8      	str	r0, [r7, #28]
 8002a46:	69f8      	ldr	r0, [r7, #28]
 8002a48:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8002a4c:	61f8      	str	r0, [r7, #28]
 8002a4e:	00db      	lsls	r3, r3, #3
 8002a50:	61bb      	str	r3, [r7, #24]
 8002a52:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8002a56:	eb13 0801 	adds.w	r8, r3, r1
 8002a5a:	eb44 0902 	adc.w	r9, r4, r2
 8002a5e:	4640      	mov	r0, r8
 8002a60:	4649      	mov	r1, r9
 8002a62:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f04f 0400 	mov.w	r4, #0
 8002a6a:	00a2      	lsls	r2, r4, #2
 8002a6c:	657a      	str	r2, [r7, #84]	; 0x54
 8002a6e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002a70:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8002a74:	657a      	str	r2, [r7, #84]	; 0x54
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	653b      	str	r3, [r7, #80]	; 0x50
 8002a7a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002a7e:	f7fd fc07 	bl	8000290 <__aeabi_uldivmod>
 8002a82:	4603      	mov	r3, r0
 8002a84:	460c      	mov	r4, r1
 8002a86:	461a      	mov	r2, r3
 8002a88:	4b89      	ldr	r3, [pc, #548]	; (8002cb0 <UART_SetConfig+0x66c>)
 8002a8a:	fba3 1302 	umull	r1, r3, r3, r2
 8002a8e:	095b      	lsrs	r3, r3, #5
 8002a90:	2164      	movs	r1, #100	; 0x64
 8002a92:	fb01 f303 	mul.w	r3, r1, r3
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	011b      	lsls	r3, r3, #4
 8002a9a:	3332      	adds	r3, #50	; 0x32
 8002a9c:	4a84      	ldr	r2, [pc, #528]	; (8002cb0 <UART_SetConfig+0x66c>)
 8002a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002aa2:	095b      	lsrs	r3, r3, #5
 8002aa4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002aa8:	441d      	add	r5, r3
 8002aaa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002aae:	4619      	mov	r1, r3
 8002ab0:	f04f 0200 	mov.w	r2, #0
 8002ab4:	460b      	mov	r3, r1
 8002ab6:	4614      	mov	r4, r2
 8002ab8:	18db      	adds	r3, r3, r3
 8002aba:	eb44 0404 	adc.w	r4, r4, r4
 8002abe:	185b      	adds	r3, r3, r1
 8002ac0:	eb44 0402 	adc.w	r4, r4, r2
 8002ac4:	00e0      	lsls	r0, r4, #3
 8002ac6:	6178      	str	r0, [r7, #20]
 8002ac8:	6978      	ldr	r0, [r7, #20]
 8002aca:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8002ace:	6178      	str	r0, [r7, #20]
 8002ad0:	00db      	lsls	r3, r3, #3
 8002ad2:	613b      	str	r3, [r7, #16]
 8002ad4:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002ad8:	eb13 0801 	adds.w	r8, r3, r1
 8002adc:	eb44 0902 	adc.w	r9, r4, r2
 8002ae0:	4640      	mov	r0, r8
 8002ae2:	4649      	mov	r1, r9
 8002ae4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f04f 0400 	mov.w	r4, #0
 8002aec:	00a2      	lsls	r2, r4, #2
 8002aee:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002af0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002af2:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8002af6:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	64bb      	str	r3, [r7, #72]	; 0x48
 8002afc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002b00:	f7fd fbc6 	bl	8000290 <__aeabi_uldivmod>
 8002b04:	4603      	mov	r3, r0
 8002b06:	460c      	mov	r4, r1
 8002b08:	461a      	mov	r2, r3
 8002b0a:	4b69      	ldr	r3, [pc, #420]	; (8002cb0 <UART_SetConfig+0x66c>)
 8002b0c:	fba3 1302 	umull	r1, r3, r3, r2
 8002b10:	095b      	lsrs	r3, r3, #5
 8002b12:	2164      	movs	r1, #100	; 0x64
 8002b14:	fb01 f303 	mul.w	r3, r1, r3
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	011b      	lsls	r3, r3, #4
 8002b1c:	3332      	adds	r3, #50	; 0x32
 8002b1e:	4a64      	ldr	r2, [pc, #400]	; (8002cb0 <UART_SetConfig+0x66c>)
 8002b20:	fba2 2303 	umull	r2, r3, r2, r3
 8002b24:	095b      	lsrs	r3, r3, #5
 8002b26:	f003 030f 	and.w	r3, r3, #15
 8002b2a:	442b      	add	r3, r5
 8002b2c:	60b3      	str	r3, [r6, #8]
 8002b2e:	e0c1      	b.n	8002cb4 <UART_SetConfig+0x670>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002b30:	f7ff f8da 	bl	8001ce8 <HAL_RCC_GetPCLK1Freq>
 8002b34:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b38:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	65bb      	str	r3, [r7, #88]	; 0x58
 8002b3e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002b42:	4619      	mov	r1, r3
 8002b44:	f04f 0200 	mov.w	r2, #0
 8002b48:	460b      	mov	r3, r1
 8002b4a:	4614      	mov	r4, r2
 8002b4c:	18db      	adds	r3, r3, r3
 8002b4e:	eb44 0404 	adc.w	r4, r4, r4
 8002b52:	185b      	adds	r3, r3, r1
 8002b54:	eb44 0402 	adc.w	r4, r4, r2
 8002b58:	00e6      	lsls	r6, r4, #3
 8002b5a:	ea46 7653 	orr.w	r6, r6, r3, lsr #29
 8002b5e:	00dd      	lsls	r5, r3, #3
 8002b60:	462b      	mov	r3, r5
 8002b62:	4634      	mov	r4, r6
 8002b64:	185d      	adds	r5, r3, r1
 8002b66:	eb44 0602 	adc.w	r6, r4, r2
 8002b6a:	4628      	mov	r0, r5
 8002b6c:	4631      	mov	r1, r6
 8002b6e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	f04f 0400 	mov.w	r4, #0
 8002b76:	00a5      	lsls	r5, r4, #2
 8002b78:	677d      	str	r5, [r7, #116]	; 0x74
 8002b7a:	6f7d      	ldr	r5, [r7, #116]	; 0x74
 8002b7c:	ea45 7593 	orr.w	r5, r5, r3, lsr #30
 8002b80:	677d      	str	r5, [r7, #116]	; 0x74
 8002b82:	009c      	lsls	r4, r3, #2
 8002b84:	673c      	str	r4, [r7, #112]	; 0x70
 8002b86:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002b8a:	f7fd fb81 	bl	8000290 <__aeabi_uldivmod>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	460c      	mov	r4, r1
 8002b92:	461a      	mov	r2, r3
 8002b94:	4b46      	ldr	r3, [pc, #280]	; (8002cb0 <UART_SetConfig+0x66c>)
 8002b96:	fba3 1302 	umull	r1, r3, r3, r2
 8002b9a:	095b      	lsrs	r3, r3, #5
 8002b9c:	011d      	lsls	r5, r3, #4
 8002b9e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	f04f 0200 	mov.w	r2, #0
 8002ba8:	460b      	mov	r3, r1
 8002baa:	4614      	mov	r4, r2
 8002bac:	18db      	adds	r3, r3, r3
 8002bae:	eb44 0404 	adc.w	r4, r4, r4
 8002bb2:	185b      	adds	r3, r3, r1
 8002bb4:	eb44 0402 	adc.w	r4, r4, r2
 8002bb8:	00e0      	lsls	r0, r4, #3
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	68f8      	ldr	r0, [r7, #12]
 8002bbe:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	00d8      	lsls	r0, r3, #3
 8002bc6:	60b8      	str	r0, [r7, #8]
 8002bc8:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002bcc:	eb13 0801 	adds.w	r8, r3, r1
 8002bd0:	eb44 0902 	adc.w	r9, r4, r2
 8002bd4:	4640      	mov	r0, r8
 8002bd6:	4649      	mov	r1, r9
 8002bd8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f04f 0400 	mov.w	r4, #0
 8002be0:	00a6      	lsls	r6, r4, #2
 8002be2:	66fe      	str	r6, [r7, #108]	; 0x6c
 8002be4:	6efe      	ldr	r6, [r7, #108]	; 0x6c
 8002be6:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
 8002bea:	66fe      	str	r6, [r7, #108]	; 0x6c
 8002bec:	009c      	lsls	r4, r3, #2
 8002bee:	66bc      	str	r4, [r7, #104]	; 0x68
 8002bf0:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8002bf4:	f7fd fb4c 	bl	8000290 <__aeabi_uldivmod>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	460c      	mov	r4, r1
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	4b2c      	ldr	r3, [pc, #176]	; (8002cb0 <UART_SetConfig+0x66c>)
 8002c00:	fba3 1302 	umull	r1, r3, r3, r2
 8002c04:	095b      	lsrs	r3, r3, #5
 8002c06:	2164      	movs	r1, #100	; 0x64
 8002c08:	fb01 f303 	mul.w	r3, r1, r3
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	011b      	lsls	r3, r3, #4
 8002c10:	3332      	adds	r3, #50	; 0x32
 8002c12:	4a27      	ldr	r2, [pc, #156]	; (8002cb0 <UART_SetConfig+0x66c>)
 8002c14:	fba2 1303 	umull	r1, r3, r2, r3
 8002c18:	095b      	lsrs	r3, r3, #5
 8002c1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c1e:	441d      	add	r5, r3
 8002c20:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002c24:	4619      	mov	r1, r3
 8002c26:	f04f 0200 	mov.w	r2, #0
 8002c2a:	460b      	mov	r3, r1
 8002c2c:	4614      	mov	r4, r2
 8002c2e:	18db      	adds	r3, r3, r3
 8002c30:	eb44 0404 	adc.w	r4, r4, r4
 8002c34:	185b      	adds	r3, r3, r1
 8002c36:	eb44 0402 	adc.w	r4, r4, r2
 8002c3a:	00e0      	lsls	r0, r4, #3
 8002c3c:	6078      	str	r0, [r7, #4]
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8002c44:	6078      	str	r0, [r7, #4]
 8002c46:	00d8      	lsls	r0, r3, #3
 8002c48:	6038      	str	r0, [r7, #0]
 8002c4a:	e897 0018 	ldmia.w	r7, {r3, r4}
 8002c4e:	eb13 0801 	adds.w	r8, r3, r1
 8002c52:	eb44 0902 	adc.w	r9, r4, r2
 8002c56:	4640      	mov	r0, r8
 8002c58:	4649      	mov	r1, r9
 8002c5a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f04f 0400 	mov.w	r4, #0
 8002c62:	00a6      	lsls	r6, r4, #2
 8002c64:	667e      	str	r6, [r7, #100]	; 0x64
 8002c66:	6e7e      	ldr	r6, [r7, #100]	; 0x64
 8002c68:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
 8002c6c:	667e      	str	r6, [r7, #100]	; 0x64
 8002c6e:	009c      	lsls	r4, r3, #2
 8002c70:	663c      	str	r4, [r7, #96]	; 0x60
 8002c72:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002c76:	f7fd fb0b 	bl	8000290 <__aeabi_uldivmod>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	460c      	mov	r4, r1
 8002c7e:	461a      	mov	r2, r3
 8002c80:	4b0b      	ldr	r3, [pc, #44]	; (8002cb0 <UART_SetConfig+0x66c>)
 8002c82:	fba3 1302 	umull	r1, r3, r3, r2
 8002c86:	095b      	lsrs	r3, r3, #5
 8002c88:	2164      	movs	r1, #100	; 0x64
 8002c8a:	fb01 f303 	mul.w	r3, r1, r3
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	011b      	lsls	r3, r3, #4
 8002c92:	3332      	adds	r3, #50	; 0x32
 8002c94:	4a06      	ldr	r2, [pc, #24]	; (8002cb0 <UART_SetConfig+0x66c>)
 8002c96:	fba2 1303 	umull	r1, r3, r2, r3
 8002c9a:	095b      	lsrs	r3, r3, #5
 8002c9c:	f003 030f 	and.w	r3, r3, #15
 8002ca0:	442b      	add	r3, r5
 8002ca2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002ca4:	6093      	str	r3, [r2, #8]
}
 8002ca6:	e005      	b.n	8002cb4 <UART_SetConfig+0x670>
 8002ca8:	40011000 	.word	0x40011000
 8002cac:	40011400 	.word	0x40011400
 8002cb0:	51eb851f 	.word	0x51eb851f
 8002cb4:	bf00      	nop
 8002cb6:	378c      	adds	r7, #140	; 0x8c
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002cbe:	bf00      	nop

08002cc0 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b084      	sub	sp, #16
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8002cc8:	4b22      	ldr	r3, [pc, #136]	; (8002d54 <WIZCHIP_READ+0x94>)
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	4798      	blx	r3
   WIZCHIP.CS._select();
 8002cce:	4b21      	ldr	r3, [pc, #132]	; (8002d54 <WIZCHIP_READ+0x94>)
 8002cd0:	695b      	ldr	r3, [r3, #20]
 8002cd2:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8002cd4:	4b1f      	ldr	r3, [pc, #124]	; (8002d54 <WIZCHIP_READ+0x94>)
 8002cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d003      	beq.n	8002ce4 <WIZCHIP_READ+0x24>
 8002cdc:	4b1d      	ldr	r3, [pc, #116]	; (8002d54 <WIZCHIP_READ+0x94>)
 8002cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d114      	bne.n	8002d0e <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8002ce4:	4b1b      	ldr	r3, [pc, #108]	; (8002d54 <WIZCHIP_READ+0x94>)
 8002ce6:	6a1b      	ldr	r3, [r3, #32]
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	0c12      	lsrs	r2, r2, #16
 8002cec:	b2d2      	uxtb	r2, r2
 8002cee:	4610      	mov	r0, r2
 8002cf0:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8002cf2:	4b18      	ldr	r3, [pc, #96]	; (8002d54 <WIZCHIP_READ+0x94>)
 8002cf4:	6a1b      	ldr	r3, [r3, #32]
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	0a12      	lsrs	r2, r2, #8
 8002cfa:	b2d2      	uxtb	r2, r2
 8002cfc:	4610      	mov	r0, r2
 8002cfe:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8002d00:	4b14      	ldr	r3, [pc, #80]	; (8002d54 <WIZCHIP_READ+0x94>)
 8002d02:	6a1b      	ldr	r3, [r3, #32]
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	b2d2      	uxtb	r2, r2
 8002d08:	4610      	mov	r0, r2
 8002d0a:	4798      	blx	r3
 8002d0c:	e011      	b.n	8002d32 <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	0c1b      	lsrs	r3, r3, #16
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	0a1b      	lsrs	r3, r3, #8
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8002d24:	4b0b      	ldr	r3, [pc, #44]	; (8002d54 <WIZCHIP_READ+0x94>)
 8002d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d28:	f107 020c 	add.w	r2, r7, #12
 8002d2c:	2103      	movs	r1, #3
 8002d2e:	4610      	mov	r0, r2
 8002d30:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 8002d32:	4b08      	ldr	r3, [pc, #32]	; (8002d54 <WIZCHIP_READ+0x94>)
 8002d34:	69db      	ldr	r3, [r3, #28]
 8002d36:	4798      	blx	r3
 8002d38:	4603      	mov	r3, r0
 8002d3a:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 8002d3c:	4b05      	ldr	r3, [pc, #20]	; (8002d54 <WIZCHIP_READ+0x94>)
 8002d3e:	699b      	ldr	r3, [r3, #24]
 8002d40:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8002d42:	4b04      	ldr	r3, [pc, #16]	; (8002d54 <WIZCHIP_READ+0x94>)
 8002d44:	691b      	ldr	r3, [r3, #16]
 8002d46:	4798      	blx	r3
   return ret;
 8002d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3710      	adds	r7, #16
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	20000024 	.word	0x20000024

08002d58 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	460b      	mov	r3, r1
 8002d62:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8002d64:	4b22      	ldr	r3, [pc, #136]	; (8002df0 <WIZCHIP_WRITE+0x98>)
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	4798      	blx	r3
   WIZCHIP.CS._select();
 8002d6a:	4b21      	ldr	r3, [pc, #132]	; (8002df0 <WIZCHIP_WRITE+0x98>)
 8002d6c:	695b      	ldr	r3, [r3, #20]
 8002d6e:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	f043 0304 	orr.w	r3, r3, #4
 8002d76:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8002d78:	4b1d      	ldr	r3, [pc, #116]	; (8002df0 <WIZCHIP_WRITE+0x98>)
 8002d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d119      	bne.n	8002db4 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8002d80:	4b1b      	ldr	r3, [pc, #108]	; (8002df0 <WIZCHIP_WRITE+0x98>)
 8002d82:	6a1b      	ldr	r3, [r3, #32]
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	0c12      	lsrs	r2, r2, #16
 8002d88:	b2d2      	uxtb	r2, r2
 8002d8a:	4610      	mov	r0, r2
 8002d8c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8002d8e:	4b18      	ldr	r3, [pc, #96]	; (8002df0 <WIZCHIP_WRITE+0x98>)
 8002d90:	6a1b      	ldr	r3, [r3, #32]
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	0a12      	lsrs	r2, r2, #8
 8002d96:	b2d2      	uxtb	r2, r2
 8002d98:	4610      	mov	r0, r2
 8002d9a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8002d9c:	4b14      	ldr	r3, [pc, #80]	; (8002df0 <WIZCHIP_WRITE+0x98>)
 8002d9e:	6a1b      	ldr	r3, [r3, #32]
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	b2d2      	uxtb	r2, r2
 8002da4:	4610      	mov	r0, r2
 8002da6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8002da8:	4b11      	ldr	r3, [pc, #68]	; (8002df0 <WIZCHIP_WRITE+0x98>)
 8002daa:	6a1b      	ldr	r3, [r3, #32]
 8002dac:	78fa      	ldrb	r2, [r7, #3]
 8002dae:	4610      	mov	r0, r2
 8002db0:	4798      	blx	r3
 8002db2:	e013      	b.n	8002ddc <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	0c1b      	lsrs	r3, r3, #16
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	0a1b      	lsrs	r3, r3, #8
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 8002dca:	78fb      	ldrb	r3, [r7, #3]
 8002dcc:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8002dce:	4b08      	ldr	r3, [pc, #32]	; (8002df0 <WIZCHIP_WRITE+0x98>)
 8002dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd2:	f107 020c 	add.w	r2, r7, #12
 8002dd6:	2104      	movs	r1, #4
 8002dd8:	4610      	mov	r0, r2
 8002dda:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8002ddc:	4b04      	ldr	r3, [pc, #16]	; (8002df0 <WIZCHIP_WRITE+0x98>)
 8002dde:	699b      	ldr	r3, [r3, #24]
 8002de0:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8002de2:	4b03      	ldr	r3, [pc, #12]	; (8002df0 <WIZCHIP_WRITE+0x98>)
 8002de4:	691b      	ldr	r3, [r3, #16]
 8002de6:	4798      	blx	r3
}
 8002de8:	bf00      	nop
 8002dea:	3710      	adds	r7, #16
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	20000024 	.word	0x20000024

08002df4 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8002df4:	b590      	push	{r4, r7, lr}
 8002df6:	b087      	sub	sp, #28
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	60f8      	str	r0, [r7, #12]
 8002dfc:	60b9      	str	r1, [r7, #8]
 8002dfe:	4613      	mov	r3, r2
 8002e00:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8002e02:	4b2b      	ldr	r3, [pc, #172]	; (8002eb0 <WIZCHIP_READ_BUF+0xbc>)
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	4798      	blx	r3
   WIZCHIP.CS._select();
 8002e08:	4b29      	ldr	r3, [pc, #164]	; (8002eb0 <WIZCHIP_READ_BUF+0xbc>)
 8002e0a:	695b      	ldr	r3, [r3, #20]
 8002e0c:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8002e0e:	4b28      	ldr	r3, [pc, #160]	; (8002eb0 <WIZCHIP_READ_BUF+0xbc>)
 8002e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d003      	beq.n	8002e1e <WIZCHIP_READ_BUF+0x2a>
 8002e16:	4b26      	ldr	r3, [pc, #152]	; (8002eb0 <WIZCHIP_READ_BUF+0xbc>)
 8002e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d126      	bne.n	8002e6c <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8002e1e:	4b24      	ldr	r3, [pc, #144]	; (8002eb0 <WIZCHIP_READ_BUF+0xbc>)
 8002e20:	6a1b      	ldr	r3, [r3, #32]
 8002e22:	68fa      	ldr	r2, [r7, #12]
 8002e24:	0c12      	lsrs	r2, r2, #16
 8002e26:	b2d2      	uxtb	r2, r2
 8002e28:	4610      	mov	r0, r2
 8002e2a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8002e2c:	4b20      	ldr	r3, [pc, #128]	; (8002eb0 <WIZCHIP_READ_BUF+0xbc>)
 8002e2e:	6a1b      	ldr	r3, [r3, #32]
 8002e30:	68fa      	ldr	r2, [r7, #12]
 8002e32:	0a12      	lsrs	r2, r2, #8
 8002e34:	b2d2      	uxtb	r2, r2
 8002e36:	4610      	mov	r0, r2
 8002e38:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8002e3a:	4b1d      	ldr	r3, [pc, #116]	; (8002eb0 <WIZCHIP_READ_BUF+0xbc>)
 8002e3c:	6a1b      	ldr	r3, [r3, #32]
 8002e3e:	68fa      	ldr	r2, [r7, #12]
 8002e40:	b2d2      	uxtb	r2, r2
 8002e42:	4610      	mov	r0, r2
 8002e44:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8002e46:	2300      	movs	r3, #0
 8002e48:	82fb      	strh	r3, [r7, #22]
 8002e4a:	e00a      	b.n	8002e62 <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8002e4c:	8afb      	ldrh	r3, [r7, #22]
 8002e4e:	68ba      	ldr	r2, [r7, #8]
 8002e50:	18d4      	adds	r4, r2, r3
 8002e52:	4b17      	ldr	r3, [pc, #92]	; (8002eb0 <WIZCHIP_READ_BUF+0xbc>)
 8002e54:	69db      	ldr	r3, [r3, #28]
 8002e56:	4798      	blx	r3
 8002e58:	4603      	mov	r3, r0
 8002e5a:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8002e5c:	8afb      	ldrh	r3, [r7, #22]
 8002e5e:	3301      	adds	r3, #1
 8002e60:	82fb      	strh	r3, [r7, #22]
 8002e62:	8afa      	ldrh	r2, [r7, #22]
 8002e64:	88fb      	ldrh	r3, [r7, #6]
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d3f0      	bcc.n	8002e4c <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8002e6a:	e017      	b.n	8002e9c <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	0c1b      	lsrs	r3, r3, #16
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	0a1b      	lsrs	r3, r3, #8
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8002e82:	4b0b      	ldr	r3, [pc, #44]	; (8002eb0 <WIZCHIP_READ_BUF+0xbc>)
 8002e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e86:	f107 0210 	add.w	r2, r7, #16
 8002e8a:	2103      	movs	r1, #3
 8002e8c:	4610      	mov	r0, r2
 8002e8e:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8002e90:	4b07      	ldr	r3, [pc, #28]	; (8002eb0 <WIZCHIP_READ_BUF+0xbc>)
 8002e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e94:	88fa      	ldrh	r2, [r7, #6]
 8002e96:	4611      	mov	r1, r2
 8002e98:	68b8      	ldr	r0, [r7, #8]
 8002e9a:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8002e9c:	4b04      	ldr	r3, [pc, #16]	; (8002eb0 <WIZCHIP_READ_BUF+0xbc>)
 8002e9e:	699b      	ldr	r3, [r3, #24]
 8002ea0:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8002ea2:	4b03      	ldr	r3, [pc, #12]	; (8002eb0 <WIZCHIP_READ_BUF+0xbc>)
 8002ea4:	691b      	ldr	r3, [r3, #16]
 8002ea6:	4798      	blx	r3
}
 8002ea8:	bf00      	nop
 8002eaa:	371c      	adds	r7, #28
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd90      	pop	{r4, r7, pc}
 8002eb0:	20000024 	.word	0x20000024

08002eb4 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b086      	sub	sp, #24
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	60f8      	str	r0, [r7, #12]
 8002ebc:	60b9      	str	r1, [r7, #8]
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8002ec2:	4b2b      	ldr	r3, [pc, #172]	; (8002f70 <WIZCHIP_WRITE_BUF+0xbc>)
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	4798      	blx	r3
   WIZCHIP.CS._select();
 8002ec8:	4b29      	ldr	r3, [pc, #164]	; (8002f70 <WIZCHIP_WRITE_BUF+0xbc>)
 8002eca:	695b      	ldr	r3, [r3, #20]
 8002ecc:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	f043 0304 	orr.w	r3, r3, #4
 8002ed4:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8002ed6:	4b26      	ldr	r3, [pc, #152]	; (8002f70 <WIZCHIP_WRITE_BUF+0xbc>)
 8002ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d126      	bne.n	8002f2c <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8002ede:	4b24      	ldr	r3, [pc, #144]	; (8002f70 <WIZCHIP_WRITE_BUF+0xbc>)
 8002ee0:	6a1b      	ldr	r3, [r3, #32]
 8002ee2:	68fa      	ldr	r2, [r7, #12]
 8002ee4:	0c12      	lsrs	r2, r2, #16
 8002ee6:	b2d2      	uxtb	r2, r2
 8002ee8:	4610      	mov	r0, r2
 8002eea:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8002eec:	4b20      	ldr	r3, [pc, #128]	; (8002f70 <WIZCHIP_WRITE_BUF+0xbc>)
 8002eee:	6a1b      	ldr	r3, [r3, #32]
 8002ef0:	68fa      	ldr	r2, [r7, #12]
 8002ef2:	0a12      	lsrs	r2, r2, #8
 8002ef4:	b2d2      	uxtb	r2, r2
 8002ef6:	4610      	mov	r0, r2
 8002ef8:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8002efa:	4b1d      	ldr	r3, [pc, #116]	; (8002f70 <WIZCHIP_WRITE_BUF+0xbc>)
 8002efc:	6a1b      	ldr	r3, [r3, #32]
 8002efe:	68fa      	ldr	r2, [r7, #12]
 8002f00:	b2d2      	uxtb	r2, r2
 8002f02:	4610      	mov	r0, r2
 8002f04:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8002f06:	2300      	movs	r3, #0
 8002f08:	82fb      	strh	r3, [r7, #22]
 8002f0a:	e00a      	b.n	8002f22 <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8002f0c:	4b18      	ldr	r3, [pc, #96]	; (8002f70 <WIZCHIP_WRITE_BUF+0xbc>)
 8002f0e:	6a1b      	ldr	r3, [r3, #32]
 8002f10:	8afa      	ldrh	r2, [r7, #22]
 8002f12:	68b9      	ldr	r1, [r7, #8]
 8002f14:	440a      	add	r2, r1
 8002f16:	7812      	ldrb	r2, [r2, #0]
 8002f18:	4610      	mov	r0, r2
 8002f1a:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8002f1c:	8afb      	ldrh	r3, [r7, #22]
 8002f1e:	3301      	adds	r3, #1
 8002f20:	82fb      	strh	r3, [r7, #22]
 8002f22:	8afa      	ldrh	r2, [r7, #22]
 8002f24:	88fb      	ldrh	r3, [r7, #6]
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d3f0      	bcc.n	8002f0c <WIZCHIP_WRITE_BUF+0x58>
 8002f2a:	e017      	b.n	8002f5c <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	0c1b      	lsrs	r3, r3, #16
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	0a1b      	lsrs	r3, r3, #8
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8002f42:	4b0b      	ldr	r3, [pc, #44]	; (8002f70 <WIZCHIP_WRITE_BUF+0xbc>)
 8002f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f46:	f107 0210 	add.w	r2, r7, #16
 8002f4a:	2103      	movs	r1, #3
 8002f4c:	4610      	mov	r0, r2
 8002f4e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8002f50:	4b07      	ldr	r3, [pc, #28]	; (8002f70 <WIZCHIP_WRITE_BUF+0xbc>)
 8002f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f54:	88fa      	ldrh	r2, [r7, #6]
 8002f56:	4611      	mov	r1, r2
 8002f58:	68b8      	ldr	r0, [r7, #8]
 8002f5a:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8002f5c:	4b04      	ldr	r3, [pc, #16]	; (8002f70 <WIZCHIP_WRITE_BUF+0xbc>)
 8002f5e:	699b      	ldr	r3, [r3, #24]
 8002f60:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8002f62:	4b03      	ldr	r3, [pc, #12]	; (8002f70 <WIZCHIP_WRITE_BUF+0xbc>)
 8002f64:	691b      	ldr	r3, [r3, #16]
 8002f66:	4798      	blx	r3
}
 8002f68:	bf00      	nop
 8002f6a:	3718      	adds	r7, #24
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	20000024 	.word	0x20000024

08002f74 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8002f74:	b590      	push	{r4, r7, lr}
 8002f76:	b085      	sub	sp, #20
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	81fb      	strh	r3, [r7, #14]
 8002f82:	2300      	movs	r3, #0
 8002f84:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8002f86:	79fb      	ldrb	r3, [r7, #7]
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	3301      	adds	r3, #1
 8002f8c:	00db      	lsls	r3, r3, #3
 8002f8e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002f92:	4618      	mov	r0, r3
 8002f94:	f7ff fe94 	bl	8002cc0 <WIZCHIP_READ>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8002f9c:	89bb      	ldrh	r3, [r7, #12]
 8002f9e:	021b      	lsls	r3, r3, #8
 8002fa0:	b29c      	uxth	r4, r3
 8002fa2:	79fb      	ldrb	r3, [r7, #7]
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	3301      	adds	r3, #1
 8002fa8:	00db      	lsls	r3, r3, #3
 8002faa:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f7ff fe86 	bl	8002cc0 <WIZCHIP_READ>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	4423      	add	r3, r4
 8002fba:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8002fbc:	89bb      	ldrh	r3, [r7, #12]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d01a      	beq.n	8002ff8 <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8002fc2:	79fb      	ldrb	r3, [r7, #7]
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	00db      	lsls	r3, r3, #3
 8002fca:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7ff fe76 	bl	8002cc0 <WIZCHIP_READ>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8002fd8:	89fb      	ldrh	r3, [r7, #14]
 8002fda:	021b      	lsls	r3, r3, #8
 8002fdc:	b29c      	uxth	r4, r3
 8002fde:	79fb      	ldrb	r3, [r7, #7]
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	3301      	adds	r3, #1
 8002fe4:	00db      	lsls	r3, r3, #3
 8002fe6:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8002fea:	4618      	mov	r0, r3
 8002fec:	f7ff fe68 	bl	8002cc0 <WIZCHIP_READ>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	4423      	add	r3, r4
 8002ff6:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8002ff8:	89fa      	ldrh	r2, [r7, #14]
 8002ffa:	89bb      	ldrh	r3, [r7, #12]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d1c2      	bne.n	8002f86 <getSn_TX_FSR+0x12>
   return val;
 8003000:	89fb      	ldrh	r3, [r7, #14]
}
 8003002:	4618      	mov	r0, r3
 8003004:	3714      	adds	r7, #20
 8003006:	46bd      	mov	sp, r7
 8003008:	bd90      	pop	{r4, r7, pc}

0800300a <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 800300a:	b590      	push	{r4, r7, lr}
 800300c:	b085      	sub	sp, #20
 800300e:	af00      	add	r7, sp, #0
 8003010:	4603      	mov	r3, r0
 8003012:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8003014:	2300      	movs	r3, #0
 8003016:	81fb      	strh	r3, [r7, #14]
 8003018:	2300      	movs	r3, #0
 800301a:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 800301c:	79fb      	ldrb	r3, [r7, #7]
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	3301      	adds	r3, #1
 8003022:	00db      	lsls	r3, r3, #3
 8003024:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8003028:	4618      	mov	r0, r3
 800302a:	f7ff fe49 	bl	8002cc0 <WIZCHIP_READ>
 800302e:	4603      	mov	r3, r0
 8003030:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8003032:	89bb      	ldrh	r3, [r7, #12]
 8003034:	021b      	lsls	r3, r3, #8
 8003036:	b29c      	uxth	r4, r3
 8003038:	79fb      	ldrb	r3, [r7, #7]
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	3301      	adds	r3, #1
 800303e:	00db      	lsls	r3, r3, #3
 8003040:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8003044:	4618      	mov	r0, r3
 8003046:	f7ff fe3b 	bl	8002cc0 <WIZCHIP_READ>
 800304a:	4603      	mov	r3, r0
 800304c:	b29b      	uxth	r3, r3
 800304e:	4423      	add	r3, r4
 8003050:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8003052:	89bb      	ldrh	r3, [r7, #12]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d01a      	beq.n	800308e <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8003058:	79fb      	ldrb	r3, [r7, #7]
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	3301      	adds	r3, #1
 800305e:	00db      	lsls	r3, r3, #3
 8003060:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8003064:	4618      	mov	r0, r3
 8003066:	f7ff fe2b 	bl	8002cc0 <WIZCHIP_READ>
 800306a:	4603      	mov	r3, r0
 800306c:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 800306e:	89fb      	ldrh	r3, [r7, #14]
 8003070:	021b      	lsls	r3, r3, #8
 8003072:	b29c      	uxth	r4, r3
 8003074:	79fb      	ldrb	r3, [r7, #7]
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	3301      	adds	r3, #1
 800307a:	00db      	lsls	r3, r3, #3
 800307c:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8003080:	4618      	mov	r0, r3
 8003082:	f7ff fe1d 	bl	8002cc0 <WIZCHIP_READ>
 8003086:	4603      	mov	r3, r0
 8003088:	b29b      	uxth	r3, r3
 800308a:	4423      	add	r3, r4
 800308c:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 800308e:	89fa      	ldrh	r2, [r7, #14]
 8003090:	89bb      	ldrh	r3, [r7, #12]
 8003092:	429a      	cmp	r2, r3
 8003094:	d1c2      	bne.n	800301c <getSn_RX_RSR+0x12>
   return val;
 8003096:	89fb      	ldrh	r3, [r7, #14]
}
 8003098:	4618      	mov	r0, r3
 800309a:	3714      	adds	r7, #20
 800309c:	46bd      	mov	sp, r7
 800309e:	bd90      	pop	{r4, r7, pc}

080030a0 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 80030a0:	b590      	push	{r4, r7, lr}
 80030a2:	b085      	sub	sp, #20
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	4603      	mov	r3, r0
 80030a8:	6039      	str	r1, [r7, #0]
 80030aa:	71fb      	strb	r3, [r7, #7]
 80030ac:	4613      	mov	r3, r2
 80030ae:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 80030b0:	2300      	movs	r3, #0
 80030b2:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 80030b4:	2300      	movs	r3, #0
 80030b6:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 80030b8:	88bb      	ldrh	r3, [r7, #4]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d048      	beq.n	8003150 <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 80030be:	79fb      	ldrb	r3, [r7, #7]
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	3301      	adds	r3, #1
 80030c4:	00db      	lsls	r3, r3, #3
 80030c6:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7ff fdf8 	bl	8002cc0 <WIZCHIP_READ>
 80030d0:	4603      	mov	r3, r0
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	021b      	lsls	r3, r3, #8
 80030d6:	b29c      	uxth	r4, r3
 80030d8:	79fb      	ldrb	r3, [r7, #7]
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	3301      	adds	r3, #1
 80030de:	00db      	lsls	r3, r3, #3
 80030e0:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 80030e4:	4618      	mov	r0, r3
 80030e6:	f7ff fdeb 	bl	8002cc0 <WIZCHIP_READ>
 80030ea:	4603      	mov	r3, r0
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	4423      	add	r3, r4
 80030f0:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 80030f2:	89fb      	ldrh	r3, [r7, #14]
 80030f4:	021b      	lsls	r3, r3, #8
 80030f6:	79fa      	ldrb	r2, [r7, #7]
 80030f8:	0092      	lsls	r2, r2, #2
 80030fa:	3202      	adds	r2, #2
 80030fc:	00d2      	lsls	r2, r2, #3
 80030fe:	4413      	add	r3, r2
 8003100:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8003102:	88bb      	ldrh	r3, [r7, #4]
 8003104:	461a      	mov	r2, r3
 8003106:	6839      	ldr	r1, [r7, #0]
 8003108:	68b8      	ldr	r0, [r7, #8]
 800310a:	f7ff fed3 	bl	8002eb4 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 800310e:	89fa      	ldrh	r2, [r7, #14]
 8003110:	88bb      	ldrh	r3, [r7, #4]
 8003112:	4413      	add	r3, r2
 8003114:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 8003116:	79fb      	ldrb	r3, [r7, #7]
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	3301      	adds	r3, #1
 800311c:	00db      	lsls	r3, r3, #3
 800311e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8003122:	461a      	mov	r2, r3
 8003124:	89fb      	ldrh	r3, [r7, #14]
 8003126:	0a1b      	lsrs	r3, r3, #8
 8003128:	b29b      	uxth	r3, r3
 800312a:	b2db      	uxtb	r3, r3
 800312c:	4619      	mov	r1, r3
 800312e:	4610      	mov	r0, r2
 8003130:	f7ff fe12 	bl	8002d58 <WIZCHIP_WRITE>
 8003134:	79fb      	ldrb	r3, [r7, #7]
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	3301      	adds	r3, #1
 800313a:	00db      	lsls	r3, r3, #3
 800313c:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8003140:	461a      	mov	r2, r3
 8003142:	89fb      	ldrh	r3, [r7, #14]
 8003144:	b2db      	uxtb	r3, r3
 8003146:	4619      	mov	r1, r3
 8003148:	4610      	mov	r0, r2
 800314a:	f7ff fe05 	bl	8002d58 <WIZCHIP_WRITE>
 800314e:	e000      	b.n	8003152 <wiz_send_data+0xb2>
   if(len == 0)  return;
 8003150:	bf00      	nop
}
 8003152:	3714      	adds	r7, #20
 8003154:	46bd      	mov	sp, r7
 8003156:	bd90      	pop	{r4, r7, pc}

08003158 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8003158:	b590      	push	{r4, r7, lr}
 800315a:	b085      	sub	sp, #20
 800315c:	af00      	add	r7, sp, #0
 800315e:	4604      	mov	r4, r0
 8003160:	4608      	mov	r0, r1
 8003162:	4611      	mov	r1, r2
 8003164:	461a      	mov	r2, r3
 8003166:	4623      	mov	r3, r4
 8003168:	71fb      	strb	r3, [r7, #7]
 800316a:	4603      	mov	r3, r0
 800316c:	71bb      	strb	r3, [r7, #6]
 800316e:	460b      	mov	r3, r1
 8003170:	80bb      	strh	r3, [r7, #4]
 8003172:	4613      	mov	r3, r2
 8003174:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8003176:	79fb      	ldrb	r3, [r7, #7]
 8003178:	2b08      	cmp	r3, #8
 800317a:	d902      	bls.n	8003182 <socket+0x2a>
 800317c:	f04f 33ff 	mov.w	r3, #4294967295
 8003180:	e0ef      	b.n	8003362 <socket+0x20a>
	switch(protocol)
 8003182:	79bb      	ldrb	r3, [r7, #6]
 8003184:	2b01      	cmp	r3, #1
 8003186:	d004      	beq.n	8003192 <socket+0x3a>
 8003188:	2b01      	cmp	r3, #1
 800318a:	db10      	blt.n	80031ae <socket+0x56>
 800318c:	2b04      	cmp	r3, #4
 800318e:	dc0e      	bgt.n	80031ae <socket+0x56>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8003190:	e011      	b.n	80031b6 <socket+0x5e>
            getSIPR((uint8_t*)&taddr);
 8003192:	f107 030c 	add.w	r3, r7, #12
 8003196:	2204      	movs	r2, #4
 8003198:	4619      	mov	r1, r3
 800319a:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800319e:	f7ff fe29 	bl	8002df4 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d105      	bne.n	80031b4 <socket+0x5c>
 80031a8:	f06f 0302 	mvn.w	r3, #2
 80031ac:	e0d9      	b.n	8003362 <socket+0x20a>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 80031ae:	f06f 0304 	mvn.w	r3, #4
 80031b2:	e0d6      	b.n	8003362 <socket+0x20a>
	    break;
 80031b4:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 80031b6:	78fb      	ldrb	r3, [r7, #3]
 80031b8:	f003 0304 	and.w	r3, r3, #4
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d002      	beq.n	80031c6 <socket+0x6e>
 80031c0:	f06f 0305 	mvn.w	r3, #5
 80031c4:	e0cd      	b.n	8003362 <socket+0x20a>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 80031c6:	78fb      	ldrb	r3, [r7, #3]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d028      	beq.n	800321e <socket+0xc6>
	{
   	switch(protocol)
 80031cc:	79bb      	ldrb	r3, [r7, #6]
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d002      	beq.n	80031d8 <socket+0x80>
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d008      	beq.n	80031e8 <socket+0x90>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 80031d6:	e022      	b.n	800321e <socket+0xc6>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 80031d8:	78fb      	ldrb	r3, [r7, #3]
 80031da:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d11a      	bne.n	8003218 <socket+0xc0>
 80031e2:	f06f 0305 	mvn.w	r3, #5
 80031e6:	e0bc      	b.n	8003362 <socket+0x20a>
   	      if(flag & SF_IGMP_VER2)
 80031e8:	78fb      	ldrb	r3, [r7, #3]
 80031ea:	f003 0320 	and.w	r3, r3, #32
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d006      	beq.n	8003200 <socket+0xa8>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 80031f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	db02      	blt.n	8003200 <socket+0xa8>
 80031fa:	f06f 0305 	mvn.w	r3, #5
 80031fe:	e0b0      	b.n	8003362 <socket+0x20a>
      	      if(flag & SF_UNI_BLOCK)
 8003200:	78fb      	ldrb	r3, [r7, #3]
 8003202:	f003 0310 	and.w	r3, r3, #16
 8003206:	2b00      	cmp	r3, #0
 8003208:	d008      	beq.n	800321c <socket+0xc4>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 800320a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800320e:	2b00      	cmp	r3, #0
 8003210:	db04      	blt.n	800321c <socket+0xc4>
 8003212:	f06f 0305 	mvn.w	r3, #5
 8003216:	e0a4      	b.n	8003362 <socket+0x20a>
   	      break;
 8003218:	bf00      	nop
 800321a:	e000      	b.n	800321e <socket+0xc6>
   	      break;
 800321c:	bf00      	nop
   	}
   }
	close(sn);
 800321e:	79fb      	ldrb	r3, [r7, #7]
 8003220:	4618      	mov	r0, r3
 8003222:	f000 f8ad 	bl	8003380 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8003226:	79fb      	ldrb	r3, [r7, #7]
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	3301      	adds	r3, #1
 800322c:	00db      	lsls	r3, r3, #3
 800322e:	4618      	mov	r0, r3
 8003230:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003234:	f023 030f 	bic.w	r3, r3, #15
 8003238:	b25a      	sxtb	r2, r3
 800323a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800323e:	4313      	orrs	r3, r2
 8003240:	b25b      	sxtb	r3, r3
 8003242:	b2db      	uxtb	r3, r3
 8003244:	4619      	mov	r1, r3
 8003246:	f7ff fd87 	bl	8002d58 <WIZCHIP_WRITE>
    #endif
	if(!port)
 800324a:	88bb      	ldrh	r3, [r7, #4]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d110      	bne.n	8003272 <socket+0x11a>
	{
	   port = sock_any_port++;
 8003250:	4b46      	ldr	r3, [pc, #280]	; (800336c <socket+0x214>)
 8003252:	881b      	ldrh	r3, [r3, #0]
 8003254:	1c5a      	adds	r2, r3, #1
 8003256:	b291      	uxth	r1, r2
 8003258:	4a44      	ldr	r2, [pc, #272]	; (800336c <socket+0x214>)
 800325a:	8011      	strh	r1, [r2, #0]
 800325c:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 800325e:	4b43      	ldr	r3, [pc, #268]	; (800336c <socket+0x214>)
 8003260:	881b      	ldrh	r3, [r3, #0]
 8003262:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8003266:	4293      	cmp	r3, r2
 8003268:	d103      	bne.n	8003272 <socket+0x11a>
 800326a:	4b40      	ldr	r3, [pc, #256]	; (800336c <socket+0x214>)
 800326c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8003270:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8003272:	79fb      	ldrb	r3, [r7, #7]
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	3301      	adds	r3, #1
 8003278:	00db      	lsls	r3, r3, #3
 800327a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800327e:	461a      	mov	r2, r3
 8003280:	88bb      	ldrh	r3, [r7, #4]
 8003282:	0a1b      	lsrs	r3, r3, #8
 8003284:	b29b      	uxth	r3, r3
 8003286:	b2db      	uxtb	r3, r3
 8003288:	4619      	mov	r1, r3
 800328a:	4610      	mov	r0, r2
 800328c:	f7ff fd64 	bl	8002d58 <WIZCHIP_WRITE>
 8003290:	79fb      	ldrb	r3, [r7, #7]
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	3301      	adds	r3, #1
 8003296:	00db      	lsls	r3, r3, #3
 8003298:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800329c:	461a      	mov	r2, r3
 800329e:	88bb      	ldrh	r3, [r7, #4]
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	4619      	mov	r1, r3
 80032a4:	4610      	mov	r0, r2
 80032a6:	f7ff fd57 	bl	8002d58 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 80032aa:	79fb      	ldrb	r3, [r7, #7]
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	3301      	adds	r3, #1
 80032b0:	00db      	lsls	r3, r3, #3
 80032b2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80032b6:	2101      	movs	r1, #1
 80032b8:	4618      	mov	r0, r3
 80032ba:	f7ff fd4d 	bl	8002d58 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 80032be:	bf00      	nop
 80032c0:	79fb      	ldrb	r3, [r7, #7]
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	3301      	adds	r3, #1
 80032c6:	00db      	lsls	r3, r3, #3
 80032c8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80032cc:	4618      	mov	r0, r3
 80032ce:	f7ff fcf7 	bl	8002cc0 <WIZCHIP_READ>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d1f3      	bne.n	80032c0 <socket+0x168>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 80032d8:	79fb      	ldrb	r3, [r7, #7]
 80032da:	2201      	movs	r2, #1
 80032dc:	fa02 f303 	lsl.w	r3, r2, r3
 80032e0:	b21b      	sxth	r3, r3
 80032e2:	43db      	mvns	r3, r3
 80032e4:	b21a      	sxth	r2, r3
 80032e6:	4b22      	ldr	r3, [pc, #136]	; (8003370 <socket+0x218>)
 80032e8:	881b      	ldrh	r3, [r3, #0]
 80032ea:	b21b      	sxth	r3, r3
 80032ec:	4013      	ands	r3, r2
 80032ee:	b21b      	sxth	r3, r3
 80032f0:	b29a      	uxth	r2, r3
 80032f2:	4b1f      	ldr	r3, [pc, #124]	; (8003370 <socket+0x218>)
 80032f4:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 80032f6:	78fb      	ldrb	r3, [r7, #3]
 80032f8:	f003 0201 	and.w	r2, r3, #1
 80032fc:	79fb      	ldrb	r3, [r7, #7]
 80032fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003302:	b21a      	sxth	r2, r3
 8003304:	4b1a      	ldr	r3, [pc, #104]	; (8003370 <socket+0x218>)
 8003306:	881b      	ldrh	r3, [r3, #0]
 8003308:	b21b      	sxth	r3, r3
 800330a:	4313      	orrs	r3, r2
 800330c:	b21b      	sxth	r3, r3
 800330e:	b29a      	uxth	r2, r3
 8003310:	4b17      	ldr	r3, [pc, #92]	; (8003370 <socket+0x218>)
 8003312:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8003314:	79fb      	ldrb	r3, [r7, #7]
 8003316:	2201      	movs	r2, #1
 8003318:	fa02 f303 	lsl.w	r3, r2, r3
 800331c:	b21b      	sxth	r3, r3
 800331e:	43db      	mvns	r3, r3
 8003320:	b21a      	sxth	r2, r3
 8003322:	4b14      	ldr	r3, [pc, #80]	; (8003374 <socket+0x21c>)
 8003324:	881b      	ldrh	r3, [r3, #0]
 8003326:	b21b      	sxth	r3, r3
 8003328:	4013      	ands	r3, r2
 800332a:	b21b      	sxth	r3, r3
 800332c:	b29a      	uxth	r2, r3
 800332e:	4b11      	ldr	r3, [pc, #68]	; (8003374 <socket+0x21c>)
 8003330:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8003332:	79fb      	ldrb	r3, [r7, #7]
 8003334:	4a10      	ldr	r2, [pc, #64]	; (8003378 <socket+0x220>)
 8003336:	2100      	movs	r1, #0
 8003338:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 800333c:	79fb      	ldrb	r3, [r7, #7]
 800333e:	4a0f      	ldr	r2, [pc, #60]	; (800337c <socket+0x224>)
 8003340:	2100      	movs	r1, #0
 8003342:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8003344:	bf00      	nop
 8003346:	79fb      	ldrb	r3, [r7, #7]
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	3301      	adds	r3, #1
 800334c:	00db      	lsls	r3, r3, #3
 800334e:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003352:	4618      	mov	r0, r3
 8003354:	f7ff fcb4 	bl	8002cc0 <WIZCHIP_READ>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d0f3      	beq.n	8003346 <socket+0x1ee>
   return (int8_t)sn;
 800335e:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8003362:	4618      	mov	r0, r3
 8003364:	3714      	adds	r7, #20
 8003366:	46bd      	mov	sp, r7
 8003368:	bd90      	pop	{r4, r7, pc}
 800336a:	bf00      	nop
 800336c:	20000022 	.word	0x20000022
 8003370:	200000d0 	.word	0x200000d0
 8003374:	200000d2 	.word	0x200000d2
 8003378:	200000d4 	.word	0x200000d4
 800337c:	200000e4 	.word	0x200000e4

08003380 <close>:

int8_t close(uint8_t sn)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
 8003386:	4603      	mov	r3, r0
 8003388:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 800338a:	79fb      	ldrb	r3, [r7, #7]
 800338c:	2b08      	cmp	r3, #8
 800338e:	d902      	bls.n	8003396 <close+0x16>
 8003390:	f04f 33ff 	mov.w	r3, #4294967295
 8003394:	e055      	b.n	8003442 <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8003396:	79fb      	ldrb	r3, [r7, #7]
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	3301      	adds	r3, #1
 800339c:	00db      	lsls	r3, r3, #3
 800339e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80033a2:	2110      	movs	r1, #16
 80033a4:	4618      	mov	r0, r3
 80033a6:	f7ff fcd7 	bl	8002d58 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 80033aa:	bf00      	nop
 80033ac:	79fb      	ldrb	r3, [r7, #7]
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	3301      	adds	r3, #1
 80033b2:	00db      	lsls	r3, r3, #3
 80033b4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80033b8:	4618      	mov	r0, r3
 80033ba:	f7ff fc81 	bl	8002cc0 <WIZCHIP_READ>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d1f3      	bne.n	80033ac <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 80033c4:	79fb      	ldrb	r3, [r7, #7]
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	3301      	adds	r3, #1
 80033ca:	00db      	lsls	r3, r3, #3
 80033cc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80033d0:	211f      	movs	r1, #31
 80033d2:	4618      	mov	r0, r3
 80033d4:	f7ff fcc0 	bl	8002d58 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 80033d8:	79fb      	ldrb	r3, [r7, #7]
 80033da:	2201      	movs	r2, #1
 80033dc:	fa02 f303 	lsl.w	r3, r2, r3
 80033e0:	b21b      	sxth	r3, r3
 80033e2:	43db      	mvns	r3, r3
 80033e4:	b21a      	sxth	r2, r3
 80033e6:	4b19      	ldr	r3, [pc, #100]	; (800344c <close+0xcc>)
 80033e8:	881b      	ldrh	r3, [r3, #0]
 80033ea:	b21b      	sxth	r3, r3
 80033ec:	4013      	ands	r3, r2
 80033ee:	b21b      	sxth	r3, r3
 80033f0:	b29a      	uxth	r2, r3
 80033f2:	4b16      	ldr	r3, [pc, #88]	; (800344c <close+0xcc>)
 80033f4:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 80033f6:	79fb      	ldrb	r3, [r7, #7]
 80033f8:	2201      	movs	r2, #1
 80033fa:	fa02 f303 	lsl.w	r3, r2, r3
 80033fe:	b21b      	sxth	r3, r3
 8003400:	43db      	mvns	r3, r3
 8003402:	b21a      	sxth	r2, r3
 8003404:	4b12      	ldr	r3, [pc, #72]	; (8003450 <close+0xd0>)
 8003406:	881b      	ldrh	r3, [r3, #0]
 8003408:	b21b      	sxth	r3, r3
 800340a:	4013      	ands	r3, r2
 800340c:	b21b      	sxth	r3, r3
 800340e:	b29a      	uxth	r2, r3
 8003410:	4b0f      	ldr	r3, [pc, #60]	; (8003450 <close+0xd0>)
 8003412:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8003414:	79fb      	ldrb	r3, [r7, #7]
 8003416:	4a0f      	ldr	r2, [pc, #60]	; (8003454 <close+0xd4>)
 8003418:	2100      	movs	r1, #0
 800341a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 800341e:	79fb      	ldrb	r3, [r7, #7]
 8003420:	4a0d      	ldr	r2, [pc, #52]	; (8003458 <close+0xd8>)
 8003422:	2100      	movs	r1, #0
 8003424:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8003426:	bf00      	nop
 8003428:	79fb      	ldrb	r3, [r7, #7]
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	3301      	adds	r3, #1
 800342e:	00db      	lsls	r3, r3, #3
 8003430:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003434:	4618      	mov	r0, r3
 8003436:	f7ff fc43 	bl	8002cc0 <WIZCHIP_READ>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d1f3      	bne.n	8003428 <close+0xa8>
	return SOCK_OK;
 8003440:	2301      	movs	r3, #1
}
 8003442:	4618      	mov	r0, r3
 8003444:	3708      	adds	r7, #8
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	200000d0 	.word	0x200000d0
 8003450:	200000d2 	.word	0x200000d2
 8003454:	200000d4 	.word	0x200000d4
 8003458:	200000e4 	.word	0x200000e4

0800345c <listen>:

int8_t listen(uint8_t sn)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b082      	sub	sp, #8
 8003460:	af00      	add	r7, sp, #0
 8003462:	4603      	mov	r3, r0
 8003464:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8003466:	79fb      	ldrb	r3, [r7, #7]
 8003468:	2b08      	cmp	r3, #8
 800346a:	d902      	bls.n	8003472 <listen+0x16>
 800346c:	f04f 33ff 	mov.w	r3, #4294967295
 8003470:	e049      	b.n	8003506 <listen+0xaa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8003472:	79fb      	ldrb	r3, [r7, #7]
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	3301      	adds	r3, #1
 8003478:	00db      	lsls	r3, r3, #3
 800347a:	4618      	mov	r0, r3
 800347c:	f7ff fc20 	bl	8002cc0 <WIZCHIP_READ>
 8003480:	4603      	mov	r3, r0
 8003482:	f003 030f 	and.w	r3, r3, #15
 8003486:	2b01      	cmp	r3, #1
 8003488:	d002      	beq.n	8003490 <listen+0x34>
 800348a:	f06f 0304 	mvn.w	r3, #4
 800348e:	e03a      	b.n	8003506 <listen+0xaa>
	CHECK_SOCKINIT();
 8003490:	79fb      	ldrb	r3, [r7, #7]
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	3301      	adds	r3, #1
 8003496:	00db      	lsls	r3, r3, #3
 8003498:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800349c:	4618      	mov	r0, r3
 800349e:	f7ff fc0f 	bl	8002cc0 <WIZCHIP_READ>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b13      	cmp	r3, #19
 80034a6:	d002      	beq.n	80034ae <listen+0x52>
 80034a8:	f06f 0302 	mvn.w	r3, #2
 80034ac:	e02b      	b.n	8003506 <listen+0xaa>
	setSn_CR(sn,Sn_CR_LISTEN);
 80034ae:	79fb      	ldrb	r3, [r7, #7]
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	3301      	adds	r3, #1
 80034b4:	00db      	lsls	r3, r3, #3
 80034b6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80034ba:	2102      	movs	r1, #2
 80034bc:	4618      	mov	r0, r3
 80034be:	f7ff fc4b 	bl	8002d58 <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 80034c2:	bf00      	nop
 80034c4:	79fb      	ldrb	r3, [r7, #7]
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	3301      	adds	r3, #1
 80034ca:	00db      	lsls	r3, r3, #3
 80034cc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80034d0:	4618      	mov	r0, r3
 80034d2:	f7ff fbf5 	bl	8002cc0 <WIZCHIP_READ>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d1f3      	bne.n	80034c4 <listen+0x68>
   while(getSn_SR(sn) != SOCK_LISTEN)
 80034dc:	e006      	b.n	80034ec <listen+0x90>
   {
         close(sn);
 80034de:	79fb      	ldrb	r3, [r7, #7]
 80034e0:	4618      	mov	r0, r3
 80034e2:	f7ff ff4d 	bl	8003380 <close>
         return SOCKERR_SOCKCLOSED;
 80034e6:	f06f 0303 	mvn.w	r3, #3
 80034ea:	e00c      	b.n	8003506 <listen+0xaa>
   while(getSn_SR(sn) != SOCK_LISTEN)
 80034ec:	79fb      	ldrb	r3, [r7, #7]
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	3301      	adds	r3, #1
 80034f2:	00db      	lsls	r3, r3, #3
 80034f4:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80034f8:	4618      	mov	r0, r3
 80034fa:	f7ff fbe1 	bl	8002cc0 <WIZCHIP_READ>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b14      	cmp	r3, #20
 8003502:	d1ec      	bne.n	80034de <listen+0x82>
   }
   return SOCK_OK;
 8003504:	2301      	movs	r3, #1
}
 8003506:	4618      	mov	r0, r3
 8003508:	3708      	adds	r7, #8
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
	...

08003510 <disconnect>:
   
   return SOCK_OK;
}

int8_t disconnect(uint8_t sn)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b082      	sub	sp, #8
 8003514:	af00      	add	r7, sp, #0
 8003516:	4603      	mov	r3, r0
 8003518:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 800351a:	79fb      	ldrb	r3, [r7, #7]
 800351c:	2b08      	cmp	r3, #8
 800351e:	d902      	bls.n	8003526 <disconnect+0x16>
 8003520:	f04f 33ff 	mov.w	r3, #4294967295
 8003524:	e062      	b.n	80035ec <disconnect+0xdc>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8003526:	79fb      	ldrb	r3, [r7, #7]
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	3301      	adds	r3, #1
 800352c:	00db      	lsls	r3, r3, #3
 800352e:	4618      	mov	r0, r3
 8003530:	f7ff fbc6 	bl	8002cc0 <WIZCHIP_READ>
 8003534:	4603      	mov	r3, r0
 8003536:	f003 030f 	and.w	r3, r3, #15
 800353a:	2b01      	cmp	r3, #1
 800353c:	d002      	beq.n	8003544 <disconnect+0x34>
 800353e:	f06f 0304 	mvn.w	r3, #4
 8003542:	e053      	b.n	80035ec <disconnect+0xdc>
	setSn_CR(sn,Sn_CR_DISCON);
 8003544:	79fb      	ldrb	r3, [r7, #7]
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	3301      	adds	r3, #1
 800354a:	00db      	lsls	r3, r3, #3
 800354c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003550:	2108      	movs	r1, #8
 8003552:	4618      	mov	r0, r3
 8003554:	f7ff fc00 	bl	8002d58 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8003558:	bf00      	nop
 800355a:	79fb      	ldrb	r3, [r7, #7]
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	3301      	adds	r3, #1
 8003560:	00db      	lsls	r3, r3, #3
 8003562:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003566:	4618      	mov	r0, r3
 8003568:	f7ff fbaa 	bl	8002cc0 <WIZCHIP_READ>
 800356c:	4603      	mov	r3, r0
 800356e:	2b00      	cmp	r3, #0
 8003570:	d1f3      	bne.n	800355a <disconnect+0x4a>
	sock_is_sending &= ~(1<<sn);
 8003572:	79fb      	ldrb	r3, [r7, #7]
 8003574:	2201      	movs	r2, #1
 8003576:	fa02 f303 	lsl.w	r3, r2, r3
 800357a:	b21b      	sxth	r3, r3
 800357c:	43db      	mvns	r3, r3
 800357e:	b21a      	sxth	r2, r3
 8003580:	4b1c      	ldr	r3, [pc, #112]	; (80035f4 <disconnect+0xe4>)
 8003582:	881b      	ldrh	r3, [r3, #0]
 8003584:	b21b      	sxth	r3, r3
 8003586:	4013      	ands	r3, r2
 8003588:	b21b      	sxth	r3, r3
 800358a:	b29a      	uxth	r2, r3
 800358c:	4b19      	ldr	r3, [pc, #100]	; (80035f4 <disconnect+0xe4>)
 800358e:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8003590:	4b19      	ldr	r3, [pc, #100]	; (80035f8 <disconnect+0xe8>)
 8003592:	881b      	ldrh	r3, [r3, #0]
 8003594:	461a      	mov	r2, r3
 8003596:	79fb      	ldrb	r3, [r7, #7]
 8003598:	fa42 f303 	asr.w	r3, r2, r3
 800359c:	f003 0301 	and.w	r3, r3, #1
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d016      	beq.n	80035d2 <disconnect+0xc2>
 80035a4:	2300      	movs	r3, #0
 80035a6:	e021      	b.n	80035ec <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 80035a8:	79fb      	ldrb	r3, [r7, #7]
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	3301      	adds	r3, #1
 80035ae:	00db      	lsls	r3, r3, #3
 80035b0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80035b4:	4618      	mov	r0, r3
 80035b6:	f7ff fb83 	bl	8002cc0 <WIZCHIP_READ>
 80035ba:	4603      	mov	r3, r0
 80035bc:	f003 0308 	and.w	r3, r3, #8
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d006      	beq.n	80035d2 <disconnect+0xc2>
	   {
	      close(sn);
 80035c4:	79fb      	ldrb	r3, [r7, #7]
 80035c6:	4618      	mov	r0, r3
 80035c8:	f7ff feda 	bl	8003380 <close>
	      return SOCKERR_TIMEOUT;
 80035cc:	f06f 030c 	mvn.w	r3, #12
 80035d0:	e00c      	b.n	80035ec <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
 80035d2:	79fb      	ldrb	r3, [r7, #7]
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	3301      	adds	r3, #1
 80035d8:	00db      	lsls	r3, r3, #3
 80035da:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80035de:	4618      	mov	r0, r3
 80035e0:	f7ff fb6e 	bl	8002cc0 <WIZCHIP_READ>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d1de      	bne.n	80035a8 <disconnect+0x98>
	   }
	}
	return SOCK_OK;
 80035ea:	2301      	movs	r3, #1
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3708      	adds	r7, #8
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}
 80035f4:	200000d2 	.word	0x200000d2
 80035f8:	200000d0 	.word	0x200000d0

080035fc <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0
 8003602:	4603      	mov	r3, r0
 8003604:	6039      	str	r1, [r7, #0]
 8003606:	71fb      	strb	r3, [r7, #7]
 8003608:	4613      	mov	r3, r2
 800360a:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 800360c:	2300      	movs	r3, #0
 800360e:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 8003610:	2300      	movs	r3, #0
 8003612:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 8003614:	79fb      	ldrb	r3, [r7, #7]
 8003616:	2b08      	cmp	r3, #8
 8003618:	d902      	bls.n	8003620 <send+0x24>
 800361a:	f04f 33ff 	mov.w	r3, #4294967295
 800361e:	e0de      	b.n	80037de <send+0x1e2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8003620:	79fb      	ldrb	r3, [r7, #7]
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	3301      	adds	r3, #1
 8003626:	00db      	lsls	r3, r3, #3
 8003628:	4618      	mov	r0, r3
 800362a:	f7ff fb49 	bl	8002cc0 <WIZCHIP_READ>
 800362e:	4603      	mov	r3, r0
 8003630:	f003 030f 	and.w	r3, r3, #15
 8003634:	2b01      	cmp	r3, #1
 8003636:	d002      	beq.n	800363e <send+0x42>
 8003638:	f06f 0304 	mvn.w	r3, #4
 800363c:	e0cf      	b.n	80037de <send+0x1e2>
   CHECK_SOCKDATA();
 800363e:	88bb      	ldrh	r3, [r7, #4]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d102      	bne.n	800364a <send+0x4e>
 8003644:	f06f 030d 	mvn.w	r3, #13
 8003648:	e0c9      	b.n	80037de <send+0x1e2>
   tmp = getSn_SR(sn);
 800364a:	79fb      	ldrb	r3, [r7, #7]
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	3301      	adds	r3, #1
 8003650:	00db      	lsls	r3, r3, #3
 8003652:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003656:	4618      	mov	r0, r3
 8003658:	f7ff fb32 	bl	8002cc0 <WIZCHIP_READ>
 800365c:	4603      	mov	r3, r0
 800365e:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8003660:	7bfb      	ldrb	r3, [r7, #15]
 8003662:	2b17      	cmp	r3, #23
 8003664:	d005      	beq.n	8003672 <send+0x76>
 8003666:	7bfb      	ldrb	r3, [r7, #15]
 8003668:	2b1c      	cmp	r3, #28
 800366a:	d002      	beq.n	8003672 <send+0x76>
 800366c:	f06f 0306 	mvn.w	r3, #6
 8003670:	e0b5      	b.n	80037de <send+0x1e2>
   if( sock_is_sending & (1<<sn) )
 8003672:	4b5d      	ldr	r3, [pc, #372]	; (80037e8 <send+0x1ec>)
 8003674:	881b      	ldrh	r3, [r3, #0]
 8003676:	461a      	mov	r2, r3
 8003678:	79fb      	ldrb	r3, [r7, #7]
 800367a:	fa42 f303 	asr.w	r3, r2, r3
 800367e:	f003 0301 	and.w	r3, r3, #1
 8003682:	2b00      	cmp	r3, #0
 8003684:	d039      	beq.n	80036fa <send+0xfe>
   {
      tmp = getSn_IR(sn);
 8003686:	79fb      	ldrb	r3, [r7, #7]
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	3301      	adds	r3, #1
 800368c:	00db      	lsls	r3, r3, #3
 800368e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003692:	4618      	mov	r0, r3
 8003694:	f7ff fb14 	bl	8002cc0 <WIZCHIP_READ>
 8003698:	4603      	mov	r3, r0
 800369a:	f003 031f 	and.w	r3, r3, #31
 800369e:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 80036a0:	7bfb      	ldrb	r3, [r7, #15]
 80036a2:	f003 0310 	and.w	r3, r3, #16
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d019      	beq.n	80036de <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 80036aa:	79fb      	ldrb	r3, [r7, #7]
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	3301      	adds	r3, #1
 80036b0:	00db      	lsls	r3, r3, #3
 80036b2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80036b6:	2110      	movs	r1, #16
 80036b8:	4618      	mov	r0, r3
 80036ba:	f7ff fb4d 	bl	8002d58 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 80036be:	79fb      	ldrb	r3, [r7, #7]
 80036c0:	2201      	movs	r2, #1
 80036c2:	fa02 f303 	lsl.w	r3, r2, r3
 80036c6:	b21b      	sxth	r3, r3
 80036c8:	43db      	mvns	r3, r3
 80036ca:	b21a      	sxth	r2, r3
 80036cc:	4b46      	ldr	r3, [pc, #280]	; (80037e8 <send+0x1ec>)
 80036ce:	881b      	ldrh	r3, [r3, #0]
 80036d0:	b21b      	sxth	r3, r3
 80036d2:	4013      	ands	r3, r2
 80036d4:	b21b      	sxth	r3, r3
 80036d6:	b29a      	uxth	r2, r3
 80036d8:	4b43      	ldr	r3, [pc, #268]	; (80037e8 <send+0x1ec>)
 80036da:	801a      	strh	r2, [r3, #0]
 80036dc:	e00d      	b.n	80036fa <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 80036de:	7bfb      	ldrb	r3, [r7, #15]
 80036e0:	f003 0308 	and.w	r3, r3, #8
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d006      	beq.n	80036f6 <send+0xfa>
      {
         close(sn);
 80036e8:	79fb      	ldrb	r3, [r7, #7]
 80036ea:	4618      	mov	r0, r3
 80036ec:	f7ff fe48 	bl	8003380 <close>
         return SOCKERR_TIMEOUT;
 80036f0:	f06f 030c 	mvn.w	r3, #12
 80036f4:	e073      	b.n	80037de <send+0x1e2>
      }
      else return SOCK_BUSY;
 80036f6:	2300      	movs	r3, #0
 80036f8:	e071      	b.n	80037de <send+0x1e2>
   }
   freesize = getSn_TxMAX(sn);
 80036fa:	79fb      	ldrb	r3, [r7, #7]
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	3301      	adds	r3, #1
 8003700:	00db      	lsls	r3, r3, #3
 8003702:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8003706:	4618      	mov	r0, r3
 8003708:	f7ff fada 	bl	8002cc0 <WIZCHIP_READ>
 800370c:	4603      	mov	r3, r0
 800370e:	b29b      	uxth	r3, r3
 8003710:	029b      	lsls	r3, r3, #10
 8003712:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8003714:	88ba      	ldrh	r2, [r7, #4]
 8003716:	89bb      	ldrh	r3, [r7, #12]
 8003718:	429a      	cmp	r2, r3
 800371a:	d901      	bls.n	8003720 <send+0x124>
 800371c:	89bb      	ldrh	r3, [r7, #12]
 800371e:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8003720:	79fb      	ldrb	r3, [r7, #7]
 8003722:	4618      	mov	r0, r3
 8003724:	f7ff fc26 	bl	8002f74 <getSn_TX_FSR>
 8003728:	4603      	mov	r3, r0
 800372a:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 800372c:	79fb      	ldrb	r3, [r7, #7]
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	3301      	adds	r3, #1
 8003732:	00db      	lsls	r3, r3, #3
 8003734:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003738:	4618      	mov	r0, r3
 800373a:	f7ff fac1 	bl	8002cc0 <WIZCHIP_READ>
 800373e:	4603      	mov	r3, r0
 8003740:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8003742:	7bfb      	ldrb	r3, [r7, #15]
 8003744:	2b17      	cmp	r3, #23
 8003746:	d009      	beq.n	800375c <send+0x160>
 8003748:	7bfb      	ldrb	r3, [r7, #15]
 800374a:	2b1c      	cmp	r3, #28
 800374c:	d006      	beq.n	800375c <send+0x160>
      {
         close(sn);
 800374e:	79fb      	ldrb	r3, [r7, #7]
 8003750:	4618      	mov	r0, r3
 8003752:	f7ff fe15 	bl	8003380 <close>
         return SOCKERR_SOCKSTATUS;
 8003756:	f06f 0306 	mvn.w	r3, #6
 800375a:	e040      	b.n	80037de <send+0x1e2>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 800375c:	4b23      	ldr	r3, [pc, #140]	; (80037ec <send+0x1f0>)
 800375e:	881b      	ldrh	r3, [r3, #0]
 8003760:	461a      	mov	r2, r3
 8003762:	79fb      	ldrb	r3, [r7, #7]
 8003764:	fa42 f303 	asr.w	r3, r2, r3
 8003768:	f003 0301 	and.w	r3, r3, #1
 800376c:	2b00      	cmp	r3, #0
 800376e:	d005      	beq.n	800377c <send+0x180>
 8003770:	88ba      	ldrh	r2, [r7, #4]
 8003772:	89bb      	ldrh	r3, [r7, #12]
 8003774:	429a      	cmp	r2, r3
 8003776:	d901      	bls.n	800377c <send+0x180>
 8003778:	2300      	movs	r3, #0
 800377a:	e030      	b.n	80037de <send+0x1e2>
      if(len <= freesize) break;
 800377c:	88ba      	ldrh	r2, [r7, #4]
 800377e:	89bb      	ldrh	r3, [r7, #12]
 8003780:	429a      	cmp	r2, r3
 8003782:	d900      	bls.n	8003786 <send+0x18a>
      freesize = getSn_TX_FSR(sn);
 8003784:	e7cc      	b.n	8003720 <send+0x124>
      if(len <= freesize) break;
 8003786:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 8003788:	88ba      	ldrh	r2, [r7, #4]
 800378a:	79fb      	ldrb	r3, [r7, #7]
 800378c:	6839      	ldr	r1, [r7, #0]
 800378e:	4618      	mov	r0, r3
 8003790:	f7ff fc86 	bl	80030a0 <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 8003794:	79fb      	ldrb	r3, [r7, #7]
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	3301      	adds	r3, #1
 800379a:	00db      	lsls	r3, r3, #3
 800379c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80037a0:	2120      	movs	r1, #32
 80037a2:	4618      	mov	r0, r3
 80037a4:	f7ff fad8 	bl	8002d58 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 80037a8:	bf00      	nop
 80037aa:	79fb      	ldrb	r3, [r7, #7]
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	3301      	adds	r3, #1
 80037b0:	00db      	lsls	r3, r3, #3
 80037b2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80037b6:	4618      	mov	r0, r3
 80037b8:	f7ff fa82 	bl	8002cc0 <WIZCHIP_READ>
 80037bc:	4603      	mov	r3, r0
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d1f3      	bne.n	80037aa <send+0x1ae>
   sock_is_sending |= (1 << sn);
 80037c2:	79fb      	ldrb	r3, [r7, #7]
 80037c4:	2201      	movs	r2, #1
 80037c6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ca:	b21a      	sxth	r2, r3
 80037cc:	4b06      	ldr	r3, [pc, #24]	; (80037e8 <send+0x1ec>)
 80037ce:	881b      	ldrh	r3, [r3, #0]
 80037d0:	b21b      	sxth	r3, r3
 80037d2:	4313      	orrs	r3, r2
 80037d4:	b21b      	sxth	r3, r3
 80037d6:	b29a      	uxth	r2, r3
 80037d8:	4b03      	ldr	r3, [pc, #12]	; (80037e8 <send+0x1ec>)
 80037da:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 80037dc:	88bb      	ldrh	r3, [r7, #4]
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3710      	adds	r7, #16
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	200000d2 	.word	0x200000d2
 80037ec:	200000d0 	.word	0x200000d0

080037f0 <getsockopt>:
   }   
   return SOCK_OK;
}

int8_t  getsockopt(uint8_t sn, sockopt_type sotype, void* arg)
{
 80037f0:	b590      	push	{r4, r7, lr}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	4603      	mov	r3, r0
 80037f8:	603a      	str	r2, [r7, #0]
 80037fa:	71fb      	strb	r3, [r7, #7]
 80037fc:	460b      	mov	r3, r1
 80037fe:	71bb      	strb	r3, [r7, #6]
   CHECK_SOCKNUM();
 8003800:	79fb      	ldrb	r3, [r7, #7]
 8003802:	2b08      	cmp	r3, #8
 8003804:	d902      	bls.n	800380c <getsockopt+0x1c>
 8003806:	f04f 33ff 	mov.w	r3, #4294967295
 800380a:	e101      	b.n	8003a10 <getsockopt+0x220>
   switch(sotype)
 800380c:	79bb      	ldrb	r3, [r7, #6]
 800380e:	2b0c      	cmp	r3, #12
 8003810:	f200 80fa 	bhi.w	8003a08 <getsockopt+0x218>
 8003814:	a201      	add	r2, pc, #4	; (adr r2, 800381c <getsockopt+0x2c>)
 8003816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800381a:	bf00      	nop
 800381c:	08003851 	.word	0x08003851
 8003820:	0800386d 	.word	0x0800386d
 8003824:	08003889 	.word	0x08003889
 8003828:	080038a5 	.word	0x080038a5
 800382c:	080038df 	.word	0x080038df
 8003830:	080038f7 	.word	0x080038f7
 8003834:	08003a09 	.word	0x08003a09
 8003838:	08003931 	.word	0x08003931
 800383c:	0800396b 	.word	0x0800396b
 8003840:	0800397d 	.word	0x0800397d
 8003844:	0800398f 	.word	0x0800398f
 8003848:	080039ab 	.word	0x080039ab
 800384c:	080039e3 	.word	0x080039e3
   {
      case SO_FLAG:
         *(uint8_t*)arg = getSn_MR(sn) & 0xF0;
 8003850:	79fb      	ldrb	r3, [r7, #7]
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	3301      	adds	r3, #1
 8003856:	00db      	lsls	r3, r3, #3
 8003858:	4618      	mov	r0, r3
 800385a:	f7ff fa31 	bl	8002cc0 <WIZCHIP_READ>
 800385e:	4603      	mov	r3, r0
 8003860:	f023 030f 	bic.w	r3, r3, #15
 8003864:	b2da      	uxtb	r2, r3
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	701a      	strb	r2, [r3, #0]
         break;
 800386a:	e0d0      	b.n	8003a0e <getsockopt+0x21e>
      case SO_TTL:
         *(uint8_t*) arg = getSn_TTL(sn);
 800386c:	79fb      	ldrb	r3, [r7, #7]
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	3301      	adds	r3, #1
 8003872:	00db      	lsls	r3, r3, #3
 8003874:	f503 53b0 	add.w	r3, r3, #5632	; 0x1600
 8003878:	4618      	mov	r0, r3
 800387a:	f7ff fa21 	bl	8002cc0 <WIZCHIP_READ>
 800387e:	4603      	mov	r3, r0
 8003880:	461a      	mov	r2, r3
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	701a      	strb	r2, [r3, #0]
         break;
 8003886:	e0c2      	b.n	8003a0e <getsockopt+0x21e>
      case SO_TOS:
         *(uint8_t*) arg = getSn_TOS(sn);
 8003888:	79fb      	ldrb	r3, [r7, #7]
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	3301      	adds	r3, #1
 800388e:	00db      	lsls	r3, r3, #3
 8003890:	f503 53a8 	add.w	r3, r3, #5376	; 0x1500
 8003894:	4618      	mov	r0, r3
 8003896:	f7ff fa13 	bl	8002cc0 <WIZCHIP_READ>
 800389a:	4603      	mov	r3, r0
 800389c:	461a      	mov	r2, r3
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	701a      	strb	r2, [r3, #0]
         break;
 80038a2:	e0b4      	b.n	8003a0e <getsockopt+0x21e>
      case SO_MSS:   
         *(uint16_t*) arg = getSn_MSSR(sn);
 80038a4:	79fb      	ldrb	r3, [r7, #7]
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	3301      	adds	r3, #1
 80038aa:	00db      	lsls	r3, r3, #3
 80038ac:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 80038b0:	4618      	mov	r0, r3
 80038b2:	f7ff fa05 	bl	8002cc0 <WIZCHIP_READ>
 80038b6:	4603      	mov	r3, r0
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	021b      	lsls	r3, r3, #8
 80038bc:	b29c      	uxth	r4, r3
 80038be:	79fb      	ldrb	r3, [r7, #7]
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	3301      	adds	r3, #1
 80038c4:	00db      	lsls	r3, r3, #3
 80038c6:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80038ca:	4618      	mov	r0, r3
 80038cc:	f7ff f9f8 	bl	8002cc0 <WIZCHIP_READ>
 80038d0:	4603      	mov	r3, r0
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	4423      	add	r3, r4
 80038d6:	b29a      	uxth	r2, r3
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	801a      	strh	r2, [r3, #0]
         break;
 80038dc:	e097      	b.n	8003a0e <getsockopt+0x21e>
      case SO_DESTIP:
         getSn_DIPR(sn, (uint8_t*)arg);
 80038de:	79fb      	ldrb	r3, [r7, #7]
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	3301      	adds	r3, #1
 80038e4:	00db      	lsls	r3, r3, #3
 80038e6:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80038ea:	2204      	movs	r2, #4
 80038ec:	6839      	ldr	r1, [r7, #0]
 80038ee:	4618      	mov	r0, r3
 80038f0:	f7ff fa80 	bl	8002df4 <WIZCHIP_READ_BUF>
         break;
 80038f4:	e08b      	b.n	8003a0e <getsockopt+0x21e>
      case SO_DESTPORT:  
         *(uint16_t*) arg = getSn_DPORT(sn);
 80038f6:	79fb      	ldrb	r3, [r7, #7]
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	3301      	adds	r3, #1
 80038fc:	00db      	lsls	r3, r3, #3
 80038fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003902:	4618      	mov	r0, r3
 8003904:	f7ff f9dc 	bl	8002cc0 <WIZCHIP_READ>
 8003908:	4603      	mov	r3, r0
 800390a:	b29b      	uxth	r3, r3
 800390c:	021b      	lsls	r3, r3, #8
 800390e:	b29c      	uxth	r4, r3
 8003910:	79fb      	ldrb	r3, [r7, #7]
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	3301      	adds	r3, #1
 8003916:	00db      	lsls	r3, r3, #3
 8003918:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800391c:	4618      	mov	r0, r3
 800391e:	f7ff f9cf 	bl	8002cc0 <WIZCHIP_READ>
 8003922:	4603      	mov	r3, r0
 8003924:	b29b      	uxth	r3, r3
 8003926:	4423      	add	r3, r4
 8003928:	b29a      	uxth	r2, r3
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	801a      	strh	r2, [r3, #0]
         break;
 800392e:	e06e      	b.n	8003a0e <getsockopt+0x21e>
   #if _WIZCHIP_ > 5200   
      case SO_KEEPALIVEAUTO:
         CHECK_SOCKMODE(Sn_MR_TCP);
 8003930:	79fb      	ldrb	r3, [r7, #7]
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	3301      	adds	r3, #1
 8003936:	00db      	lsls	r3, r3, #3
 8003938:	4618      	mov	r0, r3
 800393a:	f7ff f9c1 	bl	8002cc0 <WIZCHIP_READ>
 800393e:	4603      	mov	r3, r0
 8003940:	f003 030f 	and.w	r3, r3, #15
 8003944:	2b01      	cmp	r3, #1
 8003946:	d002      	beq.n	800394e <getsockopt+0x15e>
 8003948:	f06f 0304 	mvn.w	r3, #4
 800394c:	e060      	b.n	8003a10 <getsockopt+0x220>
         *(uint16_t*) arg = getSn_KPALVTR(sn);
 800394e:	79fb      	ldrb	r3, [r7, #7]
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	3301      	adds	r3, #1
 8003954:	00db      	lsls	r3, r3, #3
 8003956:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 800395a:	4618      	mov	r0, r3
 800395c:	f7ff f9b0 	bl	8002cc0 <WIZCHIP_READ>
 8003960:	4603      	mov	r3, r0
 8003962:	b29a      	uxth	r2, r3
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	801a      	strh	r2, [r3, #0]
         break;
 8003968:	e051      	b.n	8003a0e <getsockopt+0x21e>
   #endif      
      case SO_SENDBUF:
         *(uint16_t*) arg = getSn_TX_FSR(sn);
 800396a:	79fb      	ldrb	r3, [r7, #7]
 800396c:	4618      	mov	r0, r3
 800396e:	f7ff fb01 	bl	8002f74 <getSn_TX_FSR>
 8003972:	4603      	mov	r3, r0
 8003974:	461a      	mov	r2, r3
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	801a      	strh	r2, [r3, #0]
         break;
 800397a:	e048      	b.n	8003a0e <getsockopt+0x21e>
      case SO_RECVBUF:
         *(uint16_t*) arg = getSn_RX_RSR(sn);
 800397c:	79fb      	ldrb	r3, [r7, #7]
 800397e:	4618      	mov	r0, r3
 8003980:	f7ff fb43 	bl	800300a <getSn_RX_RSR>
 8003984:	4603      	mov	r3, r0
 8003986:	461a      	mov	r2, r3
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	801a      	strh	r2, [r3, #0]
         break;
 800398c:	e03f      	b.n	8003a0e <getsockopt+0x21e>
      case SO_STATUS:
         *(uint8_t*) arg = getSn_SR(sn);
 800398e:	79fb      	ldrb	r3, [r7, #7]
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	3301      	adds	r3, #1
 8003994:	00db      	lsls	r3, r3, #3
 8003996:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800399a:	4618      	mov	r0, r3
 800399c:	f7ff f990 	bl	8002cc0 <WIZCHIP_READ>
 80039a0:	4603      	mov	r3, r0
 80039a2:	461a      	mov	r2, r3
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	701a      	strb	r2, [r3, #0]
         break;
 80039a8:	e031      	b.n	8003a0e <getsockopt+0x21e>
      case SO_REMAINSIZE:
         if(getSn_MR(sn) & Sn_MR_TCP)
 80039aa:	79fb      	ldrb	r3, [r7, #7]
 80039ac:	009b      	lsls	r3, r3, #2
 80039ae:	3301      	adds	r3, #1
 80039b0:	00db      	lsls	r3, r3, #3
 80039b2:	4618      	mov	r0, r3
 80039b4:	f7ff f984 	bl	8002cc0 <WIZCHIP_READ>
 80039b8:	4603      	mov	r3, r0
 80039ba:	f003 0301 	and.w	r3, r3, #1
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d008      	beq.n	80039d4 <getsockopt+0x1e4>
            *(uint16_t*)arg = getSn_RX_RSR(sn);
 80039c2:	79fb      	ldrb	r3, [r7, #7]
 80039c4:	4618      	mov	r0, r3
 80039c6:	f7ff fb20 	bl	800300a <getSn_RX_RSR>
 80039ca:	4603      	mov	r3, r0
 80039cc:	461a      	mov	r2, r3
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	801a      	strh	r2, [r3, #0]
         else
            *(uint16_t*)arg = sock_remained_size[sn];
         break;
 80039d2:	e01c      	b.n	8003a0e <getsockopt+0x21e>
            *(uint16_t*)arg = sock_remained_size[sn];
 80039d4:	79fb      	ldrb	r3, [r7, #7]
 80039d6:	4a10      	ldr	r2, [pc, #64]	; (8003a18 <getsockopt+0x228>)
 80039d8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	801a      	strh	r2, [r3, #0]
         break;
 80039e0:	e015      	b.n	8003a0e <getsockopt+0x21e>
      case SO_PACKINFO:
         //CHECK_SOCKMODE(Sn_MR_TCP);
#if _WIZCHIP_ != 5300
         if((getSn_MR(sn) == Sn_MR_TCP))
 80039e2:	79fb      	ldrb	r3, [r7, #7]
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	3301      	adds	r3, #1
 80039e8:	00db      	lsls	r3, r3, #3
 80039ea:	4618      	mov	r0, r3
 80039ec:	f7ff f968 	bl	8002cc0 <WIZCHIP_READ>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d102      	bne.n	80039fc <getsockopt+0x20c>
             return SOCKERR_SOCKMODE;
 80039f6:	f06f 0304 	mvn.w	r3, #4
 80039fa:	e009      	b.n	8003a10 <getsockopt+0x220>
#endif
         *(uint8_t*)arg = sock_pack_info[sn];
 80039fc:	79fb      	ldrb	r3, [r7, #7]
 80039fe:	4a07      	ldr	r2, [pc, #28]	; (8003a1c <getsockopt+0x22c>)
 8003a00:	5cd2      	ldrb	r2, [r2, r3]
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	701a      	strb	r2, [r3, #0]
         break;
 8003a06:	e002      	b.n	8003a0e <getsockopt+0x21e>
      default:
         return SOCKERR_SOCKOPT;
 8003a08:	f06f 0301 	mvn.w	r3, #1
 8003a0c:	e000      	b.n	8003a10 <getsockopt+0x220>
   }
   return SOCK_OK;
 8003a0e:	2301      	movs	r3, #1
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	370c      	adds	r7, #12
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd90      	pop	{r4, r7, pc}
 8003a18:	200000d4 	.word	0x200000d4
 8003a1c:	200000e4 	.word	0x200000e4

08003a20 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8003a20:	b480      	push	{r7}
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	bf00      	nop
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr

08003a2e <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8003a2e:	b480      	push	{r7}
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	bf00      	nop
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr

08003a3c <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8003a3c:	b480      	push	{r7}
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	bf00      	nop
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr

08003a4a <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8003a4a:	b480      	push	{r7}
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	bf00      	nop
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr

08003a58 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	4618      	mov	r0, r3
 8003a68:	370c      	adds	r7, #12
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr

08003a72 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8003a72:	b480      	push	{r7}
 8003a74:	b083      	sub	sp, #12
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	6078      	str	r0, [r7, #4]
 8003a7a:	460b      	mov	r3, r1
 8003a7c:	70fb      	strb	r3, [r7, #3]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	78fa      	ldrb	r2, [r7, #3]
 8003a82:	701a      	strb	r2, [r3, #0]
 8003a84:	bf00      	nop
 8003a86:	370c      	adds	r7, #12
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr

08003a90 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8003a90:	b480      	push	{r7}
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	2300      	movs	r3, #0
 8003a96:	4618      	mov	r0, r3
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr

08003aa0 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8003aa0:	b480      	push	{r7}
 8003aa2:	b083      	sub	sp, #12
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	71fb      	strb	r3, [r7, #7]
 8003aaa:	bf00      	nop
 8003aac:	370c      	adds	r7, #12
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr
	...

08003ab8 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d002      	beq.n	8003ace <reg_wizchip_cs_cbfunc+0x16>
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d106      	bne.n	8003adc <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8003ace:	4b09      	ldr	r3, [pc, #36]	; (8003af4 <reg_wizchip_cs_cbfunc+0x3c>)
 8003ad0:	4a09      	ldr	r2, [pc, #36]	; (8003af8 <reg_wizchip_cs_cbfunc+0x40>)
 8003ad2:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8003ad4:	4b07      	ldr	r3, [pc, #28]	; (8003af4 <reg_wizchip_cs_cbfunc+0x3c>)
 8003ad6:	4a09      	ldr	r2, [pc, #36]	; (8003afc <reg_wizchip_cs_cbfunc+0x44>)
 8003ad8:	619a      	str	r2, [r3, #24]
 8003ada:	e005      	b.n	8003ae8 <reg_wizchip_cs_cbfunc+0x30>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8003adc:	4a05      	ldr	r2, [pc, #20]	; (8003af4 <reg_wizchip_cs_cbfunc+0x3c>)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8003ae2:	4a04      	ldr	r2, [pc, #16]	; (8003af4 <reg_wizchip_cs_cbfunc+0x3c>)
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	6193      	str	r3, [r2, #24]
   }
}
 8003ae8:	bf00      	nop
 8003aea:	370c      	adds	r7, #12
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr
 8003af4:	20000024 	.word	0x20000024
 8003af8:	08003a3d 	.word	0x08003a3d
 8003afc:	08003a4b 	.word	0x08003a4b

08003b00 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8003b00:	b480      	push	{r7}
 8003b02:	b083      	sub	sp, #12
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8003b0a:	bf00      	nop
 8003b0c:	4b0f      	ldr	r3, [pc, #60]	; (8003b4c <reg_wizchip_spi_cbfunc+0x4c>)
 8003b0e:	881b      	ldrh	r3, [r3, #0]
 8003b10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d0f9      	beq.n	8003b0c <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d002      	beq.n	8003b24 <reg_wizchip_spi_cbfunc+0x24>
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d106      	bne.n	8003b32 <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8003b24:	4b09      	ldr	r3, [pc, #36]	; (8003b4c <reg_wizchip_spi_cbfunc+0x4c>)
 8003b26:	4a0a      	ldr	r2, [pc, #40]	; (8003b50 <reg_wizchip_spi_cbfunc+0x50>)
 8003b28:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8003b2a:	4b08      	ldr	r3, [pc, #32]	; (8003b4c <reg_wizchip_spi_cbfunc+0x4c>)
 8003b2c:	4a09      	ldr	r2, [pc, #36]	; (8003b54 <reg_wizchip_spi_cbfunc+0x54>)
 8003b2e:	621a      	str	r2, [r3, #32]
 8003b30:	e005      	b.n	8003b3e <reg_wizchip_spi_cbfunc+0x3e>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8003b32:	4a06      	ldr	r2, [pc, #24]	; (8003b4c <reg_wizchip_spi_cbfunc+0x4c>)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8003b38:	4a04      	ldr	r2, [pc, #16]	; (8003b4c <reg_wizchip_spi_cbfunc+0x4c>)
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	6213      	str	r3, [r2, #32]
   }
}
 8003b3e:	bf00      	nop
 8003b40:	370c      	adds	r7, #12
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr
 8003b4a:	bf00      	nop
 8003b4c:	20000024 	.word	0x20000024
 8003b50:	08003a91 	.word	0x08003a91
 8003b54:	08003aa1 	.word	0x08003aa1

08003b58 <ctlwizchip>:
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
   }
}

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 8003b58:	b590      	push	{r4, r7, lr}
 8003b5a:	b087      	sub	sp, #28
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	4603      	mov	r3, r0
 8003b60:	6039      	str	r1, [r7, #0]
 8003b62:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
 8003b64:	2300      	movs	r3, #0
 8003b66:	75fb      	strb	r3, [r7, #23]
#endif
   uint8_t* ptmp[2] = {0,0};
 8003b68:	2300      	movs	r3, #0
 8003b6a:	60fb      	str	r3, [r7, #12]
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 8003b70:	79fb      	ldrb	r3, [r7, #7]
 8003b72:	2b0f      	cmp	r3, #15
 8003b74:	f200 80c2 	bhi.w	8003cfc <ctlwizchip+0x1a4>
 8003b78:	a201      	add	r2, pc, #4	; (adr r2, 8003b80 <ctlwizchip+0x28>)
 8003b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b7e:	bf00      	nop
 8003b80:	08003bc1 	.word	0x08003bc1
 8003b84:	08003bc7 	.word	0x08003bc7
 8003b88:	08003bf3 	.word	0x08003bf3
 8003b8c:	08003be7 	.word	0x08003be7
 8003b90:	08003c01 	.word	0x08003c01
 8003b94:	08003c0d 	.word	0x08003c0d
 8003b98:	08003c1b 	.word	0x08003c1b
 8003b9c:	08003c41 	.word	0x08003c41
 8003ba0:	08003c67 	.word	0x08003c67
 8003ba4:	08003ca1 	.word	0x08003ca1
 8003ba8:	08003ca7 	.word	0x08003ca7
 8003bac:	08003caf 	.word	0x08003caf
 8003bb0:	08003d03 	.word	0x08003d03
 8003bb4:	08003cb7 	.word	0x08003cb7
 8003bb8:	08003cc5 	.word	0x08003cc5
 8003bbc:	08003ce1 	.word	0x08003ce1
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 8003bc0:	f000 f8a8 	bl	8003d14 <wizchip_sw_reset>
         break;
 8003bc4:	e09e      	b.n	8003d04 <ctlwizchip+0x1ac>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d004      	beq.n	8003bd6 <ctlwizchip+0x7e>
         {
            ptmp[0] = (uint8_t*)arg;
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	3308      	adds	r3, #8
 8003bd4:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	693a      	ldr	r2, [r7, #16]
 8003bda:	4611      	mov	r1, r2
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f000 f8e5 	bl	8003dac <wizchip_init>
 8003be2:	4603      	mov	r3, r0
 8003be4:	e08f      	b.n	8003d06 <ctlwizchip+0x1ae>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	881b      	ldrh	r3, [r3, #0]
 8003bea:	4618      	mov	r0, r3
 8003bec:	f000 f96a 	bl	8003ec4 <wizchip_clrinterrupt>
         break;
 8003bf0:	e088      	b.n	8003d04 <ctlwizchip+0x1ac>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 8003bf2:	f000 f99a 	bl	8003f2a <wizchip_getinterrupt>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	801a      	strh	r2, [r3, #0]
         break;
 8003bfe:	e081      	b.n	8003d04 <ctlwizchip+0x1ac>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	881b      	ldrh	r3, [r3, #0]
 8003c04:	4618      	mov	r0, r3
 8003c06:	f000 f9b5 	bl	8003f74 <wizchip_setinterruptmask>
         break;         
 8003c0a:	e07b      	b.n	8003d04 <ctlwizchip+0x1ac>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 8003c0c:	f000 f9cd 	bl	8003faa <wizchip_getinterruptmask>
 8003c10:	4603      	mov	r3, r0
 8003c12:	461a      	mov	r2, r3
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	801a      	strh	r2, [r3, #0]
         break;
 8003c18:	e074      	b.n	8003d04 <ctlwizchip+0x1ac>
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	881b      	ldrh	r3, [r3, #0]
 8003c1e:	0a1b      	lsrs	r3, r3, #8
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	4619      	mov	r1, r3
 8003c26:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 8003c2a:	f7ff f895 	bl	8002d58 <WIZCHIP_WRITE>
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	881b      	ldrh	r3, [r3, #0]
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	4619      	mov	r1, r3
 8003c36:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8003c3a:	f7ff f88d 	bl	8002d58 <WIZCHIP_WRITE>
         break;
 8003c3e:	e061      	b.n	8003d04 <ctlwizchip+0x1ac>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 8003c40:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 8003c44:	f7ff f83c 	bl	8002cc0 <WIZCHIP_READ>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	021b      	lsls	r3, r3, #8
 8003c4e:	b29c      	uxth	r4, r3
 8003c50:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8003c54:	f7ff f834 	bl	8002cc0 <WIZCHIP_READ>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	4423      	add	r3, r4
 8003c5e:	b29a      	uxth	r2, r3
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	801a      	strh	r2, [r3, #0]
         break;
 8003c64:	e04e      	b.n	8003d04 <ctlwizchip+0x1ac>
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 8003c66:	4b2a      	ldr	r3, [pc, #168]	; (8003d10 <ctlwizchip+0x1b8>)
 8003c68:	789a      	ldrb	r2, [r3, #2]
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	3301      	adds	r3, #1
 8003c72:	4a27      	ldr	r2, [pc, #156]	; (8003d10 <ctlwizchip+0x1b8>)
 8003c74:	78d2      	ldrb	r2, [r2, #3]
 8003c76:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	3302      	adds	r3, #2
 8003c7c:	4a24      	ldr	r2, [pc, #144]	; (8003d10 <ctlwizchip+0x1b8>)
 8003c7e:	7912      	ldrb	r2, [r2, #4]
 8003c80:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	3303      	adds	r3, #3
 8003c86:	4a22      	ldr	r2, [pc, #136]	; (8003d10 <ctlwizchip+0x1b8>)
 8003c88:	7952      	ldrb	r2, [r2, #5]
 8003c8a:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	3304      	adds	r3, #4
 8003c90:	4a1f      	ldr	r2, [pc, #124]	; (8003d10 <ctlwizchip+0x1b8>)
 8003c92:	7992      	ldrb	r2, [r2, #6]
 8003c94:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = 0;
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	3305      	adds	r3, #5
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	701a      	strb	r2, [r3, #0]
         break;
 8003c9e:	e031      	b.n	8003d04 <ctlwizchip+0x1ac>
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500
      case CW_RESET_PHY:
         wizphy_reset();
 8003ca0:	f000 f9d5 	bl	800404e <wizphy_reset>
         break;
 8003ca4:	e02e      	b.n	8003d04 <ctlwizchip+0x1ac>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 8003ca6:	6838      	ldr	r0, [r7, #0]
 8003ca8:	f000 f9f8 	bl	800409c <wizphy_setphyconf>
         break;
 8003cac:	e02a      	b.n	8003d04 <ctlwizchip+0x1ac>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 8003cae:	6838      	ldr	r0, [r7, #0]
 8003cb0:	f000 fa36 	bl	8004120 <wizphy_getphyconf>
         break;
 8003cb4:	e026      	b.n	8003d04 <ctlwizchip+0x1ac>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	781b      	ldrb	r3, [r3, #0]
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f000 fa7c 	bl	80041b8 <wizphy_setphypmode>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	e020      	b.n	8003d06 <ctlwizchip+0x1ae>
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 8003cc4:	f000 f9aa 	bl	800401c <wizphy_getphypmode>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8003ccc:	7dfb      	ldrb	r3, [r7, #23]
 8003cce:	2bff      	cmp	r3, #255	; 0xff
 8003cd0:	d102      	bne.n	8003cd8 <ctlwizchip+0x180>
 8003cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8003cd6:	e016      	b.n	8003d06 <ctlwizchip+0x1ae>
         *(uint8_t*)arg = tmp;
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	7dfa      	ldrb	r2, [r7, #23]
 8003cdc:	701a      	strb	r2, [r3, #0]
         break;
 8003cde:	e011      	b.n	8003d04 <ctlwizchip+0x1ac>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 8003ce0:	f000 f986 	bl	8003ff0 <wizphy_getphylink>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8003ce8:	7dfb      	ldrb	r3, [r7, #23]
 8003cea:	2bff      	cmp	r3, #255	; 0xff
 8003cec:	d102      	bne.n	8003cf4 <ctlwizchip+0x19c>
 8003cee:	f04f 33ff 	mov.w	r3, #4294967295
 8003cf2:	e008      	b.n	8003d06 <ctlwizchip+0x1ae>
         *(uint8_t*)arg = tmp;
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	7dfa      	ldrb	r2, [r7, #23]
 8003cf8:	701a      	strb	r2, [r3, #0]
         break;
 8003cfa:	e003      	b.n	8003d04 <ctlwizchip+0x1ac>
   #endif      
      default:
         return -1;
 8003cfc:	f04f 33ff 	mov.w	r3, #4294967295
 8003d00:	e001      	b.n	8003d06 <ctlwizchip+0x1ae>
         break;
 8003d02:	bf00      	nop
   }
   return 0;
 8003d04:	2300      	movs	r3, #0
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	371c      	adds	r7, #28
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd90      	pop	{r4, r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	20000024 	.word	0x20000024

08003d14 <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b086      	sub	sp, #24
 8003d18:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8003d1a:	1d3b      	adds	r3, r7, #4
 8003d1c:	2206      	movs	r2, #6
 8003d1e:	4619      	mov	r1, r3
 8003d20:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8003d24:	f7ff f866 	bl	8002df4 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8003d28:	f107 0314 	add.w	r3, r7, #20
 8003d2c:	2204      	movs	r2, #4
 8003d2e:	4619      	mov	r1, r3
 8003d30:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003d34:	f7ff f85e 	bl	8002df4 <WIZCHIP_READ_BUF>
 8003d38:	f107 0310 	add.w	r3, r7, #16
 8003d3c:	2204      	movs	r2, #4
 8003d3e:	4619      	mov	r1, r3
 8003d40:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8003d44:	f7ff f856 	bl	8002df4 <WIZCHIP_READ_BUF>
 8003d48:	f107 030c 	add.w	r3, r7, #12
 8003d4c:	2204      	movs	r2, #4
 8003d4e:	4619      	mov	r1, r3
 8003d50:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8003d54:	f7ff f84e 	bl	8002df4 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8003d58:	2180      	movs	r1, #128	; 0x80
 8003d5a:	2000      	movs	r0, #0
 8003d5c:	f7fe fffc 	bl	8002d58 <WIZCHIP_WRITE>
   getMR(); // for delay
 8003d60:	2000      	movs	r0, #0
 8003d62:	f7fe ffad 	bl	8002cc0 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8003d66:	1d3b      	adds	r3, r7, #4
 8003d68:	2206      	movs	r2, #6
 8003d6a:	4619      	mov	r1, r3
 8003d6c:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8003d70:	f7ff f8a0 	bl	8002eb4 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8003d74:	f107 0314 	add.w	r3, r7, #20
 8003d78:	2204      	movs	r2, #4
 8003d7a:	4619      	mov	r1, r3
 8003d7c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003d80:	f7ff f898 	bl	8002eb4 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8003d84:	f107 0310 	add.w	r3, r7, #16
 8003d88:	2204      	movs	r2, #4
 8003d8a:	4619      	mov	r1, r3
 8003d8c:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8003d90:	f7ff f890 	bl	8002eb4 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8003d94:	f107 030c 	add.w	r3, r7, #12
 8003d98:	2204      	movs	r2, #4
 8003d9a:	4619      	mov	r1, r3
 8003d9c:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8003da0:	f7ff f888 	bl	8002eb4 <WIZCHIP_WRITE_BUF>
}
 8003da4:	bf00      	nop
 8003da6:	3718      	adds	r7, #24
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}

08003dac <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b084      	sub	sp, #16
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 8003db6:	2300      	movs	r3, #0
 8003db8:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8003dba:	f7ff ffab 	bl	8003d14 <wizchip_sw_reset>
   if(txsize)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d03b      	beq.n	8003e3c <wizchip_init+0x90>
   {
      tmp = 0;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003dc8:	2300      	movs	r3, #0
 8003dca:	73fb      	strb	r3, [r7, #15]
 8003dcc:	e015      	b.n	8003dfa <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 8003dce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	4413      	add	r3, r2
 8003dd6:	781a      	ldrb	r2, [r3, #0]
 8003dd8:	7bbb      	ldrb	r3, [r7, #14]
 8003dda:	4413      	add	r3, r2
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	73bb      	strb	r3, [r7, #14]

		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 8003de0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003de4:	2b10      	cmp	r3, #16
 8003de6:	dd02      	ble.n	8003dee <wizchip_init+0x42>
 8003de8:	f04f 33ff 	mov.w	r3, #4294967295
 8003dec:	e066      	b.n	8003ebc <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003dee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	3301      	adds	r3, #1
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	73fb      	strb	r3, [r7, #15]
 8003dfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dfe:	2b07      	cmp	r3, #7
 8003e00:	dde5      	ble.n	8003dce <wizchip_init+0x22>
		#endif
		}
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003e02:	2300      	movs	r3, #0
 8003e04:	73fb      	strb	r3, [r7, #15]
 8003e06:	e015      	b.n	8003e34 <wizchip_init+0x88>
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
		#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8003e08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	3301      	adds	r3, #1
 8003e10:	00db      	lsls	r3, r3, #3
 8003e12:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8003e16:	4618      	mov	r0, r3
 8003e18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	4413      	add	r3, r2
 8003e20:	781b      	ldrb	r3, [r3, #0]
 8003e22:	4619      	mov	r1, r3
 8003e24:	f7fe ff98 	bl	8002d58 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003e28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	3301      	adds	r3, #1
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	73fb      	strb	r3, [r7, #15]
 8003e34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e38:	2b07      	cmp	r3, #7
 8003e3a:	dde5      	ble.n	8003e08 <wizchip_init+0x5c>
		}

	#endif
   }

   if(rxsize)
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d03b      	beq.n	8003eba <wizchip_init+0x10e>
   {
      tmp = 0;
 8003e42:	2300      	movs	r3, #0
 8003e44:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003e46:	2300      	movs	r3, #0
 8003e48:	73fb      	strb	r3, [r7, #15]
 8003e4a:	e015      	b.n	8003e78 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 8003e4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e50:	683a      	ldr	r2, [r7, #0]
 8003e52:	4413      	add	r3, r2
 8003e54:	781a      	ldrb	r2, [r3, #0]
 8003e56:	7bbb      	ldrb	r3, [r7, #14]
 8003e58:	4413      	add	r3, r2
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	73bb      	strb	r3, [r7, #14]
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 8003e5e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003e62:	2b10      	cmp	r3, #16
 8003e64:	dd02      	ble.n	8003e6c <wizchip_init+0xc0>
 8003e66:	f04f 33ff 	mov.w	r3, #4294967295
 8003e6a:	e027      	b.n	8003ebc <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003e6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	3301      	adds	r3, #1
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	73fb      	strb	r3, [r7, #15]
 8003e78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e7c:	2b07      	cmp	r3, #7
 8003e7e:	dde5      	ble.n	8003e4c <wizchip_init+0xa0>
		#endif
		}

		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003e80:	2300      	movs	r3, #0
 8003e82:	73fb      	strb	r3, [r7, #15]
 8003e84:	e015      	b.n	8003eb2 <wizchip_init+0x106>
		#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
		#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 8003e86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	3301      	adds	r3, #1
 8003e8e:	00db      	lsls	r3, r3, #3
 8003e90:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8003e94:	4618      	mov	r0, r3
 8003e96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e9a:	683a      	ldr	r2, [r7, #0]
 8003e9c:	4413      	add	r3, r2
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	f7fe ff59 	bl	8002d58 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003ea6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	3301      	adds	r3, #1
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	73fb      	strb	r3, [r7, #15]
 8003eb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003eb6:	2b07      	cmp	r3, #7
 8003eb8:	dde5      	ble.n	8003e86 <wizchip_init+0xda>
		#endif
		}
	#endif
   }
   return 0;
 8003eba:	2300      	movs	r3, #0
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3710      	adds	r7, #16
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}

08003ec4 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b084      	sub	sp, #16
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	4603      	mov	r3, r0
 8003ecc:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 8003ece:	88fb      	ldrh	r3, [r7, #6]
 8003ed0:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 8003ed2:	88fb      	ldrh	r3, [r7, #6]
 8003ed4:	0a1b      	lsrs	r3, r3, #8
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	73bb      	strb	r3, [r7, #14]
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 8003eda:	7bfb      	ldrb	r3, [r7, #15]
 8003edc:	f023 030f 	bic.w	r3, r3, #15
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	4619      	mov	r1, r3
 8003ee4:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 8003ee8:	f7fe ff36 	bl	8002d58 <WIZCHIP_WRITE>
//M20200227 : For clear
   //setSIR(sir);
   for(ir=0; ir<8; ir++){
 8003eec:	2300      	movs	r3, #0
 8003eee:	73fb      	strb	r3, [r7, #15]
 8003ef0:	e014      	b.n	8003f1c <wizchip_clrinterrupt+0x58>
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
 8003ef2:	7bba      	ldrb	r2, [r7, #14]
 8003ef4:	7bfb      	ldrb	r3, [r7, #15]
 8003ef6:	fa42 f303 	asr.w	r3, r2, r3
 8003efa:	f003 0301 	and.w	r3, r3, #1
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d009      	beq.n	8003f16 <wizchip_clrinterrupt+0x52>
 8003f02:	7bfb      	ldrb	r3, [r7, #15]
 8003f04:	009b      	lsls	r3, r3, #2
 8003f06:	3301      	adds	r3, #1
 8003f08:	00db      	lsls	r3, r3, #3
 8003f0a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003f0e:	211f      	movs	r1, #31
 8003f10:	4618      	mov	r0, r3
 8003f12:	f7fe ff21 	bl	8002d58 <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
 8003f16:	7bfb      	ldrb	r3, [r7, #15]
 8003f18:	3301      	adds	r3, #1
 8003f1a:	73fb      	strb	r3, [r7, #15]
 8003f1c:	7bfb      	ldrb	r3, [r7, #15]
 8003f1e:	2b07      	cmp	r3, #7
 8003f20:	d9e7      	bls.n	8003ef2 <wizchip_clrinterrupt+0x2e>
   }

#endif   
}
 8003f22:	bf00      	nop
 8003f24:	3710      	adds	r7, #16
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}

08003f2a <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 8003f2a:	b580      	push	{r7, lr}
 8003f2c:	b082      	sub	sp, #8
 8003f2e:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 8003f30:	2300      	movs	r3, #0
 8003f32:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 8003f34:	2300      	movs	r3, #0
 8003f36:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 8003f3c:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 8003f40:	f7fe febe 	bl	8002cc0 <WIZCHIP_READ>
 8003f44:	4603      	mov	r3, r0
 8003f46:	f023 030f 	bic.w	r3, r3, #15
 8003f4a:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 8003f4c:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 8003f50:	f7fe feb6 	bl	8002cc0 <WIZCHIP_READ>
 8003f54:	4603      	mov	r3, r0
 8003f56:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 8003f58:	79bb      	ldrb	r3, [r7, #6]
 8003f5a:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 8003f5c:	88bb      	ldrh	r3, [r7, #4]
 8003f5e:	021b      	lsls	r3, r3, #8
 8003f60:	b29a      	uxth	r2, r3
 8003f62:	79fb      	ldrb	r3, [r7, #7]
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	4413      	add	r3, r2
 8003f68:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8003f6a:	88bb      	ldrh	r3, [r7, #4]
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3708      	adds	r7, #8
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 8003f7e:	88fb      	ldrh	r3, [r7, #6]
 8003f80:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 8003f82:	88fb      	ldrh	r3, [r7, #6]
 8003f84:	0a1b      	lsrs	r3, r3, #8
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	73bb      	strb	r3, [r7, #14]
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 8003f8a:	7bfb      	ldrb	r3, [r7, #15]
 8003f8c:	4619      	mov	r1, r3
 8003f8e:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 8003f92:	f7fe fee1 	bl	8002d58 <WIZCHIP_WRITE>
   setSIMR(simr);
 8003f96:	7bbb      	ldrb	r3, [r7, #14]
 8003f98:	4619      	mov	r1, r3
 8003f9a:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8003f9e:	f7fe fedb 	bl	8002d58 <WIZCHIP_WRITE>
#endif   
}
 8003fa2:	bf00      	nop
 8003fa4:	3710      	adds	r7, #16
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}

08003faa <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 8003faa:	b580      	push	{r7, lr}
 8003fac:	b082      	sub	sp, #8
 8003fae:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 8003fbc:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 8003fc0:	f7fe fe7e 	bl	8002cc0 <WIZCHIP_READ>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 8003fc8:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8003fcc:	f7fe fe78 	bl	8002cc0 <WIZCHIP_READ>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 8003fd4:	79bb      	ldrb	r3, [r7, #6]
 8003fd6:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 8003fd8:	88bb      	ldrh	r3, [r7, #4]
 8003fda:	021b      	lsls	r3, r3, #8
 8003fdc:	b29a      	uxth	r2, r3
 8003fde:	79fb      	ldrb	r3, [r7, #7]
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	4413      	add	r3, r2
 8003fe4:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8003fe6:	88bb      	ldrh	r3, [r7, #4]
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3708      	adds	r7, #8
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b082      	sub	sp, #8
 8003ff4:	af00      	add	r7, sp, #0
   int8_t tmp = PHY_LINK_OFF;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	71fb      	strb	r3, [r7, #7]
	   tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 8003ffa:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003ffe:	f7fe fe5f 	bl	8002cc0 <WIZCHIP_READ>
 8004002:	4603      	mov	r3, r0
 8004004:	f003 0301 	and.w	r3, r3, #1
 8004008:	2b00      	cmp	r3, #0
 800400a:	d001      	beq.n	8004010 <wizphy_getphylink+0x20>
      tmp = PHY_LINK_ON;
 800400c:	2301      	movs	r3, #1
 800400e:	71fb      	strb	r3, [r7, #7]

#else
   tmp = -1;
#endif
   return tmp;
 8004010:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8004014:	4618      	mov	r0, r3
 8004016:	3708      	adds	r7, #8
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}

0800401c <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b082      	sub	sp, #8
 8004020:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 8004022:	2300      	movs	r3, #0
 8004024:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 8004026:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800402a:	f7fe fe49 	bl	8002cc0 <WIZCHIP_READ>
 800402e:	4603      	mov	r3, r0
 8004030:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004034:	2b30      	cmp	r3, #48	; 0x30
 8004036:	d102      	bne.n	800403e <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 8004038:	2301      	movs	r3, #1
 800403a:	71fb      	strb	r3, [r7, #7]
 800403c:	e001      	b.n	8004042 <wizphy_getphypmode+0x26>
      else 
         tmp = PHY_POWER_NORM;
 800403e:	2300      	movs	r3, #0
 8004040:	71fb      	strb	r3, [r7, #7]
   #else
      tmp = -1;
   #endif
   return tmp;
 8004042:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8004046:	4618      	mov	r0, r3
 8004048:	3708      	adds	r7, #8
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}

0800404e <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 800404e:	b580      	push	{r7, lr}
 8004050:	b082      	sub	sp, #8
 8004052:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 8004054:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8004058:	f7fe fe32 	bl	8002cc0 <WIZCHIP_READ>
 800405c:	4603      	mov	r3, r0
 800405e:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 8004060:	79fb      	ldrb	r3, [r7, #7]
 8004062:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004066:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8004068:	79fb      	ldrb	r3, [r7, #7]
 800406a:	4619      	mov	r1, r3
 800406c:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8004070:	f7fe fe72 	bl	8002d58 <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 8004074:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8004078:	f7fe fe22 	bl	8002cc0 <WIZCHIP_READ>
 800407c:	4603      	mov	r3, r0
 800407e:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 8004080:	79fb      	ldrb	r3, [r7, #7]
 8004082:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004086:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8004088:	79fb      	ldrb	r3, [r7, #7]
 800408a:	4619      	mov	r1, r3
 800408c:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8004090:	f7fe fe62 	bl	8002d58 <WIZCHIP_WRITE>
}
 8004094:	bf00      	nop
 8004096:	3708      	adds	r7, #8
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}

0800409c <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b084      	sub	sp, #16
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 80040a4:	2300      	movs	r3, #0
 80040a6:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	781b      	ldrb	r3, [r3, #0]
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d104      	bne.n	80040ba <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 80040b0:	7bfb      	ldrb	r3, [r7, #15]
 80040b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040b6:	73fb      	strb	r3, [r7, #15]
 80040b8:	e003      	b.n	80040c2 <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 80040ba:	7bfb      	ldrb	r3, [r7, #15]
 80040bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040c0:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	785b      	ldrb	r3, [r3, #1]
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d104      	bne.n	80040d4 <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 80040ca:	7bfb      	ldrb	r3, [r7, #15]
 80040cc:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 80040d0:	73fb      	strb	r3, [r7, #15]
 80040d2:	e019      	b.n	8004108 <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	78db      	ldrb	r3, [r3, #3]
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d10d      	bne.n	80040f8 <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	789b      	ldrb	r3, [r3, #2]
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d104      	bne.n	80040ee <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 80040e4:	7bfb      	ldrb	r3, [r7, #15]
 80040e6:	f043 0318 	orr.w	r3, r3, #24
 80040ea:	73fb      	strb	r3, [r7, #15]
 80040ec:	e00c      	b.n	8004108 <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 80040ee:	7bfb      	ldrb	r3, [r7, #15]
 80040f0:	f043 0308 	orr.w	r3, r3, #8
 80040f4:	73fb      	strb	r3, [r7, #15]
 80040f6:	e007      	b.n	8004108 <wizphy_setphyconf+0x6c>
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	789b      	ldrb	r3, [r3, #2]
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d103      	bne.n	8004108 <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 8004100:	7bfb      	ldrb	r3, [r7, #15]
 8004102:	f043 0310 	orr.w	r3, r3, #16
 8004106:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 8004108:	7bfb      	ldrb	r3, [r7, #15]
 800410a:	4619      	mov	r1, r3
 800410c:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8004110:	f7fe fe22 	bl	8002d58 <WIZCHIP_WRITE>
   wizphy_reset();
 8004114:	f7ff ff9b 	bl	800404e <wizphy_reset>
}
 8004118:	bf00      	nop
 800411a:	3710      	adds	r7, #16
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}

08004120 <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8004128:	2300      	movs	r3, #0
 800412a:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 800412c:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8004130:	f7fe fdc6 	bl	8002cc0 <WIZCHIP_READ>
 8004134:	4603      	mov	r3, r0
 8004136:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 8004138:	7bfb      	ldrb	r3, [r7, #15]
 800413a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800413e:	2b00      	cmp	r3, #0
 8004140:	bf14      	ite	ne
 8004142:	2301      	movne	r3, #1
 8004144:	2300      	moveq	r3, #0
 8004146:	b2db      	uxtb	r3, r3
 8004148:	461a      	mov	r2, r3
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 800414e:	7bfb      	ldrb	r3, [r7, #15]
 8004150:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004154:	2b20      	cmp	r3, #32
 8004156:	d001      	beq.n	800415c <wizphy_getphyconf+0x3c>
 8004158:	2b38      	cmp	r3, #56	; 0x38
 800415a:	d103      	bne.n	8004164 <wizphy_getphyconf+0x44>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2201      	movs	r2, #1
 8004160:	705a      	strb	r2, [r3, #1]
         break;
 8004162:	e003      	b.n	800416c <wizphy_getphyconf+0x4c>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	705a      	strb	r2, [r3, #1]
         break;
 800416a:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 800416c:	7bfb      	ldrb	r3, [r7, #15]
 800416e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004172:	2b18      	cmp	r3, #24
 8004174:	d003      	beq.n	800417e <wizphy_getphyconf+0x5e>
 8004176:	2b20      	cmp	r3, #32
 8004178:	d001      	beq.n	800417e <wizphy_getphyconf+0x5e>
 800417a:	2b10      	cmp	r3, #16
 800417c:	d103      	bne.n	8004186 <wizphy_getphyconf+0x66>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2201      	movs	r2, #1
 8004182:	709a      	strb	r2, [r3, #2]
         break;
 8004184:	e003      	b.n	800418e <wizphy_getphyconf+0x6e>
      default:
         phyconf->speed = PHY_SPEED_10;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2200      	movs	r2, #0
 800418a:	709a      	strb	r2, [r3, #2]
         break;
 800418c:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 800418e:	7bfb      	ldrb	r3, [r7, #15]
 8004190:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004194:	2b18      	cmp	r3, #24
 8004196:	d003      	beq.n	80041a0 <wizphy_getphyconf+0x80>
 8004198:	2b20      	cmp	r3, #32
 800419a:	d001      	beq.n	80041a0 <wizphy_getphyconf+0x80>
 800419c:	2b08      	cmp	r3, #8
 800419e:	d103      	bne.n	80041a8 <wizphy_getphyconf+0x88>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	70da      	strb	r2, [r3, #3]
         break;
 80041a6:	e003      	b.n	80041b0 <wizphy_getphyconf+0x90>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	70da      	strb	r2, [r3, #3]
         break;
 80041ae:	bf00      	nop
   }
}
 80041b0:	bf00      	nop
 80041b2:	3710      	adds	r7, #16
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}

080041b8 <wizphy_setphypmode>:
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b084      	sub	sp, #16
 80041bc:	af00      	add	r7, sp, #0
 80041be:	4603      	mov	r3, r0
 80041c0:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 80041c2:	2300      	movs	r3, #0
 80041c4:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 80041c6:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80041ca:	f7fe fd79 	bl	8002cc0 <WIZCHIP_READ>
 80041ce:	4603      	mov	r3, r0
 80041d0:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 80041d2:	7bfb      	ldrb	r3, [r7, #15]
 80041d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d102      	bne.n	80041e2 <wizphy_setphypmode+0x2a>
 80041dc:	f04f 33ff 	mov.w	r3, #4294967295
 80041e0:	e030      	b.n	8004244 <wizphy_setphypmode+0x8c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 80041e2:	7bfb      	ldrb	r3, [r7, #15]
 80041e4:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80041e8:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 80041ea:	79fb      	ldrb	r3, [r7, #7]
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d104      	bne.n	80041fa <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 80041f0:	7bfb      	ldrb	r3, [r7, #15]
 80041f2:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80041f6:	73fb      	strb	r3, [r7, #15]
 80041f8:	e003      	b.n	8004202 <wizphy_setphypmode+0x4a>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 80041fa:	7bfb      	ldrb	r3, [r7, #15]
 80041fc:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8004200:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 8004202:	7bfb      	ldrb	r3, [r7, #15]
 8004204:	4619      	mov	r1, r3
 8004206:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800420a:	f7fe fda5 	bl	8002d58 <WIZCHIP_WRITE>
   wizphy_reset();
 800420e:	f7ff ff1e 	bl	800404e <wizphy_reset>
   tmp = getPHYCFGR();
 8004212:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8004216:	f7fe fd53 	bl	8002cc0 <WIZCHIP_READ>
 800421a:	4603      	mov	r3, r0
 800421c:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 800421e:	79fb      	ldrb	r3, [r7, #7]
 8004220:	2b01      	cmp	r3, #1
 8004222:	d106      	bne.n	8004232 <wizphy_setphypmode+0x7a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 8004224:	7bfb      	ldrb	r3, [r7, #15]
 8004226:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800422a:	2b00      	cmp	r3, #0
 800422c:	d008      	beq.n	8004240 <wizphy_setphypmode+0x88>
 800422e:	2300      	movs	r3, #0
 8004230:	e008      	b.n	8004244 <wizphy_setphypmode+0x8c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 8004232:	7bfb      	ldrb	r3, [r7, #15]
 8004234:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004238:	2b00      	cmp	r3, #0
 800423a:	d001      	beq.n	8004240 <wizphy_setphypmode+0x88>
 800423c:	2300      	movs	r3, #0
 800423e:	e001      	b.n	8004244 <wizphy_setphypmode+0x8c>
   }
   return -1;
 8004240:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004244:	4618      	mov	r0, r3
 8004246:	3710      	adds	r7, #16
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}

0800424c <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b082      	sub	sp, #8
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2206      	movs	r2, #6
 8004258:	4619      	mov	r1, r3
 800425a:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800425e:	f7fe fe29 	bl	8002eb4 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	330e      	adds	r3, #14
 8004266:	2204      	movs	r2, #4
 8004268:	4619      	mov	r1, r3
 800426a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800426e:	f7fe fe21 	bl	8002eb4 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	330a      	adds	r3, #10
 8004276:	2204      	movs	r2, #4
 8004278:	4619      	mov	r1, r3
 800427a:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 800427e:	f7fe fe19 	bl	8002eb4 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	3306      	adds	r3, #6
 8004286:	2204      	movs	r2, #4
 8004288:	4619      	mov	r1, r3
 800428a:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800428e:	f7fe fe11 	bl	8002eb4 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	7c9a      	ldrb	r2, [r3, #18]
 8004296:	4b0b      	ldr	r3, [pc, #44]	; (80042c4 <wizchip_setnetinfo+0x78>)
 8004298:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	7cda      	ldrb	r2, [r3, #19]
 800429e:	4b09      	ldr	r3, [pc, #36]	; (80042c4 <wizchip_setnetinfo+0x78>)
 80042a0:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	7d1a      	ldrb	r2, [r3, #20]
 80042a6:	4b07      	ldr	r3, [pc, #28]	; (80042c4 <wizchip_setnetinfo+0x78>)
 80042a8:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	7d5a      	ldrb	r2, [r3, #21]
 80042ae:	4b05      	ldr	r3, [pc, #20]	; (80042c4 <wizchip_setnetinfo+0x78>)
 80042b0:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	7d9a      	ldrb	r2, [r3, #22]
 80042b6:	4b04      	ldr	r3, [pc, #16]	; (80042c8 <wizchip_setnetinfo+0x7c>)
 80042b8:	701a      	strb	r2, [r3, #0]
}
 80042ba:	bf00      	nop
 80042bc:	3708      	adds	r7, #8
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	bf00      	nop
 80042c4:	200000ec 	.word	0x200000ec
 80042c8:	200000f0 	.word	0x200000f0

080042cc <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b082      	sub	sp, #8
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2206      	movs	r2, #6
 80042d8:	4619      	mov	r1, r3
 80042da:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80042de:	f7fe fd89 	bl	8002df4 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	330e      	adds	r3, #14
 80042e6:	2204      	movs	r2, #4
 80042e8:	4619      	mov	r1, r3
 80042ea:	f44f 7080 	mov.w	r0, #256	; 0x100
 80042ee:	f7fe fd81 	bl	8002df4 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	330a      	adds	r3, #10
 80042f6:	2204      	movs	r2, #4
 80042f8:	4619      	mov	r1, r3
 80042fa:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80042fe:	f7fe fd79 	bl	8002df4 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	3306      	adds	r3, #6
 8004306:	2204      	movs	r2, #4
 8004308:	4619      	mov	r1, r3
 800430a:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800430e:	f7fe fd71 	bl	8002df4 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 8004312:	4b0c      	ldr	r3, [pc, #48]	; (8004344 <wizchip_getnetinfo+0x78>)
 8004314:	781a      	ldrb	r2, [r3, #0]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 800431a:	4b0a      	ldr	r3, [pc, #40]	; (8004344 <wizchip_getnetinfo+0x78>)
 800431c:	785a      	ldrb	r2, [r3, #1]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 8004322:	4b08      	ldr	r3, [pc, #32]	; (8004344 <wizchip_getnetinfo+0x78>)
 8004324:	789a      	ldrb	r2, [r3, #2]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 800432a:	4b06      	ldr	r3, [pc, #24]	; (8004344 <wizchip_getnetinfo+0x78>)
 800432c:	78da      	ldrb	r2, [r3, #3]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 8004332:	4b05      	ldr	r3, [pc, #20]	; (8004348 <wizchip_getnetinfo+0x7c>)
 8004334:	781a      	ldrb	r2, [r3, #0]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	759a      	strb	r2, [r3, #22]
}
 800433a:	bf00      	nop
 800433c:	3708      	adds	r7, #8
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}
 8004342:	bf00      	nop
 8004344:	200000ec 	.word	0x200000ec
 8004348:	200000f0 	.word	0x200000f0

0800434c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800434c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004384 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004350:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004352:	e003      	b.n	800435c <LoopCopyDataInit>

08004354 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004354:	4b0c      	ldr	r3, [pc, #48]	; (8004388 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004356:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004358:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800435a:	3104      	adds	r1, #4

0800435c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800435c:	480b      	ldr	r0, [pc, #44]	; (800438c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800435e:	4b0c      	ldr	r3, [pc, #48]	; (8004390 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004360:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004362:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004364:	d3f6      	bcc.n	8004354 <CopyDataInit>
  ldr  r2, =_sbss
 8004366:	4a0b      	ldr	r2, [pc, #44]	; (8004394 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004368:	e002      	b.n	8004370 <LoopFillZerobss>

0800436a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800436a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800436c:	f842 3b04 	str.w	r3, [r2], #4

08004370 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004370:	4b09      	ldr	r3, [pc, #36]	; (8004398 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004372:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004374:	d3f9      	bcc.n	800436a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004376:	f7fc fd75 	bl	8000e64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800437a:	f000 f817 	bl	80043ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800437e:	f7fc f981 	bl	8000684 <main>
  bx  lr    
 8004382:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004384:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004388:	08005a7c 	.word	0x08005a7c
  ldr  r0, =_sdata
 800438c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004390:	200000b4 	.word	0x200000b4
  ldr  r2, =_sbss
 8004394:	200000b4 	.word	0x200000b4
  ldr  r3, = _ebss
 8004398:	20000a28 	.word	0x20000a28

0800439c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800439c:	e7fe      	b.n	800439c <ADC_IRQHandler>
	...

080043a0 <__errno>:
 80043a0:	4b01      	ldr	r3, [pc, #4]	; (80043a8 <__errno+0x8>)
 80043a2:	6818      	ldr	r0, [r3, #0]
 80043a4:	4770      	bx	lr
 80043a6:	bf00      	nop
 80043a8:	20000050 	.word	0x20000050

080043ac <__libc_init_array>:
 80043ac:	b570      	push	{r4, r5, r6, lr}
 80043ae:	4e0d      	ldr	r6, [pc, #52]	; (80043e4 <__libc_init_array+0x38>)
 80043b0:	4c0d      	ldr	r4, [pc, #52]	; (80043e8 <__libc_init_array+0x3c>)
 80043b2:	1ba4      	subs	r4, r4, r6
 80043b4:	10a4      	asrs	r4, r4, #2
 80043b6:	2500      	movs	r5, #0
 80043b8:	42a5      	cmp	r5, r4
 80043ba:	d109      	bne.n	80043d0 <__libc_init_array+0x24>
 80043bc:	4e0b      	ldr	r6, [pc, #44]	; (80043ec <__libc_init_array+0x40>)
 80043be:	4c0c      	ldr	r4, [pc, #48]	; (80043f0 <__libc_init_array+0x44>)
 80043c0:	f001 fa0a 	bl	80057d8 <_init>
 80043c4:	1ba4      	subs	r4, r4, r6
 80043c6:	10a4      	asrs	r4, r4, #2
 80043c8:	2500      	movs	r5, #0
 80043ca:	42a5      	cmp	r5, r4
 80043cc:	d105      	bne.n	80043da <__libc_init_array+0x2e>
 80043ce:	bd70      	pop	{r4, r5, r6, pc}
 80043d0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80043d4:	4798      	blx	r3
 80043d6:	3501      	adds	r5, #1
 80043d8:	e7ee      	b.n	80043b8 <__libc_init_array+0xc>
 80043da:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80043de:	4798      	blx	r3
 80043e0:	3501      	adds	r5, #1
 80043e2:	e7f2      	b.n	80043ca <__libc_init_array+0x1e>
 80043e4:	08005a74 	.word	0x08005a74
 80043e8:	08005a74 	.word	0x08005a74
 80043ec:	08005a74 	.word	0x08005a74
 80043f0:	08005a78 	.word	0x08005a78

080043f4 <malloc>:
 80043f4:	4b02      	ldr	r3, [pc, #8]	; (8004400 <malloc+0xc>)
 80043f6:	4601      	mov	r1, r0
 80043f8:	6818      	ldr	r0, [r3, #0]
 80043fa:	f000 b865 	b.w	80044c8 <_malloc_r>
 80043fe:	bf00      	nop
 8004400:	20000050 	.word	0x20000050

08004404 <memcpy>:
 8004404:	b510      	push	{r4, lr}
 8004406:	1e43      	subs	r3, r0, #1
 8004408:	440a      	add	r2, r1
 800440a:	4291      	cmp	r1, r2
 800440c:	d100      	bne.n	8004410 <memcpy+0xc>
 800440e:	bd10      	pop	{r4, pc}
 8004410:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004414:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004418:	e7f7      	b.n	800440a <memcpy+0x6>

0800441a <memset>:
 800441a:	4402      	add	r2, r0
 800441c:	4603      	mov	r3, r0
 800441e:	4293      	cmp	r3, r2
 8004420:	d100      	bne.n	8004424 <memset+0xa>
 8004422:	4770      	bx	lr
 8004424:	f803 1b01 	strb.w	r1, [r3], #1
 8004428:	e7f9      	b.n	800441e <memset+0x4>
	...

0800442c <_free_r>:
 800442c:	b538      	push	{r3, r4, r5, lr}
 800442e:	4605      	mov	r5, r0
 8004430:	2900      	cmp	r1, #0
 8004432:	d045      	beq.n	80044c0 <_free_r+0x94>
 8004434:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004438:	1f0c      	subs	r4, r1, #4
 800443a:	2b00      	cmp	r3, #0
 800443c:	bfb8      	it	lt
 800443e:	18e4      	addlt	r4, r4, r3
 8004440:	f000 fd16 	bl	8004e70 <__malloc_lock>
 8004444:	4a1f      	ldr	r2, [pc, #124]	; (80044c4 <_free_r+0x98>)
 8004446:	6813      	ldr	r3, [r2, #0]
 8004448:	4610      	mov	r0, r2
 800444a:	b933      	cbnz	r3, 800445a <_free_r+0x2e>
 800444c:	6063      	str	r3, [r4, #4]
 800444e:	6014      	str	r4, [r2, #0]
 8004450:	4628      	mov	r0, r5
 8004452:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004456:	f000 bd0c 	b.w	8004e72 <__malloc_unlock>
 800445a:	42a3      	cmp	r3, r4
 800445c:	d90c      	bls.n	8004478 <_free_r+0x4c>
 800445e:	6821      	ldr	r1, [r4, #0]
 8004460:	1862      	adds	r2, r4, r1
 8004462:	4293      	cmp	r3, r2
 8004464:	bf04      	itt	eq
 8004466:	681a      	ldreq	r2, [r3, #0]
 8004468:	685b      	ldreq	r3, [r3, #4]
 800446a:	6063      	str	r3, [r4, #4]
 800446c:	bf04      	itt	eq
 800446e:	1852      	addeq	r2, r2, r1
 8004470:	6022      	streq	r2, [r4, #0]
 8004472:	6004      	str	r4, [r0, #0]
 8004474:	e7ec      	b.n	8004450 <_free_r+0x24>
 8004476:	4613      	mov	r3, r2
 8004478:	685a      	ldr	r2, [r3, #4]
 800447a:	b10a      	cbz	r2, 8004480 <_free_r+0x54>
 800447c:	42a2      	cmp	r2, r4
 800447e:	d9fa      	bls.n	8004476 <_free_r+0x4a>
 8004480:	6819      	ldr	r1, [r3, #0]
 8004482:	1858      	adds	r0, r3, r1
 8004484:	42a0      	cmp	r0, r4
 8004486:	d10b      	bne.n	80044a0 <_free_r+0x74>
 8004488:	6820      	ldr	r0, [r4, #0]
 800448a:	4401      	add	r1, r0
 800448c:	1858      	adds	r0, r3, r1
 800448e:	4282      	cmp	r2, r0
 8004490:	6019      	str	r1, [r3, #0]
 8004492:	d1dd      	bne.n	8004450 <_free_r+0x24>
 8004494:	6810      	ldr	r0, [r2, #0]
 8004496:	6852      	ldr	r2, [r2, #4]
 8004498:	605a      	str	r2, [r3, #4]
 800449a:	4401      	add	r1, r0
 800449c:	6019      	str	r1, [r3, #0]
 800449e:	e7d7      	b.n	8004450 <_free_r+0x24>
 80044a0:	d902      	bls.n	80044a8 <_free_r+0x7c>
 80044a2:	230c      	movs	r3, #12
 80044a4:	602b      	str	r3, [r5, #0]
 80044a6:	e7d3      	b.n	8004450 <_free_r+0x24>
 80044a8:	6820      	ldr	r0, [r4, #0]
 80044aa:	1821      	adds	r1, r4, r0
 80044ac:	428a      	cmp	r2, r1
 80044ae:	bf04      	itt	eq
 80044b0:	6811      	ldreq	r1, [r2, #0]
 80044b2:	6852      	ldreq	r2, [r2, #4]
 80044b4:	6062      	str	r2, [r4, #4]
 80044b6:	bf04      	itt	eq
 80044b8:	1809      	addeq	r1, r1, r0
 80044ba:	6021      	streq	r1, [r4, #0]
 80044bc:	605c      	str	r4, [r3, #4]
 80044be:	e7c7      	b.n	8004450 <_free_r+0x24>
 80044c0:	bd38      	pop	{r3, r4, r5, pc}
 80044c2:	bf00      	nop
 80044c4:	200000f4 	.word	0x200000f4

080044c8 <_malloc_r>:
 80044c8:	b570      	push	{r4, r5, r6, lr}
 80044ca:	1ccd      	adds	r5, r1, #3
 80044cc:	f025 0503 	bic.w	r5, r5, #3
 80044d0:	3508      	adds	r5, #8
 80044d2:	2d0c      	cmp	r5, #12
 80044d4:	bf38      	it	cc
 80044d6:	250c      	movcc	r5, #12
 80044d8:	2d00      	cmp	r5, #0
 80044da:	4606      	mov	r6, r0
 80044dc:	db01      	blt.n	80044e2 <_malloc_r+0x1a>
 80044de:	42a9      	cmp	r1, r5
 80044e0:	d903      	bls.n	80044ea <_malloc_r+0x22>
 80044e2:	230c      	movs	r3, #12
 80044e4:	6033      	str	r3, [r6, #0]
 80044e6:	2000      	movs	r0, #0
 80044e8:	bd70      	pop	{r4, r5, r6, pc}
 80044ea:	f000 fcc1 	bl	8004e70 <__malloc_lock>
 80044ee:	4a23      	ldr	r2, [pc, #140]	; (800457c <_malloc_r+0xb4>)
 80044f0:	6814      	ldr	r4, [r2, #0]
 80044f2:	4621      	mov	r1, r4
 80044f4:	b991      	cbnz	r1, 800451c <_malloc_r+0x54>
 80044f6:	4c22      	ldr	r4, [pc, #136]	; (8004580 <_malloc_r+0xb8>)
 80044f8:	6823      	ldr	r3, [r4, #0]
 80044fa:	b91b      	cbnz	r3, 8004504 <_malloc_r+0x3c>
 80044fc:	4630      	mov	r0, r6
 80044fe:	f000 f8bd 	bl	800467c <_sbrk_r>
 8004502:	6020      	str	r0, [r4, #0]
 8004504:	4629      	mov	r1, r5
 8004506:	4630      	mov	r0, r6
 8004508:	f000 f8b8 	bl	800467c <_sbrk_r>
 800450c:	1c43      	adds	r3, r0, #1
 800450e:	d126      	bne.n	800455e <_malloc_r+0x96>
 8004510:	230c      	movs	r3, #12
 8004512:	6033      	str	r3, [r6, #0]
 8004514:	4630      	mov	r0, r6
 8004516:	f000 fcac 	bl	8004e72 <__malloc_unlock>
 800451a:	e7e4      	b.n	80044e6 <_malloc_r+0x1e>
 800451c:	680b      	ldr	r3, [r1, #0]
 800451e:	1b5b      	subs	r3, r3, r5
 8004520:	d41a      	bmi.n	8004558 <_malloc_r+0x90>
 8004522:	2b0b      	cmp	r3, #11
 8004524:	d90f      	bls.n	8004546 <_malloc_r+0x7e>
 8004526:	600b      	str	r3, [r1, #0]
 8004528:	50cd      	str	r5, [r1, r3]
 800452a:	18cc      	adds	r4, r1, r3
 800452c:	4630      	mov	r0, r6
 800452e:	f000 fca0 	bl	8004e72 <__malloc_unlock>
 8004532:	f104 000b 	add.w	r0, r4, #11
 8004536:	1d23      	adds	r3, r4, #4
 8004538:	f020 0007 	bic.w	r0, r0, #7
 800453c:	1ac3      	subs	r3, r0, r3
 800453e:	d01b      	beq.n	8004578 <_malloc_r+0xb0>
 8004540:	425a      	negs	r2, r3
 8004542:	50e2      	str	r2, [r4, r3]
 8004544:	bd70      	pop	{r4, r5, r6, pc}
 8004546:	428c      	cmp	r4, r1
 8004548:	bf0d      	iteet	eq
 800454a:	6863      	ldreq	r3, [r4, #4]
 800454c:	684b      	ldrne	r3, [r1, #4]
 800454e:	6063      	strne	r3, [r4, #4]
 8004550:	6013      	streq	r3, [r2, #0]
 8004552:	bf18      	it	ne
 8004554:	460c      	movne	r4, r1
 8004556:	e7e9      	b.n	800452c <_malloc_r+0x64>
 8004558:	460c      	mov	r4, r1
 800455a:	6849      	ldr	r1, [r1, #4]
 800455c:	e7ca      	b.n	80044f4 <_malloc_r+0x2c>
 800455e:	1cc4      	adds	r4, r0, #3
 8004560:	f024 0403 	bic.w	r4, r4, #3
 8004564:	42a0      	cmp	r0, r4
 8004566:	d005      	beq.n	8004574 <_malloc_r+0xac>
 8004568:	1a21      	subs	r1, r4, r0
 800456a:	4630      	mov	r0, r6
 800456c:	f000 f886 	bl	800467c <_sbrk_r>
 8004570:	3001      	adds	r0, #1
 8004572:	d0cd      	beq.n	8004510 <_malloc_r+0x48>
 8004574:	6025      	str	r5, [r4, #0]
 8004576:	e7d9      	b.n	800452c <_malloc_r+0x64>
 8004578:	bd70      	pop	{r4, r5, r6, pc}
 800457a:	bf00      	nop
 800457c:	200000f4 	.word	0x200000f4
 8004580:	200000f8 	.word	0x200000f8

08004584 <iprintf>:
 8004584:	b40f      	push	{r0, r1, r2, r3}
 8004586:	4b0a      	ldr	r3, [pc, #40]	; (80045b0 <iprintf+0x2c>)
 8004588:	b513      	push	{r0, r1, r4, lr}
 800458a:	681c      	ldr	r4, [r3, #0]
 800458c:	b124      	cbz	r4, 8004598 <iprintf+0x14>
 800458e:	69a3      	ldr	r3, [r4, #24]
 8004590:	b913      	cbnz	r3, 8004598 <iprintf+0x14>
 8004592:	4620      	mov	r0, r4
 8004594:	f000 fb6c 	bl	8004c70 <__sinit>
 8004598:	ab05      	add	r3, sp, #20
 800459a:	9a04      	ldr	r2, [sp, #16]
 800459c:	68a1      	ldr	r1, [r4, #8]
 800459e:	9301      	str	r3, [sp, #4]
 80045a0:	4620      	mov	r0, r4
 80045a2:	f000 fde1 	bl	8005168 <_vfiprintf_r>
 80045a6:	b002      	add	sp, #8
 80045a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045ac:	b004      	add	sp, #16
 80045ae:	4770      	bx	lr
 80045b0:	20000050 	.word	0x20000050

080045b4 <_puts_r>:
 80045b4:	b570      	push	{r4, r5, r6, lr}
 80045b6:	460e      	mov	r6, r1
 80045b8:	4605      	mov	r5, r0
 80045ba:	b118      	cbz	r0, 80045c4 <_puts_r+0x10>
 80045bc:	6983      	ldr	r3, [r0, #24]
 80045be:	b90b      	cbnz	r3, 80045c4 <_puts_r+0x10>
 80045c0:	f000 fb56 	bl	8004c70 <__sinit>
 80045c4:	69ab      	ldr	r3, [r5, #24]
 80045c6:	68ac      	ldr	r4, [r5, #8]
 80045c8:	b913      	cbnz	r3, 80045d0 <_puts_r+0x1c>
 80045ca:	4628      	mov	r0, r5
 80045cc:	f000 fb50 	bl	8004c70 <__sinit>
 80045d0:	4b23      	ldr	r3, [pc, #140]	; (8004660 <_puts_r+0xac>)
 80045d2:	429c      	cmp	r4, r3
 80045d4:	d117      	bne.n	8004606 <_puts_r+0x52>
 80045d6:	686c      	ldr	r4, [r5, #4]
 80045d8:	89a3      	ldrh	r3, [r4, #12]
 80045da:	071b      	lsls	r3, r3, #28
 80045dc:	d51d      	bpl.n	800461a <_puts_r+0x66>
 80045de:	6923      	ldr	r3, [r4, #16]
 80045e0:	b1db      	cbz	r3, 800461a <_puts_r+0x66>
 80045e2:	3e01      	subs	r6, #1
 80045e4:	68a3      	ldr	r3, [r4, #8]
 80045e6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80045ea:	3b01      	subs	r3, #1
 80045ec:	60a3      	str	r3, [r4, #8]
 80045ee:	b9e9      	cbnz	r1, 800462c <_puts_r+0x78>
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	da2e      	bge.n	8004652 <_puts_r+0x9e>
 80045f4:	4622      	mov	r2, r4
 80045f6:	210a      	movs	r1, #10
 80045f8:	4628      	mov	r0, r5
 80045fa:	f000 f965 	bl	80048c8 <__swbuf_r>
 80045fe:	3001      	adds	r0, #1
 8004600:	d011      	beq.n	8004626 <_puts_r+0x72>
 8004602:	200a      	movs	r0, #10
 8004604:	bd70      	pop	{r4, r5, r6, pc}
 8004606:	4b17      	ldr	r3, [pc, #92]	; (8004664 <_puts_r+0xb0>)
 8004608:	429c      	cmp	r4, r3
 800460a:	d101      	bne.n	8004610 <_puts_r+0x5c>
 800460c:	68ac      	ldr	r4, [r5, #8]
 800460e:	e7e3      	b.n	80045d8 <_puts_r+0x24>
 8004610:	4b15      	ldr	r3, [pc, #84]	; (8004668 <_puts_r+0xb4>)
 8004612:	429c      	cmp	r4, r3
 8004614:	bf08      	it	eq
 8004616:	68ec      	ldreq	r4, [r5, #12]
 8004618:	e7de      	b.n	80045d8 <_puts_r+0x24>
 800461a:	4621      	mov	r1, r4
 800461c:	4628      	mov	r0, r5
 800461e:	f000 f9b7 	bl	8004990 <__swsetup_r>
 8004622:	2800      	cmp	r0, #0
 8004624:	d0dd      	beq.n	80045e2 <_puts_r+0x2e>
 8004626:	f04f 30ff 	mov.w	r0, #4294967295
 800462a:	bd70      	pop	{r4, r5, r6, pc}
 800462c:	2b00      	cmp	r3, #0
 800462e:	da04      	bge.n	800463a <_puts_r+0x86>
 8004630:	69a2      	ldr	r2, [r4, #24]
 8004632:	4293      	cmp	r3, r2
 8004634:	db06      	blt.n	8004644 <_puts_r+0x90>
 8004636:	290a      	cmp	r1, #10
 8004638:	d004      	beq.n	8004644 <_puts_r+0x90>
 800463a:	6823      	ldr	r3, [r4, #0]
 800463c:	1c5a      	adds	r2, r3, #1
 800463e:	6022      	str	r2, [r4, #0]
 8004640:	7019      	strb	r1, [r3, #0]
 8004642:	e7cf      	b.n	80045e4 <_puts_r+0x30>
 8004644:	4622      	mov	r2, r4
 8004646:	4628      	mov	r0, r5
 8004648:	f000 f93e 	bl	80048c8 <__swbuf_r>
 800464c:	3001      	adds	r0, #1
 800464e:	d1c9      	bne.n	80045e4 <_puts_r+0x30>
 8004650:	e7e9      	b.n	8004626 <_puts_r+0x72>
 8004652:	6823      	ldr	r3, [r4, #0]
 8004654:	200a      	movs	r0, #10
 8004656:	1c5a      	adds	r2, r3, #1
 8004658:	6022      	str	r2, [r4, #0]
 800465a:	7018      	strb	r0, [r3, #0]
 800465c:	bd70      	pop	{r4, r5, r6, pc}
 800465e:	bf00      	nop
 8004660:	080059f8 	.word	0x080059f8
 8004664:	08005a18 	.word	0x08005a18
 8004668:	080059d8 	.word	0x080059d8

0800466c <puts>:
 800466c:	4b02      	ldr	r3, [pc, #8]	; (8004678 <puts+0xc>)
 800466e:	4601      	mov	r1, r0
 8004670:	6818      	ldr	r0, [r3, #0]
 8004672:	f7ff bf9f 	b.w	80045b4 <_puts_r>
 8004676:	bf00      	nop
 8004678:	20000050 	.word	0x20000050

0800467c <_sbrk_r>:
 800467c:	b538      	push	{r3, r4, r5, lr}
 800467e:	4c06      	ldr	r4, [pc, #24]	; (8004698 <_sbrk_r+0x1c>)
 8004680:	2300      	movs	r3, #0
 8004682:	4605      	mov	r5, r0
 8004684:	4608      	mov	r0, r1
 8004686:	6023      	str	r3, [r4, #0]
 8004688:	f001 f898 	bl	80057bc <_sbrk>
 800468c:	1c43      	adds	r3, r0, #1
 800468e:	d102      	bne.n	8004696 <_sbrk_r+0x1a>
 8004690:	6823      	ldr	r3, [r4, #0]
 8004692:	b103      	cbz	r3, 8004696 <_sbrk_r+0x1a>
 8004694:	602b      	str	r3, [r5, #0]
 8004696:	bd38      	pop	{r3, r4, r5, pc}
 8004698:	20000a24 	.word	0x20000a24

0800469c <setvbuf>:
 800469c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80046a0:	461d      	mov	r5, r3
 80046a2:	4b51      	ldr	r3, [pc, #324]	; (80047e8 <setvbuf+0x14c>)
 80046a4:	681e      	ldr	r6, [r3, #0]
 80046a6:	4604      	mov	r4, r0
 80046a8:	460f      	mov	r7, r1
 80046aa:	4690      	mov	r8, r2
 80046ac:	b126      	cbz	r6, 80046b8 <setvbuf+0x1c>
 80046ae:	69b3      	ldr	r3, [r6, #24]
 80046b0:	b913      	cbnz	r3, 80046b8 <setvbuf+0x1c>
 80046b2:	4630      	mov	r0, r6
 80046b4:	f000 fadc 	bl	8004c70 <__sinit>
 80046b8:	4b4c      	ldr	r3, [pc, #304]	; (80047ec <setvbuf+0x150>)
 80046ba:	429c      	cmp	r4, r3
 80046bc:	d152      	bne.n	8004764 <setvbuf+0xc8>
 80046be:	6874      	ldr	r4, [r6, #4]
 80046c0:	f1b8 0f02 	cmp.w	r8, #2
 80046c4:	d006      	beq.n	80046d4 <setvbuf+0x38>
 80046c6:	f1b8 0f01 	cmp.w	r8, #1
 80046ca:	f200 8089 	bhi.w	80047e0 <setvbuf+0x144>
 80046ce:	2d00      	cmp	r5, #0
 80046d0:	f2c0 8086 	blt.w	80047e0 <setvbuf+0x144>
 80046d4:	4621      	mov	r1, r4
 80046d6:	4630      	mov	r0, r6
 80046d8:	f000 fa60 	bl	8004b9c <_fflush_r>
 80046dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80046de:	b141      	cbz	r1, 80046f2 <setvbuf+0x56>
 80046e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80046e4:	4299      	cmp	r1, r3
 80046e6:	d002      	beq.n	80046ee <setvbuf+0x52>
 80046e8:	4630      	mov	r0, r6
 80046ea:	f7ff fe9f 	bl	800442c <_free_r>
 80046ee:	2300      	movs	r3, #0
 80046f0:	6363      	str	r3, [r4, #52]	; 0x34
 80046f2:	2300      	movs	r3, #0
 80046f4:	61a3      	str	r3, [r4, #24]
 80046f6:	6063      	str	r3, [r4, #4]
 80046f8:	89a3      	ldrh	r3, [r4, #12]
 80046fa:	061b      	lsls	r3, r3, #24
 80046fc:	d503      	bpl.n	8004706 <setvbuf+0x6a>
 80046fe:	6921      	ldr	r1, [r4, #16]
 8004700:	4630      	mov	r0, r6
 8004702:	f7ff fe93 	bl	800442c <_free_r>
 8004706:	89a3      	ldrh	r3, [r4, #12]
 8004708:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800470c:	f023 0303 	bic.w	r3, r3, #3
 8004710:	f1b8 0f02 	cmp.w	r8, #2
 8004714:	81a3      	strh	r3, [r4, #12]
 8004716:	d05d      	beq.n	80047d4 <setvbuf+0x138>
 8004718:	ab01      	add	r3, sp, #4
 800471a:	466a      	mov	r2, sp
 800471c:	4621      	mov	r1, r4
 800471e:	4630      	mov	r0, r6
 8004720:	f000 fb42 	bl	8004da8 <__swhatbuf_r>
 8004724:	89a3      	ldrh	r3, [r4, #12]
 8004726:	4318      	orrs	r0, r3
 8004728:	81a0      	strh	r0, [r4, #12]
 800472a:	bb2d      	cbnz	r5, 8004778 <setvbuf+0xdc>
 800472c:	9d00      	ldr	r5, [sp, #0]
 800472e:	4628      	mov	r0, r5
 8004730:	f7ff fe60 	bl	80043f4 <malloc>
 8004734:	4607      	mov	r7, r0
 8004736:	2800      	cmp	r0, #0
 8004738:	d14e      	bne.n	80047d8 <setvbuf+0x13c>
 800473a:	f8dd 9000 	ldr.w	r9, [sp]
 800473e:	45a9      	cmp	r9, r5
 8004740:	d13c      	bne.n	80047bc <setvbuf+0x120>
 8004742:	f04f 30ff 	mov.w	r0, #4294967295
 8004746:	89a3      	ldrh	r3, [r4, #12]
 8004748:	f043 0302 	orr.w	r3, r3, #2
 800474c:	81a3      	strh	r3, [r4, #12]
 800474e:	2300      	movs	r3, #0
 8004750:	60a3      	str	r3, [r4, #8]
 8004752:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004756:	6023      	str	r3, [r4, #0]
 8004758:	6123      	str	r3, [r4, #16]
 800475a:	2301      	movs	r3, #1
 800475c:	6163      	str	r3, [r4, #20]
 800475e:	b003      	add	sp, #12
 8004760:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004764:	4b22      	ldr	r3, [pc, #136]	; (80047f0 <setvbuf+0x154>)
 8004766:	429c      	cmp	r4, r3
 8004768:	d101      	bne.n	800476e <setvbuf+0xd2>
 800476a:	68b4      	ldr	r4, [r6, #8]
 800476c:	e7a8      	b.n	80046c0 <setvbuf+0x24>
 800476e:	4b21      	ldr	r3, [pc, #132]	; (80047f4 <setvbuf+0x158>)
 8004770:	429c      	cmp	r4, r3
 8004772:	bf08      	it	eq
 8004774:	68f4      	ldreq	r4, [r6, #12]
 8004776:	e7a3      	b.n	80046c0 <setvbuf+0x24>
 8004778:	2f00      	cmp	r7, #0
 800477a:	d0d8      	beq.n	800472e <setvbuf+0x92>
 800477c:	69b3      	ldr	r3, [r6, #24]
 800477e:	b913      	cbnz	r3, 8004786 <setvbuf+0xea>
 8004780:	4630      	mov	r0, r6
 8004782:	f000 fa75 	bl	8004c70 <__sinit>
 8004786:	f1b8 0f01 	cmp.w	r8, #1
 800478a:	bf08      	it	eq
 800478c:	89a3      	ldrheq	r3, [r4, #12]
 800478e:	6027      	str	r7, [r4, #0]
 8004790:	bf04      	itt	eq
 8004792:	f043 0301 	orreq.w	r3, r3, #1
 8004796:	81a3      	strheq	r3, [r4, #12]
 8004798:	89a3      	ldrh	r3, [r4, #12]
 800479a:	6127      	str	r7, [r4, #16]
 800479c:	f013 0008 	ands.w	r0, r3, #8
 80047a0:	6165      	str	r5, [r4, #20]
 80047a2:	d01b      	beq.n	80047dc <setvbuf+0x140>
 80047a4:	f013 0001 	ands.w	r0, r3, #1
 80047a8:	bf18      	it	ne
 80047aa:	426d      	negne	r5, r5
 80047ac:	f04f 0300 	mov.w	r3, #0
 80047b0:	bf1d      	ittte	ne
 80047b2:	60a3      	strne	r3, [r4, #8]
 80047b4:	61a5      	strne	r5, [r4, #24]
 80047b6:	4618      	movne	r0, r3
 80047b8:	60a5      	streq	r5, [r4, #8]
 80047ba:	e7d0      	b.n	800475e <setvbuf+0xc2>
 80047bc:	4648      	mov	r0, r9
 80047be:	f7ff fe19 	bl	80043f4 <malloc>
 80047c2:	4607      	mov	r7, r0
 80047c4:	2800      	cmp	r0, #0
 80047c6:	d0bc      	beq.n	8004742 <setvbuf+0xa6>
 80047c8:	89a3      	ldrh	r3, [r4, #12]
 80047ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047ce:	81a3      	strh	r3, [r4, #12]
 80047d0:	464d      	mov	r5, r9
 80047d2:	e7d3      	b.n	800477c <setvbuf+0xe0>
 80047d4:	2000      	movs	r0, #0
 80047d6:	e7b6      	b.n	8004746 <setvbuf+0xaa>
 80047d8:	46a9      	mov	r9, r5
 80047da:	e7f5      	b.n	80047c8 <setvbuf+0x12c>
 80047dc:	60a0      	str	r0, [r4, #8]
 80047de:	e7be      	b.n	800475e <setvbuf+0xc2>
 80047e0:	f04f 30ff 	mov.w	r0, #4294967295
 80047e4:	e7bb      	b.n	800475e <setvbuf+0xc2>
 80047e6:	bf00      	nop
 80047e8:	20000050 	.word	0x20000050
 80047ec:	080059f8 	.word	0x080059f8
 80047f0:	08005a18 	.word	0x08005a18
 80047f4:	080059d8 	.word	0x080059d8

080047f8 <siprintf>:
 80047f8:	b40e      	push	{r1, r2, r3}
 80047fa:	b500      	push	{lr}
 80047fc:	b09c      	sub	sp, #112	; 0x70
 80047fe:	f44f 7102 	mov.w	r1, #520	; 0x208
 8004802:	ab1d      	add	r3, sp, #116	; 0x74
 8004804:	f8ad 1014 	strh.w	r1, [sp, #20]
 8004808:	9002      	str	r0, [sp, #8]
 800480a:	9006      	str	r0, [sp, #24]
 800480c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004810:	480a      	ldr	r0, [pc, #40]	; (800483c <siprintf+0x44>)
 8004812:	9104      	str	r1, [sp, #16]
 8004814:	9107      	str	r1, [sp, #28]
 8004816:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800481a:	f853 2b04 	ldr.w	r2, [r3], #4
 800481e:	f8ad 1016 	strh.w	r1, [sp, #22]
 8004822:	6800      	ldr	r0, [r0, #0]
 8004824:	9301      	str	r3, [sp, #4]
 8004826:	a902      	add	r1, sp, #8
 8004828:	f000 fb80 	bl	8004f2c <_svfiprintf_r>
 800482c:	9b02      	ldr	r3, [sp, #8]
 800482e:	2200      	movs	r2, #0
 8004830:	701a      	strb	r2, [r3, #0]
 8004832:	b01c      	add	sp, #112	; 0x70
 8004834:	f85d eb04 	ldr.w	lr, [sp], #4
 8004838:	b003      	add	sp, #12
 800483a:	4770      	bx	lr
 800483c:	20000050 	.word	0x20000050

08004840 <__sread>:
 8004840:	b510      	push	{r4, lr}
 8004842:	460c      	mov	r4, r1
 8004844:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004848:	f000 ff3a 	bl	80056c0 <_read_r>
 800484c:	2800      	cmp	r0, #0
 800484e:	bfab      	itete	ge
 8004850:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004852:	89a3      	ldrhlt	r3, [r4, #12]
 8004854:	181b      	addge	r3, r3, r0
 8004856:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800485a:	bfac      	ite	ge
 800485c:	6563      	strge	r3, [r4, #84]	; 0x54
 800485e:	81a3      	strhlt	r3, [r4, #12]
 8004860:	bd10      	pop	{r4, pc}

08004862 <__swrite>:
 8004862:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004866:	461f      	mov	r7, r3
 8004868:	898b      	ldrh	r3, [r1, #12]
 800486a:	05db      	lsls	r3, r3, #23
 800486c:	4605      	mov	r5, r0
 800486e:	460c      	mov	r4, r1
 8004870:	4616      	mov	r6, r2
 8004872:	d505      	bpl.n	8004880 <__swrite+0x1e>
 8004874:	2302      	movs	r3, #2
 8004876:	2200      	movs	r2, #0
 8004878:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800487c:	f000 fa82 	bl	8004d84 <_lseek_r>
 8004880:	89a3      	ldrh	r3, [r4, #12]
 8004882:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004886:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800488a:	81a3      	strh	r3, [r4, #12]
 800488c:	4632      	mov	r2, r6
 800488e:	463b      	mov	r3, r7
 8004890:	4628      	mov	r0, r5
 8004892:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004896:	f000 b869 	b.w	800496c <_write_r>

0800489a <__sseek>:
 800489a:	b510      	push	{r4, lr}
 800489c:	460c      	mov	r4, r1
 800489e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048a2:	f000 fa6f 	bl	8004d84 <_lseek_r>
 80048a6:	1c43      	adds	r3, r0, #1
 80048a8:	89a3      	ldrh	r3, [r4, #12]
 80048aa:	bf15      	itete	ne
 80048ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80048ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80048b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80048b6:	81a3      	strheq	r3, [r4, #12]
 80048b8:	bf18      	it	ne
 80048ba:	81a3      	strhne	r3, [r4, #12]
 80048bc:	bd10      	pop	{r4, pc}

080048be <__sclose>:
 80048be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048c2:	f000 b8d3 	b.w	8004a6c <_close_r>
	...

080048c8 <__swbuf_r>:
 80048c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048ca:	460e      	mov	r6, r1
 80048cc:	4614      	mov	r4, r2
 80048ce:	4605      	mov	r5, r0
 80048d0:	b118      	cbz	r0, 80048da <__swbuf_r+0x12>
 80048d2:	6983      	ldr	r3, [r0, #24]
 80048d4:	b90b      	cbnz	r3, 80048da <__swbuf_r+0x12>
 80048d6:	f000 f9cb 	bl	8004c70 <__sinit>
 80048da:	4b21      	ldr	r3, [pc, #132]	; (8004960 <__swbuf_r+0x98>)
 80048dc:	429c      	cmp	r4, r3
 80048de:	d12a      	bne.n	8004936 <__swbuf_r+0x6e>
 80048e0:	686c      	ldr	r4, [r5, #4]
 80048e2:	69a3      	ldr	r3, [r4, #24]
 80048e4:	60a3      	str	r3, [r4, #8]
 80048e6:	89a3      	ldrh	r3, [r4, #12]
 80048e8:	071a      	lsls	r2, r3, #28
 80048ea:	d52e      	bpl.n	800494a <__swbuf_r+0x82>
 80048ec:	6923      	ldr	r3, [r4, #16]
 80048ee:	b363      	cbz	r3, 800494a <__swbuf_r+0x82>
 80048f0:	6923      	ldr	r3, [r4, #16]
 80048f2:	6820      	ldr	r0, [r4, #0]
 80048f4:	1ac0      	subs	r0, r0, r3
 80048f6:	6963      	ldr	r3, [r4, #20]
 80048f8:	b2f6      	uxtb	r6, r6
 80048fa:	4298      	cmp	r0, r3
 80048fc:	4637      	mov	r7, r6
 80048fe:	db04      	blt.n	800490a <__swbuf_r+0x42>
 8004900:	4621      	mov	r1, r4
 8004902:	4628      	mov	r0, r5
 8004904:	f000 f94a 	bl	8004b9c <_fflush_r>
 8004908:	bb28      	cbnz	r0, 8004956 <__swbuf_r+0x8e>
 800490a:	68a3      	ldr	r3, [r4, #8]
 800490c:	3b01      	subs	r3, #1
 800490e:	60a3      	str	r3, [r4, #8]
 8004910:	6823      	ldr	r3, [r4, #0]
 8004912:	1c5a      	adds	r2, r3, #1
 8004914:	6022      	str	r2, [r4, #0]
 8004916:	701e      	strb	r6, [r3, #0]
 8004918:	6963      	ldr	r3, [r4, #20]
 800491a:	3001      	adds	r0, #1
 800491c:	4298      	cmp	r0, r3
 800491e:	d004      	beq.n	800492a <__swbuf_r+0x62>
 8004920:	89a3      	ldrh	r3, [r4, #12]
 8004922:	07db      	lsls	r3, r3, #31
 8004924:	d519      	bpl.n	800495a <__swbuf_r+0x92>
 8004926:	2e0a      	cmp	r6, #10
 8004928:	d117      	bne.n	800495a <__swbuf_r+0x92>
 800492a:	4621      	mov	r1, r4
 800492c:	4628      	mov	r0, r5
 800492e:	f000 f935 	bl	8004b9c <_fflush_r>
 8004932:	b190      	cbz	r0, 800495a <__swbuf_r+0x92>
 8004934:	e00f      	b.n	8004956 <__swbuf_r+0x8e>
 8004936:	4b0b      	ldr	r3, [pc, #44]	; (8004964 <__swbuf_r+0x9c>)
 8004938:	429c      	cmp	r4, r3
 800493a:	d101      	bne.n	8004940 <__swbuf_r+0x78>
 800493c:	68ac      	ldr	r4, [r5, #8]
 800493e:	e7d0      	b.n	80048e2 <__swbuf_r+0x1a>
 8004940:	4b09      	ldr	r3, [pc, #36]	; (8004968 <__swbuf_r+0xa0>)
 8004942:	429c      	cmp	r4, r3
 8004944:	bf08      	it	eq
 8004946:	68ec      	ldreq	r4, [r5, #12]
 8004948:	e7cb      	b.n	80048e2 <__swbuf_r+0x1a>
 800494a:	4621      	mov	r1, r4
 800494c:	4628      	mov	r0, r5
 800494e:	f000 f81f 	bl	8004990 <__swsetup_r>
 8004952:	2800      	cmp	r0, #0
 8004954:	d0cc      	beq.n	80048f0 <__swbuf_r+0x28>
 8004956:	f04f 37ff 	mov.w	r7, #4294967295
 800495a:	4638      	mov	r0, r7
 800495c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800495e:	bf00      	nop
 8004960:	080059f8 	.word	0x080059f8
 8004964:	08005a18 	.word	0x08005a18
 8004968:	080059d8 	.word	0x080059d8

0800496c <_write_r>:
 800496c:	b538      	push	{r3, r4, r5, lr}
 800496e:	4c07      	ldr	r4, [pc, #28]	; (800498c <_write_r+0x20>)
 8004970:	4605      	mov	r5, r0
 8004972:	4608      	mov	r0, r1
 8004974:	4611      	mov	r1, r2
 8004976:	2200      	movs	r2, #0
 8004978:	6022      	str	r2, [r4, #0]
 800497a:	461a      	mov	r2, r3
 800497c:	f7fc f8f8 	bl	8000b70 <_write>
 8004980:	1c43      	adds	r3, r0, #1
 8004982:	d102      	bne.n	800498a <_write_r+0x1e>
 8004984:	6823      	ldr	r3, [r4, #0]
 8004986:	b103      	cbz	r3, 800498a <_write_r+0x1e>
 8004988:	602b      	str	r3, [r5, #0]
 800498a:	bd38      	pop	{r3, r4, r5, pc}
 800498c:	20000a24 	.word	0x20000a24

08004990 <__swsetup_r>:
 8004990:	4b32      	ldr	r3, [pc, #200]	; (8004a5c <__swsetup_r+0xcc>)
 8004992:	b570      	push	{r4, r5, r6, lr}
 8004994:	681d      	ldr	r5, [r3, #0]
 8004996:	4606      	mov	r6, r0
 8004998:	460c      	mov	r4, r1
 800499a:	b125      	cbz	r5, 80049a6 <__swsetup_r+0x16>
 800499c:	69ab      	ldr	r3, [r5, #24]
 800499e:	b913      	cbnz	r3, 80049a6 <__swsetup_r+0x16>
 80049a0:	4628      	mov	r0, r5
 80049a2:	f000 f965 	bl	8004c70 <__sinit>
 80049a6:	4b2e      	ldr	r3, [pc, #184]	; (8004a60 <__swsetup_r+0xd0>)
 80049a8:	429c      	cmp	r4, r3
 80049aa:	d10f      	bne.n	80049cc <__swsetup_r+0x3c>
 80049ac:	686c      	ldr	r4, [r5, #4]
 80049ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049b2:	b29a      	uxth	r2, r3
 80049b4:	0715      	lsls	r5, r2, #28
 80049b6:	d42c      	bmi.n	8004a12 <__swsetup_r+0x82>
 80049b8:	06d0      	lsls	r0, r2, #27
 80049ba:	d411      	bmi.n	80049e0 <__swsetup_r+0x50>
 80049bc:	2209      	movs	r2, #9
 80049be:	6032      	str	r2, [r6, #0]
 80049c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049c4:	81a3      	strh	r3, [r4, #12]
 80049c6:	f04f 30ff 	mov.w	r0, #4294967295
 80049ca:	bd70      	pop	{r4, r5, r6, pc}
 80049cc:	4b25      	ldr	r3, [pc, #148]	; (8004a64 <__swsetup_r+0xd4>)
 80049ce:	429c      	cmp	r4, r3
 80049d0:	d101      	bne.n	80049d6 <__swsetup_r+0x46>
 80049d2:	68ac      	ldr	r4, [r5, #8]
 80049d4:	e7eb      	b.n	80049ae <__swsetup_r+0x1e>
 80049d6:	4b24      	ldr	r3, [pc, #144]	; (8004a68 <__swsetup_r+0xd8>)
 80049d8:	429c      	cmp	r4, r3
 80049da:	bf08      	it	eq
 80049dc:	68ec      	ldreq	r4, [r5, #12]
 80049de:	e7e6      	b.n	80049ae <__swsetup_r+0x1e>
 80049e0:	0751      	lsls	r1, r2, #29
 80049e2:	d512      	bpl.n	8004a0a <__swsetup_r+0x7a>
 80049e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80049e6:	b141      	cbz	r1, 80049fa <__swsetup_r+0x6a>
 80049e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80049ec:	4299      	cmp	r1, r3
 80049ee:	d002      	beq.n	80049f6 <__swsetup_r+0x66>
 80049f0:	4630      	mov	r0, r6
 80049f2:	f7ff fd1b 	bl	800442c <_free_r>
 80049f6:	2300      	movs	r3, #0
 80049f8:	6363      	str	r3, [r4, #52]	; 0x34
 80049fa:	89a3      	ldrh	r3, [r4, #12]
 80049fc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004a00:	81a3      	strh	r3, [r4, #12]
 8004a02:	2300      	movs	r3, #0
 8004a04:	6063      	str	r3, [r4, #4]
 8004a06:	6923      	ldr	r3, [r4, #16]
 8004a08:	6023      	str	r3, [r4, #0]
 8004a0a:	89a3      	ldrh	r3, [r4, #12]
 8004a0c:	f043 0308 	orr.w	r3, r3, #8
 8004a10:	81a3      	strh	r3, [r4, #12]
 8004a12:	6923      	ldr	r3, [r4, #16]
 8004a14:	b94b      	cbnz	r3, 8004a2a <__swsetup_r+0x9a>
 8004a16:	89a3      	ldrh	r3, [r4, #12]
 8004a18:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004a1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a20:	d003      	beq.n	8004a2a <__swsetup_r+0x9a>
 8004a22:	4621      	mov	r1, r4
 8004a24:	4630      	mov	r0, r6
 8004a26:	f000 f9e3 	bl	8004df0 <__smakebuf_r>
 8004a2a:	89a2      	ldrh	r2, [r4, #12]
 8004a2c:	f012 0301 	ands.w	r3, r2, #1
 8004a30:	d00c      	beq.n	8004a4c <__swsetup_r+0xbc>
 8004a32:	2300      	movs	r3, #0
 8004a34:	60a3      	str	r3, [r4, #8]
 8004a36:	6963      	ldr	r3, [r4, #20]
 8004a38:	425b      	negs	r3, r3
 8004a3a:	61a3      	str	r3, [r4, #24]
 8004a3c:	6923      	ldr	r3, [r4, #16]
 8004a3e:	b953      	cbnz	r3, 8004a56 <__swsetup_r+0xc6>
 8004a40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a44:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004a48:	d1ba      	bne.n	80049c0 <__swsetup_r+0x30>
 8004a4a:	bd70      	pop	{r4, r5, r6, pc}
 8004a4c:	0792      	lsls	r2, r2, #30
 8004a4e:	bf58      	it	pl
 8004a50:	6963      	ldrpl	r3, [r4, #20]
 8004a52:	60a3      	str	r3, [r4, #8]
 8004a54:	e7f2      	b.n	8004a3c <__swsetup_r+0xac>
 8004a56:	2000      	movs	r0, #0
 8004a58:	e7f7      	b.n	8004a4a <__swsetup_r+0xba>
 8004a5a:	bf00      	nop
 8004a5c:	20000050 	.word	0x20000050
 8004a60:	080059f8 	.word	0x080059f8
 8004a64:	08005a18 	.word	0x08005a18
 8004a68:	080059d8 	.word	0x080059d8

08004a6c <_close_r>:
 8004a6c:	b538      	push	{r3, r4, r5, lr}
 8004a6e:	4c06      	ldr	r4, [pc, #24]	; (8004a88 <_close_r+0x1c>)
 8004a70:	2300      	movs	r3, #0
 8004a72:	4605      	mov	r5, r0
 8004a74:	4608      	mov	r0, r1
 8004a76:	6023      	str	r3, [r4, #0]
 8004a78:	f7fc f8a6 	bl	8000bc8 <_close>
 8004a7c:	1c43      	adds	r3, r0, #1
 8004a7e:	d102      	bne.n	8004a86 <_close_r+0x1a>
 8004a80:	6823      	ldr	r3, [r4, #0]
 8004a82:	b103      	cbz	r3, 8004a86 <_close_r+0x1a>
 8004a84:	602b      	str	r3, [r5, #0]
 8004a86:	bd38      	pop	{r3, r4, r5, pc}
 8004a88:	20000a24 	.word	0x20000a24

08004a8c <__sflush_r>:
 8004a8c:	898a      	ldrh	r2, [r1, #12]
 8004a8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a92:	4605      	mov	r5, r0
 8004a94:	0710      	lsls	r0, r2, #28
 8004a96:	460c      	mov	r4, r1
 8004a98:	d45a      	bmi.n	8004b50 <__sflush_r+0xc4>
 8004a9a:	684b      	ldr	r3, [r1, #4]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	dc05      	bgt.n	8004aac <__sflush_r+0x20>
 8004aa0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	dc02      	bgt.n	8004aac <__sflush_r+0x20>
 8004aa6:	2000      	movs	r0, #0
 8004aa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004aac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004aae:	2e00      	cmp	r6, #0
 8004ab0:	d0f9      	beq.n	8004aa6 <__sflush_r+0x1a>
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004ab8:	682f      	ldr	r7, [r5, #0]
 8004aba:	602b      	str	r3, [r5, #0]
 8004abc:	d033      	beq.n	8004b26 <__sflush_r+0x9a>
 8004abe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004ac0:	89a3      	ldrh	r3, [r4, #12]
 8004ac2:	075a      	lsls	r2, r3, #29
 8004ac4:	d505      	bpl.n	8004ad2 <__sflush_r+0x46>
 8004ac6:	6863      	ldr	r3, [r4, #4]
 8004ac8:	1ac0      	subs	r0, r0, r3
 8004aca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004acc:	b10b      	cbz	r3, 8004ad2 <__sflush_r+0x46>
 8004ace:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004ad0:	1ac0      	subs	r0, r0, r3
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004ad8:	6a21      	ldr	r1, [r4, #32]
 8004ada:	4628      	mov	r0, r5
 8004adc:	47b0      	blx	r6
 8004ade:	1c43      	adds	r3, r0, #1
 8004ae0:	89a3      	ldrh	r3, [r4, #12]
 8004ae2:	d106      	bne.n	8004af2 <__sflush_r+0x66>
 8004ae4:	6829      	ldr	r1, [r5, #0]
 8004ae6:	291d      	cmp	r1, #29
 8004ae8:	d84b      	bhi.n	8004b82 <__sflush_r+0xf6>
 8004aea:	4a2b      	ldr	r2, [pc, #172]	; (8004b98 <__sflush_r+0x10c>)
 8004aec:	40ca      	lsrs	r2, r1
 8004aee:	07d6      	lsls	r6, r2, #31
 8004af0:	d547      	bpl.n	8004b82 <__sflush_r+0xf6>
 8004af2:	2200      	movs	r2, #0
 8004af4:	6062      	str	r2, [r4, #4]
 8004af6:	04d9      	lsls	r1, r3, #19
 8004af8:	6922      	ldr	r2, [r4, #16]
 8004afa:	6022      	str	r2, [r4, #0]
 8004afc:	d504      	bpl.n	8004b08 <__sflush_r+0x7c>
 8004afe:	1c42      	adds	r2, r0, #1
 8004b00:	d101      	bne.n	8004b06 <__sflush_r+0x7a>
 8004b02:	682b      	ldr	r3, [r5, #0]
 8004b04:	b903      	cbnz	r3, 8004b08 <__sflush_r+0x7c>
 8004b06:	6560      	str	r0, [r4, #84]	; 0x54
 8004b08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004b0a:	602f      	str	r7, [r5, #0]
 8004b0c:	2900      	cmp	r1, #0
 8004b0e:	d0ca      	beq.n	8004aa6 <__sflush_r+0x1a>
 8004b10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004b14:	4299      	cmp	r1, r3
 8004b16:	d002      	beq.n	8004b1e <__sflush_r+0x92>
 8004b18:	4628      	mov	r0, r5
 8004b1a:	f7ff fc87 	bl	800442c <_free_r>
 8004b1e:	2000      	movs	r0, #0
 8004b20:	6360      	str	r0, [r4, #52]	; 0x34
 8004b22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b26:	6a21      	ldr	r1, [r4, #32]
 8004b28:	2301      	movs	r3, #1
 8004b2a:	4628      	mov	r0, r5
 8004b2c:	47b0      	blx	r6
 8004b2e:	1c41      	adds	r1, r0, #1
 8004b30:	d1c6      	bne.n	8004ac0 <__sflush_r+0x34>
 8004b32:	682b      	ldr	r3, [r5, #0]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d0c3      	beq.n	8004ac0 <__sflush_r+0x34>
 8004b38:	2b1d      	cmp	r3, #29
 8004b3a:	d001      	beq.n	8004b40 <__sflush_r+0xb4>
 8004b3c:	2b16      	cmp	r3, #22
 8004b3e:	d101      	bne.n	8004b44 <__sflush_r+0xb8>
 8004b40:	602f      	str	r7, [r5, #0]
 8004b42:	e7b0      	b.n	8004aa6 <__sflush_r+0x1a>
 8004b44:	89a3      	ldrh	r3, [r4, #12]
 8004b46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b4a:	81a3      	strh	r3, [r4, #12]
 8004b4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b50:	690f      	ldr	r7, [r1, #16]
 8004b52:	2f00      	cmp	r7, #0
 8004b54:	d0a7      	beq.n	8004aa6 <__sflush_r+0x1a>
 8004b56:	0793      	lsls	r3, r2, #30
 8004b58:	680e      	ldr	r6, [r1, #0]
 8004b5a:	bf08      	it	eq
 8004b5c:	694b      	ldreq	r3, [r1, #20]
 8004b5e:	600f      	str	r7, [r1, #0]
 8004b60:	bf18      	it	ne
 8004b62:	2300      	movne	r3, #0
 8004b64:	eba6 0807 	sub.w	r8, r6, r7
 8004b68:	608b      	str	r3, [r1, #8]
 8004b6a:	f1b8 0f00 	cmp.w	r8, #0
 8004b6e:	dd9a      	ble.n	8004aa6 <__sflush_r+0x1a>
 8004b70:	4643      	mov	r3, r8
 8004b72:	463a      	mov	r2, r7
 8004b74:	6a21      	ldr	r1, [r4, #32]
 8004b76:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004b78:	4628      	mov	r0, r5
 8004b7a:	47b0      	blx	r6
 8004b7c:	2800      	cmp	r0, #0
 8004b7e:	dc07      	bgt.n	8004b90 <__sflush_r+0x104>
 8004b80:	89a3      	ldrh	r3, [r4, #12]
 8004b82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b86:	81a3      	strh	r3, [r4, #12]
 8004b88:	f04f 30ff 	mov.w	r0, #4294967295
 8004b8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b90:	4407      	add	r7, r0
 8004b92:	eba8 0800 	sub.w	r8, r8, r0
 8004b96:	e7e8      	b.n	8004b6a <__sflush_r+0xde>
 8004b98:	20400001 	.word	0x20400001

08004b9c <_fflush_r>:
 8004b9c:	b538      	push	{r3, r4, r5, lr}
 8004b9e:	690b      	ldr	r3, [r1, #16]
 8004ba0:	4605      	mov	r5, r0
 8004ba2:	460c      	mov	r4, r1
 8004ba4:	b1db      	cbz	r3, 8004bde <_fflush_r+0x42>
 8004ba6:	b118      	cbz	r0, 8004bb0 <_fflush_r+0x14>
 8004ba8:	6983      	ldr	r3, [r0, #24]
 8004baa:	b90b      	cbnz	r3, 8004bb0 <_fflush_r+0x14>
 8004bac:	f000 f860 	bl	8004c70 <__sinit>
 8004bb0:	4b0c      	ldr	r3, [pc, #48]	; (8004be4 <_fflush_r+0x48>)
 8004bb2:	429c      	cmp	r4, r3
 8004bb4:	d109      	bne.n	8004bca <_fflush_r+0x2e>
 8004bb6:	686c      	ldr	r4, [r5, #4]
 8004bb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004bbc:	b17b      	cbz	r3, 8004bde <_fflush_r+0x42>
 8004bbe:	4621      	mov	r1, r4
 8004bc0:	4628      	mov	r0, r5
 8004bc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004bc6:	f7ff bf61 	b.w	8004a8c <__sflush_r>
 8004bca:	4b07      	ldr	r3, [pc, #28]	; (8004be8 <_fflush_r+0x4c>)
 8004bcc:	429c      	cmp	r4, r3
 8004bce:	d101      	bne.n	8004bd4 <_fflush_r+0x38>
 8004bd0:	68ac      	ldr	r4, [r5, #8]
 8004bd2:	e7f1      	b.n	8004bb8 <_fflush_r+0x1c>
 8004bd4:	4b05      	ldr	r3, [pc, #20]	; (8004bec <_fflush_r+0x50>)
 8004bd6:	429c      	cmp	r4, r3
 8004bd8:	bf08      	it	eq
 8004bda:	68ec      	ldreq	r4, [r5, #12]
 8004bdc:	e7ec      	b.n	8004bb8 <_fflush_r+0x1c>
 8004bde:	2000      	movs	r0, #0
 8004be0:	bd38      	pop	{r3, r4, r5, pc}
 8004be2:	bf00      	nop
 8004be4:	080059f8 	.word	0x080059f8
 8004be8:	08005a18 	.word	0x08005a18
 8004bec:	080059d8 	.word	0x080059d8

08004bf0 <_cleanup_r>:
 8004bf0:	4901      	ldr	r1, [pc, #4]	; (8004bf8 <_cleanup_r+0x8>)
 8004bf2:	f000 b8a9 	b.w	8004d48 <_fwalk_reent>
 8004bf6:	bf00      	nop
 8004bf8:	08004b9d 	.word	0x08004b9d

08004bfc <std.isra.0>:
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	b510      	push	{r4, lr}
 8004c00:	4604      	mov	r4, r0
 8004c02:	6003      	str	r3, [r0, #0]
 8004c04:	6043      	str	r3, [r0, #4]
 8004c06:	6083      	str	r3, [r0, #8]
 8004c08:	8181      	strh	r1, [r0, #12]
 8004c0a:	6643      	str	r3, [r0, #100]	; 0x64
 8004c0c:	81c2      	strh	r2, [r0, #14]
 8004c0e:	6103      	str	r3, [r0, #16]
 8004c10:	6143      	str	r3, [r0, #20]
 8004c12:	6183      	str	r3, [r0, #24]
 8004c14:	4619      	mov	r1, r3
 8004c16:	2208      	movs	r2, #8
 8004c18:	305c      	adds	r0, #92	; 0x5c
 8004c1a:	f7ff fbfe 	bl	800441a <memset>
 8004c1e:	4b05      	ldr	r3, [pc, #20]	; (8004c34 <std.isra.0+0x38>)
 8004c20:	6263      	str	r3, [r4, #36]	; 0x24
 8004c22:	4b05      	ldr	r3, [pc, #20]	; (8004c38 <std.isra.0+0x3c>)
 8004c24:	62a3      	str	r3, [r4, #40]	; 0x28
 8004c26:	4b05      	ldr	r3, [pc, #20]	; (8004c3c <std.isra.0+0x40>)
 8004c28:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004c2a:	4b05      	ldr	r3, [pc, #20]	; (8004c40 <std.isra.0+0x44>)
 8004c2c:	6224      	str	r4, [r4, #32]
 8004c2e:	6323      	str	r3, [r4, #48]	; 0x30
 8004c30:	bd10      	pop	{r4, pc}
 8004c32:	bf00      	nop
 8004c34:	08004841 	.word	0x08004841
 8004c38:	08004863 	.word	0x08004863
 8004c3c:	0800489b 	.word	0x0800489b
 8004c40:	080048bf 	.word	0x080048bf

08004c44 <__sfmoreglue>:
 8004c44:	b570      	push	{r4, r5, r6, lr}
 8004c46:	1e4a      	subs	r2, r1, #1
 8004c48:	2568      	movs	r5, #104	; 0x68
 8004c4a:	4355      	muls	r5, r2
 8004c4c:	460e      	mov	r6, r1
 8004c4e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004c52:	f7ff fc39 	bl	80044c8 <_malloc_r>
 8004c56:	4604      	mov	r4, r0
 8004c58:	b140      	cbz	r0, 8004c6c <__sfmoreglue+0x28>
 8004c5a:	2100      	movs	r1, #0
 8004c5c:	e880 0042 	stmia.w	r0, {r1, r6}
 8004c60:	300c      	adds	r0, #12
 8004c62:	60a0      	str	r0, [r4, #8]
 8004c64:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004c68:	f7ff fbd7 	bl	800441a <memset>
 8004c6c:	4620      	mov	r0, r4
 8004c6e:	bd70      	pop	{r4, r5, r6, pc}

08004c70 <__sinit>:
 8004c70:	6983      	ldr	r3, [r0, #24]
 8004c72:	b510      	push	{r4, lr}
 8004c74:	4604      	mov	r4, r0
 8004c76:	bb33      	cbnz	r3, 8004cc6 <__sinit+0x56>
 8004c78:	6483      	str	r3, [r0, #72]	; 0x48
 8004c7a:	64c3      	str	r3, [r0, #76]	; 0x4c
 8004c7c:	6503      	str	r3, [r0, #80]	; 0x50
 8004c7e:	4b12      	ldr	r3, [pc, #72]	; (8004cc8 <__sinit+0x58>)
 8004c80:	4a12      	ldr	r2, [pc, #72]	; (8004ccc <__sinit+0x5c>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	6282      	str	r2, [r0, #40]	; 0x28
 8004c86:	4298      	cmp	r0, r3
 8004c88:	bf04      	itt	eq
 8004c8a:	2301      	moveq	r3, #1
 8004c8c:	6183      	streq	r3, [r0, #24]
 8004c8e:	f000 f81f 	bl	8004cd0 <__sfp>
 8004c92:	6060      	str	r0, [r4, #4]
 8004c94:	4620      	mov	r0, r4
 8004c96:	f000 f81b 	bl	8004cd0 <__sfp>
 8004c9a:	60a0      	str	r0, [r4, #8]
 8004c9c:	4620      	mov	r0, r4
 8004c9e:	f000 f817 	bl	8004cd0 <__sfp>
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	60e0      	str	r0, [r4, #12]
 8004ca6:	2104      	movs	r1, #4
 8004ca8:	6860      	ldr	r0, [r4, #4]
 8004caa:	f7ff ffa7 	bl	8004bfc <std.isra.0>
 8004cae:	2201      	movs	r2, #1
 8004cb0:	2109      	movs	r1, #9
 8004cb2:	68a0      	ldr	r0, [r4, #8]
 8004cb4:	f7ff ffa2 	bl	8004bfc <std.isra.0>
 8004cb8:	2202      	movs	r2, #2
 8004cba:	2112      	movs	r1, #18
 8004cbc:	68e0      	ldr	r0, [r4, #12]
 8004cbe:	f7ff ff9d 	bl	8004bfc <std.isra.0>
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	61a3      	str	r3, [r4, #24]
 8004cc6:	bd10      	pop	{r4, pc}
 8004cc8:	080059d4 	.word	0x080059d4
 8004ccc:	08004bf1 	.word	0x08004bf1

08004cd0 <__sfp>:
 8004cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cd2:	4b1c      	ldr	r3, [pc, #112]	; (8004d44 <__sfp+0x74>)
 8004cd4:	681e      	ldr	r6, [r3, #0]
 8004cd6:	69b3      	ldr	r3, [r6, #24]
 8004cd8:	4607      	mov	r7, r0
 8004cda:	b913      	cbnz	r3, 8004ce2 <__sfp+0x12>
 8004cdc:	4630      	mov	r0, r6
 8004cde:	f7ff ffc7 	bl	8004c70 <__sinit>
 8004ce2:	3648      	adds	r6, #72	; 0x48
 8004ce4:	68b4      	ldr	r4, [r6, #8]
 8004ce6:	6873      	ldr	r3, [r6, #4]
 8004ce8:	3b01      	subs	r3, #1
 8004cea:	d503      	bpl.n	8004cf4 <__sfp+0x24>
 8004cec:	6833      	ldr	r3, [r6, #0]
 8004cee:	b133      	cbz	r3, 8004cfe <__sfp+0x2e>
 8004cf0:	6836      	ldr	r6, [r6, #0]
 8004cf2:	e7f7      	b.n	8004ce4 <__sfp+0x14>
 8004cf4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004cf8:	b16d      	cbz	r5, 8004d16 <__sfp+0x46>
 8004cfa:	3468      	adds	r4, #104	; 0x68
 8004cfc:	e7f4      	b.n	8004ce8 <__sfp+0x18>
 8004cfe:	2104      	movs	r1, #4
 8004d00:	4638      	mov	r0, r7
 8004d02:	f7ff ff9f 	bl	8004c44 <__sfmoreglue>
 8004d06:	6030      	str	r0, [r6, #0]
 8004d08:	2800      	cmp	r0, #0
 8004d0a:	d1f1      	bne.n	8004cf0 <__sfp+0x20>
 8004d0c:	230c      	movs	r3, #12
 8004d0e:	603b      	str	r3, [r7, #0]
 8004d10:	4604      	mov	r4, r0
 8004d12:	4620      	mov	r0, r4
 8004d14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d16:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004d1a:	81e3      	strh	r3, [r4, #14]
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	81a3      	strh	r3, [r4, #12]
 8004d20:	6665      	str	r5, [r4, #100]	; 0x64
 8004d22:	6025      	str	r5, [r4, #0]
 8004d24:	60a5      	str	r5, [r4, #8]
 8004d26:	6065      	str	r5, [r4, #4]
 8004d28:	6125      	str	r5, [r4, #16]
 8004d2a:	6165      	str	r5, [r4, #20]
 8004d2c:	61a5      	str	r5, [r4, #24]
 8004d2e:	2208      	movs	r2, #8
 8004d30:	4629      	mov	r1, r5
 8004d32:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004d36:	f7ff fb70 	bl	800441a <memset>
 8004d3a:	6365      	str	r5, [r4, #52]	; 0x34
 8004d3c:	63a5      	str	r5, [r4, #56]	; 0x38
 8004d3e:	64a5      	str	r5, [r4, #72]	; 0x48
 8004d40:	64e5      	str	r5, [r4, #76]	; 0x4c
 8004d42:	e7e6      	b.n	8004d12 <__sfp+0x42>
 8004d44:	080059d4 	.word	0x080059d4

08004d48 <_fwalk_reent>:
 8004d48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d4c:	4680      	mov	r8, r0
 8004d4e:	4689      	mov	r9, r1
 8004d50:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004d54:	2600      	movs	r6, #0
 8004d56:	b914      	cbnz	r4, 8004d5e <_fwalk_reent+0x16>
 8004d58:	4630      	mov	r0, r6
 8004d5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d5e:	68a5      	ldr	r5, [r4, #8]
 8004d60:	6867      	ldr	r7, [r4, #4]
 8004d62:	3f01      	subs	r7, #1
 8004d64:	d501      	bpl.n	8004d6a <_fwalk_reent+0x22>
 8004d66:	6824      	ldr	r4, [r4, #0]
 8004d68:	e7f5      	b.n	8004d56 <_fwalk_reent+0xe>
 8004d6a:	89ab      	ldrh	r3, [r5, #12]
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d907      	bls.n	8004d80 <_fwalk_reent+0x38>
 8004d70:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004d74:	3301      	adds	r3, #1
 8004d76:	d003      	beq.n	8004d80 <_fwalk_reent+0x38>
 8004d78:	4629      	mov	r1, r5
 8004d7a:	4640      	mov	r0, r8
 8004d7c:	47c8      	blx	r9
 8004d7e:	4306      	orrs	r6, r0
 8004d80:	3568      	adds	r5, #104	; 0x68
 8004d82:	e7ee      	b.n	8004d62 <_fwalk_reent+0x1a>

08004d84 <_lseek_r>:
 8004d84:	b538      	push	{r3, r4, r5, lr}
 8004d86:	4c07      	ldr	r4, [pc, #28]	; (8004da4 <_lseek_r+0x20>)
 8004d88:	4605      	mov	r5, r0
 8004d8a:	4608      	mov	r0, r1
 8004d8c:	4611      	mov	r1, r2
 8004d8e:	2200      	movs	r2, #0
 8004d90:	6022      	str	r2, [r4, #0]
 8004d92:	461a      	mov	r2, r3
 8004d94:	f7fb ff2f 	bl	8000bf6 <_lseek>
 8004d98:	1c43      	adds	r3, r0, #1
 8004d9a:	d102      	bne.n	8004da2 <_lseek_r+0x1e>
 8004d9c:	6823      	ldr	r3, [r4, #0]
 8004d9e:	b103      	cbz	r3, 8004da2 <_lseek_r+0x1e>
 8004da0:	602b      	str	r3, [r5, #0]
 8004da2:	bd38      	pop	{r3, r4, r5, pc}
 8004da4:	20000a24 	.word	0x20000a24

08004da8 <__swhatbuf_r>:
 8004da8:	b570      	push	{r4, r5, r6, lr}
 8004daa:	460e      	mov	r6, r1
 8004dac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004db0:	2900      	cmp	r1, #0
 8004db2:	b090      	sub	sp, #64	; 0x40
 8004db4:	4614      	mov	r4, r2
 8004db6:	461d      	mov	r5, r3
 8004db8:	da07      	bge.n	8004dca <__swhatbuf_r+0x22>
 8004dba:	2300      	movs	r3, #0
 8004dbc:	602b      	str	r3, [r5, #0]
 8004dbe:	89b3      	ldrh	r3, [r6, #12]
 8004dc0:	061a      	lsls	r2, r3, #24
 8004dc2:	d410      	bmi.n	8004de6 <__swhatbuf_r+0x3e>
 8004dc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004dc8:	e00e      	b.n	8004de8 <__swhatbuf_r+0x40>
 8004dca:	aa01      	add	r2, sp, #4
 8004dcc:	f000 fc8a 	bl	80056e4 <_fstat_r>
 8004dd0:	2800      	cmp	r0, #0
 8004dd2:	dbf2      	blt.n	8004dba <__swhatbuf_r+0x12>
 8004dd4:	9a02      	ldr	r2, [sp, #8]
 8004dd6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004dda:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004dde:	425a      	negs	r2, r3
 8004de0:	415a      	adcs	r2, r3
 8004de2:	602a      	str	r2, [r5, #0]
 8004de4:	e7ee      	b.n	8004dc4 <__swhatbuf_r+0x1c>
 8004de6:	2340      	movs	r3, #64	; 0x40
 8004de8:	2000      	movs	r0, #0
 8004dea:	6023      	str	r3, [r4, #0]
 8004dec:	b010      	add	sp, #64	; 0x40
 8004dee:	bd70      	pop	{r4, r5, r6, pc}

08004df0 <__smakebuf_r>:
 8004df0:	898b      	ldrh	r3, [r1, #12]
 8004df2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004df4:	079d      	lsls	r5, r3, #30
 8004df6:	4606      	mov	r6, r0
 8004df8:	460c      	mov	r4, r1
 8004dfa:	d507      	bpl.n	8004e0c <__smakebuf_r+0x1c>
 8004dfc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004e00:	6023      	str	r3, [r4, #0]
 8004e02:	6123      	str	r3, [r4, #16]
 8004e04:	2301      	movs	r3, #1
 8004e06:	6163      	str	r3, [r4, #20]
 8004e08:	b002      	add	sp, #8
 8004e0a:	bd70      	pop	{r4, r5, r6, pc}
 8004e0c:	ab01      	add	r3, sp, #4
 8004e0e:	466a      	mov	r2, sp
 8004e10:	f7ff ffca 	bl	8004da8 <__swhatbuf_r>
 8004e14:	9900      	ldr	r1, [sp, #0]
 8004e16:	4605      	mov	r5, r0
 8004e18:	4630      	mov	r0, r6
 8004e1a:	f7ff fb55 	bl	80044c8 <_malloc_r>
 8004e1e:	b948      	cbnz	r0, 8004e34 <__smakebuf_r+0x44>
 8004e20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e24:	059a      	lsls	r2, r3, #22
 8004e26:	d4ef      	bmi.n	8004e08 <__smakebuf_r+0x18>
 8004e28:	f023 0303 	bic.w	r3, r3, #3
 8004e2c:	f043 0302 	orr.w	r3, r3, #2
 8004e30:	81a3      	strh	r3, [r4, #12]
 8004e32:	e7e3      	b.n	8004dfc <__smakebuf_r+0xc>
 8004e34:	4b0d      	ldr	r3, [pc, #52]	; (8004e6c <__smakebuf_r+0x7c>)
 8004e36:	62b3      	str	r3, [r6, #40]	; 0x28
 8004e38:	89a3      	ldrh	r3, [r4, #12]
 8004e3a:	6020      	str	r0, [r4, #0]
 8004e3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e40:	81a3      	strh	r3, [r4, #12]
 8004e42:	9b00      	ldr	r3, [sp, #0]
 8004e44:	6163      	str	r3, [r4, #20]
 8004e46:	9b01      	ldr	r3, [sp, #4]
 8004e48:	6120      	str	r0, [r4, #16]
 8004e4a:	b15b      	cbz	r3, 8004e64 <__smakebuf_r+0x74>
 8004e4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e50:	4630      	mov	r0, r6
 8004e52:	f000 fc59 	bl	8005708 <_isatty_r>
 8004e56:	b128      	cbz	r0, 8004e64 <__smakebuf_r+0x74>
 8004e58:	89a3      	ldrh	r3, [r4, #12]
 8004e5a:	f023 0303 	bic.w	r3, r3, #3
 8004e5e:	f043 0301 	orr.w	r3, r3, #1
 8004e62:	81a3      	strh	r3, [r4, #12]
 8004e64:	89a3      	ldrh	r3, [r4, #12]
 8004e66:	431d      	orrs	r5, r3
 8004e68:	81a5      	strh	r5, [r4, #12]
 8004e6a:	e7cd      	b.n	8004e08 <__smakebuf_r+0x18>
 8004e6c:	08004bf1 	.word	0x08004bf1

08004e70 <__malloc_lock>:
 8004e70:	4770      	bx	lr

08004e72 <__malloc_unlock>:
 8004e72:	4770      	bx	lr

08004e74 <__ssputs_r>:
 8004e74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e78:	688e      	ldr	r6, [r1, #8]
 8004e7a:	429e      	cmp	r6, r3
 8004e7c:	4682      	mov	sl, r0
 8004e7e:	460c      	mov	r4, r1
 8004e80:	4691      	mov	r9, r2
 8004e82:	4698      	mov	r8, r3
 8004e84:	d835      	bhi.n	8004ef2 <__ssputs_r+0x7e>
 8004e86:	898a      	ldrh	r2, [r1, #12]
 8004e88:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004e8c:	d031      	beq.n	8004ef2 <__ssputs_r+0x7e>
 8004e8e:	6825      	ldr	r5, [r4, #0]
 8004e90:	6909      	ldr	r1, [r1, #16]
 8004e92:	1a6f      	subs	r7, r5, r1
 8004e94:	6965      	ldr	r5, [r4, #20]
 8004e96:	2302      	movs	r3, #2
 8004e98:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004e9c:	fb95 f5f3 	sdiv	r5, r5, r3
 8004ea0:	f108 0301 	add.w	r3, r8, #1
 8004ea4:	443b      	add	r3, r7
 8004ea6:	429d      	cmp	r5, r3
 8004ea8:	bf38      	it	cc
 8004eaa:	461d      	movcc	r5, r3
 8004eac:	0553      	lsls	r3, r2, #21
 8004eae:	d531      	bpl.n	8004f14 <__ssputs_r+0xa0>
 8004eb0:	4629      	mov	r1, r5
 8004eb2:	f7ff fb09 	bl	80044c8 <_malloc_r>
 8004eb6:	4606      	mov	r6, r0
 8004eb8:	b950      	cbnz	r0, 8004ed0 <__ssputs_r+0x5c>
 8004eba:	230c      	movs	r3, #12
 8004ebc:	f8ca 3000 	str.w	r3, [sl]
 8004ec0:	89a3      	ldrh	r3, [r4, #12]
 8004ec2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ec6:	81a3      	strh	r3, [r4, #12]
 8004ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8004ecc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ed0:	463a      	mov	r2, r7
 8004ed2:	6921      	ldr	r1, [r4, #16]
 8004ed4:	f7ff fa96 	bl	8004404 <memcpy>
 8004ed8:	89a3      	ldrh	r3, [r4, #12]
 8004eda:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004ede:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ee2:	81a3      	strh	r3, [r4, #12]
 8004ee4:	6126      	str	r6, [r4, #16]
 8004ee6:	6165      	str	r5, [r4, #20]
 8004ee8:	443e      	add	r6, r7
 8004eea:	1bed      	subs	r5, r5, r7
 8004eec:	6026      	str	r6, [r4, #0]
 8004eee:	60a5      	str	r5, [r4, #8]
 8004ef0:	4646      	mov	r6, r8
 8004ef2:	4546      	cmp	r6, r8
 8004ef4:	bf28      	it	cs
 8004ef6:	4646      	movcs	r6, r8
 8004ef8:	4632      	mov	r2, r6
 8004efa:	4649      	mov	r1, r9
 8004efc:	6820      	ldr	r0, [r4, #0]
 8004efe:	f000 fc13 	bl	8005728 <memmove>
 8004f02:	68a3      	ldr	r3, [r4, #8]
 8004f04:	1b9b      	subs	r3, r3, r6
 8004f06:	60a3      	str	r3, [r4, #8]
 8004f08:	6823      	ldr	r3, [r4, #0]
 8004f0a:	441e      	add	r6, r3
 8004f0c:	6026      	str	r6, [r4, #0]
 8004f0e:	2000      	movs	r0, #0
 8004f10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f14:	462a      	mov	r2, r5
 8004f16:	f000 fc21 	bl	800575c <_realloc_r>
 8004f1a:	4606      	mov	r6, r0
 8004f1c:	2800      	cmp	r0, #0
 8004f1e:	d1e1      	bne.n	8004ee4 <__ssputs_r+0x70>
 8004f20:	6921      	ldr	r1, [r4, #16]
 8004f22:	4650      	mov	r0, sl
 8004f24:	f7ff fa82 	bl	800442c <_free_r>
 8004f28:	e7c7      	b.n	8004eba <__ssputs_r+0x46>
	...

08004f2c <_svfiprintf_r>:
 8004f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f30:	b09d      	sub	sp, #116	; 0x74
 8004f32:	4680      	mov	r8, r0
 8004f34:	9303      	str	r3, [sp, #12]
 8004f36:	898b      	ldrh	r3, [r1, #12]
 8004f38:	061c      	lsls	r4, r3, #24
 8004f3a:	460d      	mov	r5, r1
 8004f3c:	4616      	mov	r6, r2
 8004f3e:	d50f      	bpl.n	8004f60 <_svfiprintf_r+0x34>
 8004f40:	690b      	ldr	r3, [r1, #16]
 8004f42:	b96b      	cbnz	r3, 8004f60 <_svfiprintf_r+0x34>
 8004f44:	2140      	movs	r1, #64	; 0x40
 8004f46:	f7ff fabf 	bl	80044c8 <_malloc_r>
 8004f4a:	6028      	str	r0, [r5, #0]
 8004f4c:	6128      	str	r0, [r5, #16]
 8004f4e:	b928      	cbnz	r0, 8004f5c <_svfiprintf_r+0x30>
 8004f50:	230c      	movs	r3, #12
 8004f52:	f8c8 3000 	str.w	r3, [r8]
 8004f56:	f04f 30ff 	mov.w	r0, #4294967295
 8004f5a:	e0c5      	b.n	80050e8 <_svfiprintf_r+0x1bc>
 8004f5c:	2340      	movs	r3, #64	; 0x40
 8004f5e:	616b      	str	r3, [r5, #20]
 8004f60:	2300      	movs	r3, #0
 8004f62:	9309      	str	r3, [sp, #36]	; 0x24
 8004f64:	2320      	movs	r3, #32
 8004f66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004f6a:	2330      	movs	r3, #48	; 0x30
 8004f6c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004f70:	f04f 0b01 	mov.w	fp, #1
 8004f74:	4637      	mov	r7, r6
 8004f76:	463c      	mov	r4, r7
 8004f78:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d13c      	bne.n	8004ffa <_svfiprintf_r+0xce>
 8004f80:	ebb7 0a06 	subs.w	sl, r7, r6
 8004f84:	d00b      	beq.n	8004f9e <_svfiprintf_r+0x72>
 8004f86:	4653      	mov	r3, sl
 8004f88:	4632      	mov	r2, r6
 8004f8a:	4629      	mov	r1, r5
 8004f8c:	4640      	mov	r0, r8
 8004f8e:	f7ff ff71 	bl	8004e74 <__ssputs_r>
 8004f92:	3001      	adds	r0, #1
 8004f94:	f000 80a3 	beq.w	80050de <_svfiprintf_r+0x1b2>
 8004f98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f9a:	4453      	add	r3, sl
 8004f9c:	9309      	str	r3, [sp, #36]	; 0x24
 8004f9e:	783b      	ldrb	r3, [r7, #0]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	f000 809c 	beq.w	80050de <_svfiprintf_r+0x1b2>
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	f04f 32ff 	mov.w	r2, #4294967295
 8004fac:	9304      	str	r3, [sp, #16]
 8004fae:	9307      	str	r3, [sp, #28]
 8004fb0:	9205      	str	r2, [sp, #20]
 8004fb2:	9306      	str	r3, [sp, #24]
 8004fb4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004fb8:	931a      	str	r3, [sp, #104]	; 0x68
 8004fba:	2205      	movs	r2, #5
 8004fbc:	7821      	ldrb	r1, [r4, #0]
 8004fbe:	4850      	ldr	r0, [pc, #320]	; (8005100 <_svfiprintf_r+0x1d4>)
 8004fc0:	f7fb f916 	bl	80001f0 <memchr>
 8004fc4:	1c67      	adds	r7, r4, #1
 8004fc6:	9b04      	ldr	r3, [sp, #16]
 8004fc8:	b9d8      	cbnz	r0, 8005002 <_svfiprintf_r+0xd6>
 8004fca:	06d9      	lsls	r1, r3, #27
 8004fcc:	bf44      	itt	mi
 8004fce:	2220      	movmi	r2, #32
 8004fd0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004fd4:	071a      	lsls	r2, r3, #28
 8004fd6:	bf44      	itt	mi
 8004fd8:	222b      	movmi	r2, #43	; 0x2b
 8004fda:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004fde:	7822      	ldrb	r2, [r4, #0]
 8004fe0:	2a2a      	cmp	r2, #42	; 0x2a
 8004fe2:	d016      	beq.n	8005012 <_svfiprintf_r+0xe6>
 8004fe4:	9a07      	ldr	r2, [sp, #28]
 8004fe6:	2100      	movs	r1, #0
 8004fe8:	200a      	movs	r0, #10
 8004fea:	4627      	mov	r7, r4
 8004fec:	3401      	adds	r4, #1
 8004fee:	783b      	ldrb	r3, [r7, #0]
 8004ff0:	3b30      	subs	r3, #48	; 0x30
 8004ff2:	2b09      	cmp	r3, #9
 8004ff4:	d951      	bls.n	800509a <_svfiprintf_r+0x16e>
 8004ff6:	b1c9      	cbz	r1, 800502c <_svfiprintf_r+0x100>
 8004ff8:	e011      	b.n	800501e <_svfiprintf_r+0xf2>
 8004ffa:	2b25      	cmp	r3, #37	; 0x25
 8004ffc:	d0c0      	beq.n	8004f80 <_svfiprintf_r+0x54>
 8004ffe:	4627      	mov	r7, r4
 8005000:	e7b9      	b.n	8004f76 <_svfiprintf_r+0x4a>
 8005002:	4a3f      	ldr	r2, [pc, #252]	; (8005100 <_svfiprintf_r+0x1d4>)
 8005004:	1a80      	subs	r0, r0, r2
 8005006:	fa0b f000 	lsl.w	r0, fp, r0
 800500a:	4318      	orrs	r0, r3
 800500c:	9004      	str	r0, [sp, #16]
 800500e:	463c      	mov	r4, r7
 8005010:	e7d3      	b.n	8004fba <_svfiprintf_r+0x8e>
 8005012:	9a03      	ldr	r2, [sp, #12]
 8005014:	1d11      	adds	r1, r2, #4
 8005016:	6812      	ldr	r2, [r2, #0]
 8005018:	9103      	str	r1, [sp, #12]
 800501a:	2a00      	cmp	r2, #0
 800501c:	db01      	blt.n	8005022 <_svfiprintf_r+0xf6>
 800501e:	9207      	str	r2, [sp, #28]
 8005020:	e004      	b.n	800502c <_svfiprintf_r+0x100>
 8005022:	4252      	negs	r2, r2
 8005024:	f043 0302 	orr.w	r3, r3, #2
 8005028:	9207      	str	r2, [sp, #28]
 800502a:	9304      	str	r3, [sp, #16]
 800502c:	783b      	ldrb	r3, [r7, #0]
 800502e:	2b2e      	cmp	r3, #46	; 0x2e
 8005030:	d10e      	bne.n	8005050 <_svfiprintf_r+0x124>
 8005032:	787b      	ldrb	r3, [r7, #1]
 8005034:	2b2a      	cmp	r3, #42	; 0x2a
 8005036:	f107 0101 	add.w	r1, r7, #1
 800503a:	d132      	bne.n	80050a2 <_svfiprintf_r+0x176>
 800503c:	9b03      	ldr	r3, [sp, #12]
 800503e:	1d1a      	adds	r2, r3, #4
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	9203      	str	r2, [sp, #12]
 8005044:	2b00      	cmp	r3, #0
 8005046:	bfb8      	it	lt
 8005048:	f04f 33ff 	movlt.w	r3, #4294967295
 800504c:	3702      	adds	r7, #2
 800504e:	9305      	str	r3, [sp, #20]
 8005050:	4c2c      	ldr	r4, [pc, #176]	; (8005104 <_svfiprintf_r+0x1d8>)
 8005052:	7839      	ldrb	r1, [r7, #0]
 8005054:	2203      	movs	r2, #3
 8005056:	4620      	mov	r0, r4
 8005058:	f7fb f8ca 	bl	80001f0 <memchr>
 800505c:	b138      	cbz	r0, 800506e <_svfiprintf_r+0x142>
 800505e:	2340      	movs	r3, #64	; 0x40
 8005060:	1b00      	subs	r0, r0, r4
 8005062:	fa03 f000 	lsl.w	r0, r3, r0
 8005066:	9b04      	ldr	r3, [sp, #16]
 8005068:	4303      	orrs	r3, r0
 800506a:	9304      	str	r3, [sp, #16]
 800506c:	3701      	adds	r7, #1
 800506e:	7839      	ldrb	r1, [r7, #0]
 8005070:	4825      	ldr	r0, [pc, #148]	; (8005108 <_svfiprintf_r+0x1dc>)
 8005072:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005076:	2206      	movs	r2, #6
 8005078:	1c7e      	adds	r6, r7, #1
 800507a:	f7fb f8b9 	bl	80001f0 <memchr>
 800507e:	2800      	cmp	r0, #0
 8005080:	d035      	beq.n	80050ee <_svfiprintf_r+0x1c2>
 8005082:	4b22      	ldr	r3, [pc, #136]	; (800510c <_svfiprintf_r+0x1e0>)
 8005084:	b9fb      	cbnz	r3, 80050c6 <_svfiprintf_r+0x19a>
 8005086:	9b03      	ldr	r3, [sp, #12]
 8005088:	3307      	adds	r3, #7
 800508a:	f023 0307 	bic.w	r3, r3, #7
 800508e:	3308      	adds	r3, #8
 8005090:	9303      	str	r3, [sp, #12]
 8005092:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005094:	444b      	add	r3, r9
 8005096:	9309      	str	r3, [sp, #36]	; 0x24
 8005098:	e76c      	b.n	8004f74 <_svfiprintf_r+0x48>
 800509a:	fb00 3202 	mla	r2, r0, r2, r3
 800509e:	2101      	movs	r1, #1
 80050a0:	e7a3      	b.n	8004fea <_svfiprintf_r+0xbe>
 80050a2:	2300      	movs	r3, #0
 80050a4:	9305      	str	r3, [sp, #20]
 80050a6:	4618      	mov	r0, r3
 80050a8:	240a      	movs	r4, #10
 80050aa:	460f      	mov	r7, r1
 80050ac:	3101      	adds	r1, #1
 80050ae:	783a      	ldrb	r2, [r7, #0]
 80050b0:	3a30      	subs	r2, #48	; 0x30
 80050b2:	2a09      	cmp	r2, #9
 80050b4:	d903      	bls.n	80050be <_svfiprintf_r+0x192>
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d0ca      	beq.n	8005050 <_svfiprintf_r+0x124>
 80050ba:	9005      	str	r0, [sp, #20]
 80050bc:	e7c8      	b.n	8005050 <_svfiprintf_r+0x124>
 80050be:	fb04 2000 	mla	r0, r4, r0, r2
 80050c2:	2301      	movs	r3, #1
 80050c4:	e7f1      	b.n	80050aa <_svfiprintf_r+0x17e>
 80050c6:	ab03      	add	r3, sp, #12
 80050c8:	9300      	str	r3, [sp, #0]
 80050ca:	462a      	mov	r2, r5
 80050cc:	4b10      	ldr	r3, [pc, #64]	; (8005110 <_svfiprintf_r+0x1e4>)
 80050ce:	a904      	add	r1, sp, #16
 80050d0:	4640      	mov	r0, r8
 80050d2:	f3af 8000 	nop.w
 80050d6:	f1b0 3fff 	cmp.w	r0, #4294967295
 80050da:	4681      	mov	r9, r0
 80050dc:	d1d9      	bne.n	8005092 <_svfiprintf_r+0x166>
 80050de:	89ab      	ldrh	r3, [r5, #12]
 80050e0:	065b      	lsls	r3, r3, #25
 80050e2:	f53f af38 	bmi.w	8004f56 <_svfiprintf_r+0x2a>
 80050e6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80050e8:	b01d      	add	sp, #116	; 0x74
 80050ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050ee:	ab03      	add	r3, sp, #12
 80050f0:	9300      	str	r3, [sp, #0]
 80050f2:	462a      	mov	r2, r5
 80050f4:	4b06      	ldr	r3, [pc, #24]	; (8005110 <_svfiprintf_r+0x1e4>)
 80050f6:	a904      	add	r1, sp, #16
 80050f8:	4640      	mov	r0, r8
 80050fa:	f000 f9c1 	bl	8005480 <_printf_i>
 80050fe:	e7ea      	b.n	80050d6 <_svfiprintf_r+0x1aa>
 8005100:	08005a38 	.word	0x08005a38
 8005104:	08005a3e 	.word	0x08005a3e
 8005108:	08005a42 	.word	0x08005a42
 800510c:	00000000 	.word	0x00000000
 8005110:	08004e75 	.word	0x08004e75

08005114 <__sfputc_r>:
 8005114:	6893      	ldr	r3, [r2, #8]
 8005116:	3b01      	subs	r3, #1
 8005118:	2b00      	cmp	r3, #0
 800511a:	b410      	push	{r4}
 800511c:	6093      	str	r3, [r2, #8]
 800511e:	da09      	bge.n	8005134 <__sfputc_r+0x20>
 8005120:	6994      	ldr	r4, [r2, #24]
 8005122:	42a3      	cmp	r3, r4
 8005124:	db02      	blt.n	800512c <__sfputc_r+0x18>
 8005126:	b2cb      	uxtb	r3, r1
 8005128:	2b0a      	cmp	r3, #10
 800512a:	d103      	bne.n	8005134 <__sfputc_r+0x20>
 800512c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005130:	f7ff bbca 	b.w	80048c8 <__swbuf_r>
 8005134:	6813      	ldr	r3, [r2, #0]
 8005136:	1c58      	adds	r0, r3, #1
 8005138:	6010      	str	r0, [r2, #0]
 800513a:	7019      	strb	r1, [r3, #0]
 800513c:	b2c8      	uxtb	r0, r1
 800513e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005142:	4770      	bx	lr

08005144 <__sfputs_r>:
 8005144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005146:	4606      	mov	r6, r0
 8005148:	460f      	mov	r7, r1
 800514a:	4614      	mov	r4, r2
 800514c:	18d5      	adds	r5, r2, r3
 800514e:	42ac      	cmp	r4, r5
 8005150:	d101      	bne.n	8005156 <__sfputs_r+0x12>
 8005152:	2000      	movs	r0, #0
 8005154:	e007      	b.n	8005166 <__sfputs_r+0x22>
 8005156:	463a      	mov	r2, r7
 8005158:	f814 1b01 	ldrb.w	r1, [r4], #1
 800515c:	4630      	mov	r0, r6
 800515e:	f7ff ffd9 	bl	8005114 <__sfputc_r>
 8005162:	1c43      	adds	r3, r0, #1
 8005164:	d1f3      	bne.n	800514e <__sfputs_r+0xa>
 8005166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005168 <_vfiprintf_r>:
 8005168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800516c:	b09d      	sub	sp, #116	; 0x74
 800516e:	460c      	mov	r4, r1
 8005170:	4617      	mov	r7, r2
 8005172:	9303      	str	r3, [sp, #12]
 8005174:	4606      	mov	r6, r0
 8005176:	b118      	cbz	r0, 8005180 <_vfiprintf_r+0x18>
 8005178:	6983      	ldr	r3, [r0, #24]
 800517a:	b90b      	cbnz	r3, 8005180 <_vfiprintf_r+0x18>
 800517c:	f7ff fd78 	bl	8004c70 <__sinit>
 8005180:	4b7c      	ldr	r3, [pc, #496]	; (8005374 <_vfiprintf_r+0x20c>)
 8005182:	429c      	cmp	r4, r3
 8005184:	d157      	bne.n	8005236 <_vfiprintf_r+0xce>
 8005186:	6874      	ldr	r4, [r6, #4]
 8005188:	89a3      	ldrh	r3, [r4, #12]
 800518a:	0718      	lsls	r0, r3, #28
 800518c:	d55d      	bpl.n	800524a <_vfiprintf_r+0xe2>
 800518e:	6923      	ldr	r3, [r4, #16]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d05a      	beq.n	800524a <_vfiprintf_r+0xe2>
 8005194:	2300      	movs	r3, #0
 8005196:	9309      	str	r3, [sp, #36]	; 0x24
 8005198:	2320      	movs	r3, #32
 800519a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800519e:	2330      	movs	r3, #48	; 0x30
 80051a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80051a4:	f04f 0b01 	mov.w	fp, #1
 80051a8:	46b8      	mov	r8, r7
 80051aa:	4645      	mov	r5, r8
 80051ac:	f815 3b01 	ldrb.w	r3, [r5], #1
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d155      	bne.n	8005260 <_vfiprintf_r+0xf8>
 80051b4:	ebb8 0a07 	subs.w	sl, r8, r7
 80051b8:	d00b      	beq.n	80051d2 <_vfiprintf_r+0x6a>
 80051ba:	4653      	mov	r3, sl
 80051bc:	463a      	mov	r2, r7
 80051be:	4621      	mov	r1, r4
 80051c0:	4630      	mov	r0, r6
 80051c2:	f7ff ffbf 	bl	8005144 <__sfputs_r>
 80051c6:	3001      	adds	r0, #1
 80051c8:	f000 80c4 	beq.w	8005354 <_vfiprintf_r+0x1ec>
 80051cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051ce:	4453      	add	r3, sl
 80051d0:	9309      	str	r3, [sp, #36]	; 0x24
 80051d2:	f898 3000 	ldrb.w	r3, [r8]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	f000 80bc 	beq.w	8005354 <_vfiprintf_r+0x1ec>
 80051dc:	2300      	movs	r3, #0
 80051de:	f04f 32ff 	mov.w	r2, #4294967295
 80051e2:	9304      	str	r3, [sp, #16]
 80051e4:	9307      	str	r3, [sp, #28]
 80051e6:	9205      	str	r2, [sp, #20]
 80051e8:	9306      	str	r3, [sp, #24]
 80051ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80051ee:	931a      	str	r3, [sp, #104]	; 0x68
 80051f0:	2205      	movs	r2, #5
 80051f2:	7829      	ldrb	r1, [r5, #0]
 80051f4:	4860      	ldr	r0, [pc, #384]	; (8005378 <_vfiprintf_r+0x210>)
 80051f6:	f7fa fffb 	bl	80001f0 <memchr>
 80051fa:	f105 0801 	add.w	r8, r5, #1
 80051fe:	9b04      	ldr	r3, [sp, #16]
 8005200:	2800      	cmp	r0, #0
 8005202:	d131      	bne.n	8005268 <_vfiprintf_r+0x100>
 8005204:	06d9      	lsls	r1, r3, #27
 8005206:	bf44      	itt	mi
 8005208:	2220      	movmi	r2, #32
 800520a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800520e:	071a      	lsls	r2, r3, #28
 8005210:	bf44      	itt	mi
 8005212:	222b      	movmi	r2, #43	; 0x2b
 8005214:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005218:	782a      	ldrb	r2, [r5, #0]
 800521a:	2a2a      	cmp	r2, #42	; 0x2a
 800521c:	d02c      	beq.n	8005278 <_vfiprintf_r+0x110>
 800521e:	9a07      	ldr	r2, [sp, #28]
 8005220:	2100      	movs	r1, #0
 8005222:	200a      	movs	r0, #10
 8005224:	46a8      	mov	r8, r5
 8005226:	3501      	adds	r5, #1
 8005228:	f898 3000 	ldrb.w	r3, [r8]
 800522c:	3b30      	subs	r3, #48	; 0x30
 800522e:	2b09      	cmp	r3, #9
 8005230:	d96d      	bls.n	800530e <_vfiprintf_r+0x1a6>
 8005232:	b371      	cbz	r1, 8005292 <_vfiprintf_r+0x12a>
 8005234:	e026      	b.n	8005284 <_vfiprintf_r+0x11c>
 8005236:	4b51      	ldr	r3, [pc, #324]	; (800537c <_vfiprintf_r+0x214>)
 8005238:	429c      	cmp	r4, r3
 800523a:	d101      	bne.n	8005240 <_vfiprintf_r+0xd8>
 800523c:	68b4      	ldr	r4, [r6, #8]
 800523e:	e7a3      	b.n	8005188 <_vfiprintf_r+0x20>
 8005240:	4b4f      	ldr	r3, [pc, #316]	; (8005380 <_vfiprintf_r+0x218>)
 8005242:	429c      	cmp	r4, r3
 8005244:	bf08      	it	eq
 8005246:	68f4      	ldreq	r4, [r6, #12]
 8005248:	e79e      	b.n	8005188 <_vfiprintf_r+0x20>
 800524a:	4621      	mov	r1, r4
 800524c:	4630      	mov	r0, r6
 800524e:	f7ff fb9f 	bl	8004990 <__swsetup_r>
 8005252:	2800      	cmp	r0, #0
 8005254:	d09e      	beq.n	8005194 <_vfiprintf_r+0x2c>
 8005256:	f04f 30ff 	mov.w	r0, #4294967295
 800525a:	b01d      	add	sp, #116	; 0x74
 800525c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005260:	2b25      	cmp	r3, #37	; 0x25
 8005262:	d0a7      	beq.n	80051b4 <_vfiprintf_r+0x4c>
 8005264:	46a8      	mov	r8, r5
 8005266:	e7a0      	b.n	80051aa <_vfiprintf_r+0x42>
 8005268:	4a43      	ldr	r2, [pc, #268]	; (8005378 <_vfiprintf_r+0x210>)
 800526a:	1a80      	subs	r0, r0, r2
 800526c:	fa0b f000 	lsl.w	r0, fp, r0
 8005270:	4318      	orrs	r0, r3
 8005272:	9004      	str	r0, [sp, #16]
 8005274:	4645      	mov	r5, r8
 8005276:	e7bb      	b.n	80051f0 <_vfiprintf_r+0x88>
 8005278:	9a03      	ldr	r2, [sp, #12]
 800527a:	1d11      	adds	r1, r2, #4
 800527c:	6812      	ldr	r2, [r2, #0]
 800527e:	9103      	str	r1, [sp, #12]
 8005280:	2a00      	cmp	r2, #0
 8005282:	db01      	blt.n	8005288 <_vfiprintf_r+0x120>
 8005284:	9207      	str	r2, [sp, #28]
 8005286:	e004      	b.n	8005292 <_vfiprintf_r+0x12a>
 8005288:	4252      	negs	r2, r2
 800528a:	f043 0302 	orr.w	r3, r3, #2
 800528e:	9207      	str	r2, [sp, #28]
 8005290:	9304      	str	r3, [sp, #16]
 8005292:	f898 3000 	ldrb.w	r3, [r8]
 8005296:	2b2e      	cmp	r3, #46	; 0x2e
 8005298:	d110      	bne.n	80052bc <_vfiprintf_r+0x154>
 800529a:	f898 3001 	ldrb.w	r3, [r8, #1]
 800529e:	2b2a      	cmp	r3, #42	; 0x2a
 80052a0:	f108 0101 	add.w	r1, r8, #1
 80052a4:	d137      	bne.n	8005316 <_vfiprintf_r+0x1ae>
 80052a6:	9b03      	ldr	r3, [sp, #12]
 80052a8:	1d1a      	adds	r2, r3, #4
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	9203      	str	r2, [sp, #12]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	bfb8      	it	lt
 80052b2:	f04f 33ff 	movlt.w	r3, #4294967295
 80052b6:	f108 0802 	add.w	r8, r8, #2
 80052ba:	9305      	str	r3, [sp, #20]
 80052bc:	4d31      	ldr	r5, [pc, #196]	; (8005384 <_vfiprintf_r+0x21c>)
 80052be:	f898 1000 	ldrb.w	r1, [r8]
 80052c2:	2203      	movs	r2, #3
 80052c4:	4628      	mov	r0, r5
 80052c6:	f7fa ff93 	bl	80001f0 <memchr>
 80052ca:	b140      	cbz	r0, 80052de <_vfiprintf_r+0x176>
 80052cc:	2340      	movs	r3, #64	; 0x40
 80052ce:	1b40      	subs	r0, r0, r5
 80052d0:	fa03 f000 	lsl.w	r0, r3, r0
 80052d4:	9b04      	ldr	r3, [sp, #16]
 80052d6:	4303      	orrs	r3, r0
 80052d8:	9304      	str	r3, [sp, #16]
 80052da:	f108 0801 	add.w	r8, r8, #1
 80052de:	f898 1000 	ldrb.w	r1, [r8]
 80052e2:	4829      	ldr	r0, [pc, #164]	; (8005388 <_vfiprintf_r+0x220>)
 80052e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80052e8:	2206      	movs	r2, #6
 80052ea:	f108 0701 	add.w	r7, r8, #1
 80052ee:	f7fa ff7f 	bl	80001f0 <memchr>
 80052f2:	2800      	cmp	r0, #0
 80052f4:	d034      	beq.n	8005360 <_vfiprintf_r+0x1f8>
 80052f6:	4b25      	ldr	r3, [pc, #148]	; (800538c <_vfiprintf_r+0x224>)
 80052f8:	bb03      	cbnz	r3, 800533c <_vfiprintf_r+0x1d4>
 80052fa:	9b03      	ldr	r3, [sp, #12]
 80052fc:	3307      	adds	r3, #7
 80052fe:	f023 0307 	bic.w	r3, r3, #7
 8005302:	3308      	adds	r3, #8
 8005304:	9303      	str	r3, [sp, #12]
 8005306:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005308:	444b      	add	r3, r9
 800530a:	9309      	str	r3, [sp, #36]	; 0x24
 800530c:	e74c      	b.n	80051a8 <_vfiprintf_r+0x40>
 800530e:	fb00 3202 	mla	r2, r0, r2, r3
 8005312:	2101      	movs	r1, #1
 8005314:	e786      	b.n	8005224 <_vfiprintf_r+0xbc>
 8005316:	2300      	movs	r3, #0
 8005318:	9305      	str	r3, [sp, #20]
 800531a:	4618      	mov	r0, r3
 800531c:	250a      	movs	r5, #10
 800531e:	4688      	mov	r8, r1
 8005320:	3101      	adds	r1, #1
 8005322:	f898 2000 	ldrb.w	r2, [r8]
 8005326:	3a30      	subs	r2, #48	; 0x30
 8005328:	2a09      	cmp	r2, #9
 800532a:	d903      	bls.n	8005334 <_vfiprintf_r+0x1cc>
 800532c:	2b00      	cmp	r3, #0
 800532e:	d0c5      	beq.n	80052bc <_vfiprintf_r+0x154>
 8005330:	9005      	str	r0, [sp, #20]
 8005332:	e7c3      	b.n	80052bc <_vfiprintf_r+0x154>
 8005334:	fb05 2000 	mla	r0, r5, r0, r2
 8005338:	2301      	movs	r3, #1
 800533a:	e7f0      	b.n	800531e <_vfiprintf_r+0x1b6>
 800533c:	ab03      	add	r3, sp, #12
 800533e:	9300      	str	r3, [sp, #0]
 8005340:	4622      	mov	r2, r4
 8005342:	4b13      	ldr	r3, [pc, #76]	; (8005390 <_vfiprintf_r+0x228>)
 8005344:	a904      	add	r1, sp, #16
 8005346:	4630      	mov	r0, r6
 8005348:	f3af 8000 	nop.w
 800534c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005350:	4681      	mov	r9, r0
 8005352:	d1d8      	bne.n	8005306 <_vfiprintf_r+0x19e>
 8005354:	89a3      	ldrh	r3, [r4, #12]
 8005356:	065b      	lsls	r3, r3, #25
 8005358:	f53f af7d 	bmi.w	8005256 <_vfiprintf_r+0xee>
 800535c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800535e:	e77c      	b.n	800525a <_vfiprintf_r+0xf2>
 8005360:	ab03      	add	r3, sp, #12
 8005362:	9300      	str	r3, [sp, #0]
 8005364:	4622      	mov	r2, r4
 8005366:	4b0a      	ldr	r3, [pc, #40]	; (8005390 <_vfiprintf_r+0x228>)
 8005368:	a904      	add	r1, sp, #16
 800536a:	4630      	mov	r0, r6
 800536c:	f000 f888 	bl	8005480 <_printf_i>
 8005370:	e7ec      	b.n	800534c <_vfiprintf_r+0x1e4>
 8005372:	bf00      	nop
 8005374:	080059f8 	.word	0x080059f8
 8005378:	08005a38 	.word	0x08005a38
 800537c:	08005a18 	.word	0x08005a18
 8005380:	080059d8 	.word	0x080059d8
 8005384:	08005a3e 	.word	0x08005a3e
 8005388:	08005a42 	.word	0x08005a42
 800538c:	00000000 	.word	0x00000000
 8005390:	08005145 	.word	0x08005145

08005394 <_printf_common>:
 8005394:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005398:	4691      	mov	r9, r2
 800539a:	461f      	mov	r7, r3
 800539c:	688a      	ldr	r2, [r1, #8]
 800539e:	690b      	ldr	r3, [r1, #16]
 80053a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80053a4:	4293      	cmp	r3, r2
 80053a6:	bfb8      	it	lt
 80053a8:	4613      	movlt	r3, r2
 80053aa:	f8c9 3000 	str.w	r3, [r9]
 80053ae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80053b2:	4606      	mov	r6, r0
 80053b4:	460c      	mov	r4, r1
 80053b6:	b112      	cbz	r2, 80053be <_printf_common+0x2a>
 80053b8:	3301      	adds	r3, #1
 80053ba:	f8c9 3000 	str.w	r3, [r9]
 80053be:	6823      	ldr	r3, [r4, #0]
 80053c0:	0699      	lsls	r1, r3, #26
 80053c2:	bf42      	ittt	mi
 80053c4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80053c8:	3302      	addmi	r3, #2
 80053ca:	f8c9 3000 	strmi.w	r3, [r9]
 80053ce:	6825      	ldr	r5, [r4, #0]
 80053d0:	f015 0506 	ands.w	r5, r5, #6
 80053d4:	d107      	bne.n	80053e6 <_printf_common+0x52>
 80053d6:	f104 0a19 	add.w	sl, r4, #25
 80053da:	68e3      	ldr	r3, [r4, #12]
 80053dc:	f8d9 2000 	ldr.w	r2, [r9]
 80053e0:	1a9b      	subs	r3, r3, r2
 80053e2:	429d      	cmp	r5, r3
 80053e4:	db29      	blt.n	800543a <_printf_common+0xa6>
 80053e6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80053ea:	6822      	ldr	r2, [r4, #0]
 80053ec:	3300      	adds	r3, #0
 80053ee:	bf18      	it	ne
 80053f0:	2301      	movne	r3, #1
 80053f2:	0692      	lsls	r2, r2, #26
 80053f4:	d42e      	bmi.n	8005454 <_printf_common+0xc0>
 80053f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80053fa:	4639      	mov	r1, r7
 80053fc:	4630      	mov	r0, r6
 80053fe:	47c0      	blx	r8
 8005400:	3001      	adds	r0, #1
 8005402:	d021      	beq.n	8005448 <_printf_common+0xb4>
 8005404:	6823      	ldr	r3, [r4, #0]
 8005406:	68e5      	ldr	r5, [r4, #12]
 8005408:	f8d9 2000 	ldr.w	r2, [r9]
 800540c:	f003 0306 	and.w	r3, r3, #6
 8005410:	2b04      	cmp	r3, #4
 8005412:	bf08      	it	eq
 8005414:	1aad      	subeq	r5, r5, r2
 8005416:	68a3      	ldr	r3, [r4, #8]
 8005418:	6922      	ldr	r2, [r4, #16]
 800541a:	bf0c      	ite	eq
 800541c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005420:	2500      	movne	r5, #0
 8005422:	4293      	cmp	r3, r2
 8005424:	bfc4      	itt	gt
 8005426:	1a9b      	subgt	r3, r3, r2
 8005428:	18ed      	addgt	r5, r5, r3
 800542a:	f04f 0900 	mov.w	r9, #0
 800542e:	341a      	adds	r4, #26
 8005430:	454d      	cmp	r5, r9
 8005432:	d11b      	bne.n	800546c <_printf_common+0xd8>
 8005434:	2000      	movs	r0, #0
 8005436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800543a:	2301      	movs	r3, #1
 800543c:	4652      	mov	r2, sl
 800543e:	4639      	mov	r1, r7
 8005440:	4630      	mov	r0, r6
 8005442:	47c0      	blx	r8
 8005444:	3001      	adds	r0, #1
 8005446:	d103      	bne.n	8005450 <_printf_common+0xbc>
 8005448:	f04f 30ff 	mov.w	r0, #4294967295
 800544c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005450:	3501      	adds	r5, #1
 8005452:	e7c2      	b.n	80053da <_printf_common+0x46>
 8005454:	18e1      	adds	r1, r4, r3
 8005456:	1c5a      	adds	r2, r3, #1
 8005458:	2030      	movs	r0, #48	; 0x30
 800545a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800545e:	4422      	add	r2, r4
 8005460:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005464:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005468:	3302      	adds	r3, #2
 800546a:	e7c4      	b.n	80053f6 <_printf_common+0x62>
 800546c:	2301      	movs	r3, #1
 800546e:	4622      	mov	r2, r4
 8005470:	4639      	mov	r1, r7
 8005472:	4630      	mov	r0, r6
 8005474:	47c0      	blx	r8
 8005476:	3001      	adds	r0, #1
 8005478:	d0e6      	beq.n	8005448 <_printf_common+0xb4>
 800547a:	f109 0901 	add.w	r9, r9, #1
 800547e:	e7d7      	b.n	8005430 <_printf_common+0x9c>

08005480 <_printf_i>:
 8005480:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005484:	4617      	mov	r7, r2
 8005486:	7e0a      	ldrb	r2, [r1, #24]
 8005488:	b085      	sub	sp, #20
 800548a:	2a6e      	cmp	r2, #110	; 0x6e
 800548c:	4698      	mov	r8, r3
 800548e:	4606      	mov	r6, r0
 8005490:	460c      	mov	r4, r1
 8005492:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005494:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8005498:	f000 80bc 	beq.w	8005614 <_printf_i+0x194>
 800549c:	d81a      	bhi.n	80054d4 <_printf_i+0x54>
 800549e:	2a63      	cmp	r2, #99	; 0x63
 80054a0:	d02e      	beq.n	8005500 <_printf_i+0x80>
 80054a2:	d80a      	bhi.n	80054ba <_printf_i+0x3a>
 80054a4:	2a00      	cmp	r2, #0
 80054a6:	f000 80c8 	beq.w	800563a <_printf_i+0x1ba>
 80054aa:	2a58      	cmp	r2, #88	; 0x58
 80054ac:	f000 808a 	beq.w	80055c4 <_printf_i+0x144>
 80054b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80054b4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80054b8:	e02a      	b.n	8005510 <_printf_i+0x90>
 80054ba:	2a64      	cmp	r2, #100	; 0x64
 80054bc:	d001      	beq.n	80054c2 <_printf_i+0x42>
 80054be:	2a69      	cmp	r2, #105	; 0x69
 80054c0:	d1f6      	bne.n	80054b0 <_printf_i+0x30>
 80054c2:	6821      	ldr	r1, [r4, #0]
 80054c4:	681a      	ldr	r2, [r3, #0]
 80054c6:	f011 0f80 	tst.w	r1, #128	; 0x80
 80054ca:	d023      	beq.n	8005514 <_printf_i+0x94>
 80054cc:	1d11      	adds	r1, r2, #4
 80054ce:	6019      	str	r1, [r3, #0]
 80054d0:	6813      	ldr	r3, [r2, #0]
 80054d2:	e027      	b.n	8005524 <_printf_i+0xa4>
 80054d4:	2a73      	cmp	r2, #115	; 0x73
 80054d6:	f000 80b4 	beq.w	8005642 <_printf_i+0x1c2>
 80054da:	d808      	bhi.n	80054ee <_printf_i+0x6e>
 80054dc:	2a6f      	cmp	r2, #111	; 0x6f
 80054de:	d02a      	beq.n	8005536 <_printf_i+0xb6>
 80054e0:	2a70      	cmp	r2, #112	; 0x70
 80054e2:	d1e5      	bne.n	80054b0 <_printf_i+0x30>
 80054e4:	680a      	ldr	r2, [r1, #0]
 80054e6:	f042 0220 	orr.w	r2, r2, #32
 80054ea:	600a      	str	r2, [r1, #0]
 80054ec:	e003      	b.n	80054f6 <_printf_i+0x76>
 80054ee:	2a75      	cmp	r2, #117	; 0x75
 80054f0:	d021      	beq.n	8005536 <_printf_i+0xb6>
 80054f2:	2a78      	cmp	r2, #120	; 0x78
 80054f4:	d1dc      	bne.n	80054b0 <_printf_i+0x30>
 80054f6:	2278      	movs	r2, #120	; 0x78
 80054f8:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80054fc:	496e      	ldr	r1, [pc, #440]	; (80056b8 <_printf_i+0x238>)
 80054fe:	e064      	b.n	80055ca <_printf_i+0x14a>
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8005506:	1d11      	adds	r1, r2, #4
 8005508:	6019      	str	r1, [r3, #0]
 800550a:	6813      	ldr	r3, [r2, #0]
 800550c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005510:	2301      	movs	r3, #1
 8005512:	e0a3      	b.n	800565c <_printf_i+0x1dc>
 8005514:	f011 0f40 	tst.w	r1, #64	; 0x40
 8005518:	f102 0104 	add.w	r1, r2, #4
 800551c:	6019      	str	r1, [r3, #0]
 800551e:	d0d7      	beq.n	80054d0 <_printf_i+0x50>
 8005520:	f9b2 3000 	ldrsh.w	r3, [r2]
 8005524:	2b00      	cmp	r3, #0
 8005526:	da03      	bge.n	8005530 <_printf_i+0xb0>
 8005528:	222d      	movs	r2, #45	; 0x2d
 800552a:	425b      	negs	r3, r3
 800552c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005530:	4962      	ldr	r1, [pc, #392]	; (80056bc <_printf_i+0x23c>)
 8005532:	220a      	movs	r2, #10
 8005534:	e017      	b.n	8005566 <_printf_i+0xe6>
 8005536:	6820      	ldr	r0, [r4, #0]
 8005538:	6819      	ldr	r1, [r3, #0]
 800553a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800553e:	d003      	beq.n	8005548 <_printf_i+0xc8>
 8005540:	1d08      	adds	r0, r1, #4
 8005542:	6018      	str	r0, [r3, #0]
 8005544:	680b      	ldr	r3, [r1, #0]
 8005546:	e006      	b.n	8005556 <_printf_i+0xd6>
 8005548:	f010 0f40 	tst.w	r0, #64	; 0x40
 800554c:	f101 0004 	add.w	r0, r1, #4
 8005550:	6018      	str	r0, [r3, #0]
 8005552:	d0f7      	beq.n	8005544 <_printf_i+0xc4>
 8005554:	880b      	ldrh	r3, [r1, #0]
 8005556:	4959      	ldr	r1, [pc, #356]	; (80056bc <_printf_i+0x23c>)
 8005558:	2a6f      	cmp	r2, #111	; 0x6f
 800555a:	bf14      	ite	ne
 800555c:	220a      	movne	r2, #10
 800555e:	2208      	moveq	r2, #8
 8005560:	2000      	movs	r0, #0
 8005562:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8005566:	6865      	ldr	r5, [r4, #4]
 8005568:	60a5      	str	r5, [r4, #8]
 800556a:	2d00      	cmp	r5, #0
 800556c:	f2c0 809c 	blt.w	80056a8 <_printf_i+0x228>
 8005570:	6820      	ldr	r0, [r4, #0]
 8005572:	f020 0004 	bic.w	r0, r0, #4
 8005576:	6020      	str	r0, [r4, #0]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d13f      	bne.n	80055fc <_printf_i+0x17c>
 800557c:	2d00      	cmp	r5, #0
 800557e:	f040 8095 	bne.w	80056ac <_printf_i+0x22c>
 8005582:	4675      	mov	r5, lr
 8005584:	2a08      	cmp	r2, #8
 8005586:	d10b      	bne.n	80055a0 <_printf_i+0x120>
 8005588:	6823      	ldr	r3, [r4, #0]
 800558a:	07da      	lsls	r2, r3, #31
 800558c:	d508      	bpl.n	80055a0 <_printf_i+0x120>
 800558e:	6923      	ldr	r3, [r4, #16]
 8005590:	6862      	ldr	r2, [r4, #4]
 8005592:	429a      	cmp	r2, r3
 8005594:	bfde      	ittt	le
 8005596:	2330      	movle	r3, #48	; 0x30
 8005598:	f805 3c01 	strble.w	r3, [r5, #-1]
 800559c:	f105 35ff 	addle.w	r5, r5, #4294967295
 80055a0:	ebae 0305 	sub.w	r3, lr, r5
 80055a4:	6123      	str	r3, [r4, #16]
 80055a6:	f8cd 8000 	str.w	r8, [sp]
 80055aa:	463b      	mov	r3, r7
 80055ac:	aa03      	add	r2, sp, #12
 80055ae:	4621      	mov	r1, r4
 80055b0:	4630      	mov	r0, r6
 80055b2:	f7ff feef 	bl	8005394 <_printf_common>
 80055b6:	3001      	adds	r0, #1
 80055b8:	d155      	bne.n	8005666 <_printf_i+0x1e6>
 80055ba:	f04f 30ff 	mov.w	r0, #4294967295
 80055be:	b005      	add	sp, #20
 80055c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80055c4:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80055c8:	493c      	ldr	r1, [pc, #240]	; (80056bc <_printf_i+0x23c>)
 80055ca:	6822      	ldr	r2, [r4, #0]
 80055cc:	6818      	ldr	r0, [r3, #0]
 80055ce:	f012 0f80 	tst.w	r2, #128	; 0x80
 80055d2:	f100 0504 	add.w	r5, r0, #4
 80055d6:	601d      	str	r5, [r3, #0]
 80055d8:	d001      	beq.n	80055de <_printf_i+0x15e>
 80055da:	6803      	ldr	r3, [r0, #0]
 80055dc:	e002      	b.n	80055e4 <_printf_i+0x164>
 80055de:	0655      	lsls	r5, r2, #25
 80055e0:	d5fb      	bpl.n	80055da <_printf_i+0x15a>
 80055e2:	8803      	ldrh	r3, [r0, #0]
 80055e4:	07d0      	lsls	r0, r2, #31
 80055e6:	bf44      	itt	mi
 80055e8:	f042 0220 	orrmi.w	r2, r2, #32
 80055ec:	6022      	strmi	r2, [r4, #0]
 80055ee:	b91b      	cbnz	r3, 80055f8 <_printf_i+0x178>
 80055f0:	6822      	ldr	r2, [r4, #0]
 80055f2:	f022 0220 	bic.w	r2, r2, #32
 80055f6:	6022      	str	r2, [r4, #0]
 80055f8:	2210      	movs	r2, #16
 80055fa:	e7b1      	b.n	8005560 <_printf_i+0xe0>
 80055fc:	4675      	mov	r5, lr
 80055fe:	fbb3 f0f2 	udiv	r0, r3, r2
 8005602:	fb02 3310 	mls	r3, r2, r0, r3
 8005606:	5ccb      	ldrb	r3, [r1, r3]
 8005608:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800560c:	4603      	mov	r3, r0
 800560e:	2800      	cmp	r0, #0
 8005610:	d1f5      	bne.n	80055fe <_printf_i+0x17e>
 8005612:	e7b7      	b.n	8005584 <_printf_i+0x104>
 8005614:	6808      	ldr	r0, [r1, #0]
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	6949      	ldr	r1, [r1, #20]
 800561a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800561e:	d004      	beq.n	800562a <_printf_i+0x1aa>
 8005620:	1d10      	adds	r0, r2, #4
 8005622:	6018      	str	r0, [r3, #0]
 8005624:	6813      	ldr	r3, [r2, #0]
 8005626:	6019      	str	r1, [r3, #0]
 8005628:	e007      	b.n	800563a <_printf_i+0x1ba>
 800562a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800562e:	f102 0004 	add.w	r0, r2, #4
 8005632:	6018      	str	r0, [r3, #0]
 8005634:	6813      	ldr	r3, [r2, #0]
 8005636:	d0f6      	beq.n	8005626 <_printf_i+0x1a6>
 8005638:	8019      	strh	r1, [r3, #0]
 800563a:	2300      	movs	r3, #0
 800563c:	6123      	str	r3, [r4, #16]
 800563e:	4675      	mov	r5, lr
 8005640:	e7b1      	b.n	80055a6 <_printf_i+0x126>
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	1d11      	adds	r1, r2, #4
 8005646:	6019      	str	r1, [r3, #0]
 8005648:	6815      	ldr	r5, [r2, #0]
 800564a:	6862      	ldr	r2, [r4, #4]
 800564c:	2100      	movs	r1, #0
 800564e:	4628      	mov	r0, r5
 8005650:	f7fa fdce 	bl	80001f0 <memchr>
 8005654:	b108      	cbz	r0, 800565a <_printf_i+0x1da>
 8005656:	1b40      	subs	r0, r0, r5
 8005658:	6060      	str	r0, [r4, #4]
 800565a:	6863      	ldr	r3, [r4, #4]
 800565c:	6123      	str	r3, [r4, #16]
 800565e:	2300      	movs	r3, #0
 8005660:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005664:	e79f      	b.n	80055a6 <_printf_i+0x126>
 8005666:	6923      	ldr	r3, [r4, #16]
 8005668:	462a      	mov	r2, r5
 800566a:	4639      	mov	r1, r7
 800566c:	4630      	mov	r0, r6
 800566e:	47c0      	blx	r8
 8005670:	3001      	adds	r0, #1
 8005672:	d0a2      	beq.n	80055ba <_printf_i+0x13a>
 8005674:	6823      	ldr	r3, [r4, #0]
 8005676:	079b      	lsls	r3, r3, #30
 8005678:	d507      	bpl.n	800568a <_printf_i+0x20a>
 800567a:	2500      	movs	r5, #0
 800567c:	f104 0919 	add.w	r9, r4, #25
 8005680:	68e3      	ldr	r3, [r4, #12]
 8005682:	9a03      	ldr	r2, [sp, #12]
 8005684:	1a9b      	subs	r3, r3, r2
 8005686:	429d      	cmp	r5, r3
 8005688:	db05      	blt.n	8005696 <_printf_i+0x216>
 800568a:	68e0      	ldr	r0, [r4, #12]
 800568c:	9b03      	ldr	r3, [sp, #12]
 800568e:	4298      	cmp	r0, r3
 8005690:	bfb8      	it	lt
 8005692:	4618      	movlt	r0, r3
 8005694:	e793      	b.n	80055be <_printf_i+0x13e>
 8005696:	2301      	movs	r3, #1
 8005698:	464a      	mov	r2, r9
 800569a:	4639      	mov	r1, r7
 800569c:	4630      	mov	r0, r6
 800569e:	47c0      	blx	r8
 80056a0:	3001      	adds	r0, #1
 80056a2:	d08a      	beq.n	80055ba <_printf_i+0x13a>
 80056a4:	3501      	adds	r5, #1
 80056a6:	e7eb      	b.n	8005680 <_printf_i+0x200>
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d1a7      	bne.n	80055fc <_printf_i+0x17c>
 80056ac:	780b      	ldrb	r3, [r1, #0]
 80056ae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80056b2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80056b6:	e765      	b.n	8005584 <_printf_i+0x104>
 80056b8:	08005a5a 	.word	0x08005a5a
 80056bc:	08005a49 	.word	0x08005a49

080056c0 <_read_r>:
 80056c0:	b538      	push	{r3, r4, r5, lr}
 80056c2:	4c07      	ldr	r4, [pc, #28]	; (80056e0 <_read_r+0x20>)
 80056c4:	4605      	mov	r5, r0
 80056c6:	4608      	mov	r0, r1
 80056c8:	4611      	mov	r1, r2
 80056ca:	2200      	movs	r2, #0
 80056cc:	6022      	str	r2, [r4, #0]
 80056ce:	461a      	mov	r2, r3
 80056d0:	f7fb faa2 	bl	8000c18 <_read>
 80056d4:	1c43      	adds	r3, r0, #1
 80056d6:	d102      	bne.n	80056de <_read_r+0x1e>
 80056d8:	6823      	ldr	r3, [r4, #0]
 80056da:	b103      	cbz	r3, 80056de <_read_r+0x1e>
 80056dc:	602b      	str	r3, [r5, #0]
 80056de:	bd38      	pop	{r3, r4, r5, pc}
 80056e0:	20000a24 	.word	0x20000a24

080056e4 <_fstat_r>:
 80056e4:	b538      	push	{r3, r4, r5, lr}
 80056e6:	4c07      	ldr	r4, [pc, #28]	; (8005704 <_fstat_r+0x20>)
 80056e8:	2300      	movs	r3, #0
 80056ea:	4605      	mov	r5, r0
 80056ec:	4608      	mov	r0, r1
 80056ee:	4611      	mov	r1, r2
 80056f0:	6023      	str	r3, [r4, #0]
 80056f2:	f7fb fab9 	bl	8000c68 <_fstat>
 80056f6:	1c43      	adds	r3, r0, #1
 80056f8:	d102      	bne.n	8005700 <_fstat_r+0x1c>
 80056fa:	6823      	ldr	r3, [r4, #0]
 80056fc:	b103      	cbz	r3, 8005700 <_fstat_r+0x1c>
 80056fe:	602b      	str	r3, [r5, #0]
 8005700:	bd38      	pop	{r3, r4, r5, pc}
 8005702:	bf00      	nop
 8005704:	20000a24 	.word	0x20000a24

08005708 <_isatty_r>:
 8005708:	b538      	push	{r3, r4, r5, lr}
 800570a:	4c06      	ldr	r4, [pc, #24]	; (8005724 <_isatty_r+0x1c>)
 800570c:	2300      	movs	r3, #0
 800570e:	4605      	mov	r5, r0
 8005710:	4608      	mov	r0, r1
 8005712:	6023      	str	r3, [r4, #0]
 8005714:	f7fb fa16 	bl	8000b44 <_isatty>
 8005718:	1c43      	adds	r3, r0, #1
 800571a:	d102      	bne.n	8005722 <_isatty_r+0x1a>
 800571c:	6823      	ldr	r3, [r4, #0]
 800571e:	b103      	cbz	r3, 8005722 <_isatty_r+0x1a>
 8005720:	602b      	str	r3, [r5, #0]
 8005722:	bd38      	pop	{r3, r4, r5, pc}
 8005724:	20000a24 	.word	0x20000a24

08005728 <memmove>:
 8005728:	4288      	cmp	r0, r1
 800572a:	b510      	push	{r4, lr}
 800572c:	eb01 0302 	add.w	r3, r1, r2
 8005730:	d803      	bhi.n	800573a <memmove+0x12>
 8005732:	1e42      	subs	r2, r0, #1
 8005734:	4299      	cmp	r1, r3
 8005736:	d10c      	bne.n	8005752 <memmove+0x2a>
 8005738:	bd10      	pop	{r4, pc}
 800573a:	4298      	cmp	r0, r3
 800573c:	d2f9      	bcs.n	8005732 <memmove+0xa>
 800573e:	1881      	adds	r1, r0, r2
 8005740:	1ad2      	subs	r2, r2, r3
 8005742:	42d3      	cmn	r3, r2
 8005744:	d100      	bne.n	8005748 <memmove+0x20>
 8005746:	bd10      	pop	{r4, pc}
 8005748:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800574c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005750:	e7f7      	b.n	8005742 <memmove+0x1a>
 8005752:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005756:	f802 4f01 	strb.w	r4, [r2, #1]!
 800575a:	e7eb      	b.n	8005734 <memmove+0xc>

0800575c <_realloc_r>:
 800575c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800575e:	4607      	mov	r7, r0
 8005760:	4614      	mov	r4, r2
 8005762:	460e      	mov	r6, r1
 8005764:	b921      	cbnz	r1, 8005770 <_realloc_r+0x14>
 8005766:	4611      	mov	r1, r2
 8005768:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800576c:	f7fe beac 	b.w	80044c8 <_malloc_r>
 8005770:	b922      	cbnz	r2, 800577c <_realloc_r+0x20>
 8005772:	f7fe fe5b 	bl	800442c <_free_r>
 8005776:	4625      	mov	r5, r4
 8005778:	4628      	mov	r0, r5
 800577a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800577c:	f000 f814 	bl	80057a8 <_malloc_usable_size_r>
 8005780:	4284      	cmp	r4, r0
 8005782:	d90f      	bls.n	80057a4 <_realloc_r+0x48>
 8005784:	4621      	mov	r1, r4
 8005786:	4638      	mov	r0, r7
 8005788:	f7fe fe9e 	bl	80044c8 <_malloc_r>
 800578c:	4605      	mov	r5, r0
 800578e:	2800      	cmp	r0, #0
 8005790:	d0f2      	beq.n	8005778 <_realloc_r+0x1c>
 8005792:	4631      	mov	r1, r6
 8005794:	4622      	mov	r2, r4
 8005796:	f7fe fe35 	bl	8004404 <memcpy>
 800579a:	4631      	mov	r1, r6
 800579c:	4638      	mov	r0, r7
 800579e:	f7fe fe45 	bl	800442c <_free_r>
 80057a2:	e7e9      	b.n	8005778 <_realloc_r+0x1c>
 80057a4:	4635      	mov	r5, r6
 80057a6:	e7e7      	b.n	8005778 <_realloc_r+0x1c>

080057a8 <_malloc_usable_size_r>:
 80057a8:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80057ac:	2800      	cmp	r0, #0
 80057ae:	f1a0 0004 	sub.w	r0, r0, #4
 80057b2:	bfbc      	itt	lt
 80057b4:	580b      	ldrlt	r3, [r1, r0]
 80057b6:	18c0      	addlt	r0, r0, r3
 80057b8:	4770      	bx	lr
	...

080057bc <_sbrk>:
 80057bc:	4b04      	ldr	r3, [pc, #16]	; (80057d0 <_sbrk+0x14>)
 80057be:	6819      	ldr	r1, [r3, #0]
 80057c0:	4602      	mov	r2, r0
 80057c2:	b909      	cbnz	r1, 80057c8 <_sbrk+0xc>
 80057c4:	4903      	ldr	r1, [pc, #12]	; (80057d4 <_sbrk+0x18>)
 80057c6:	6019      	str	r1, [r3, #0]
 80057c8:	6818      	ldr	r0, [r3, #0]
 80057ca:	4402      	add	r2, r0
 80057cc:	601a      	str	r2, [r3, #0]
 80057ce:	4770      	bx	lr
 80057d0:	200000fc 	.word	0x200000fc
 80057d4:	20000a28 	.word	0x20000a28

080057d8 <_init>:
 80057d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057da:	bf00      	nop
 80057dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057de:	bc08      	pop	{r3}
 80057e0:	469e      	mov	lr, r3
 80057e2:	4770      	bx	lr

080057e4 <_fini>:
 80057e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057e6:	bf00      	nop
 80057e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057ea:	bc08      	pop	{r3}
 80057ec:	469e      	mov	lr, r3
 80057ee:	4770      	bx	lr
